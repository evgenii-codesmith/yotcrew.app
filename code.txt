RUN_GUIDE.md:
<code>
# üöÄ How to Run the Daywork123.com Scraper

## Quick Start (5 minutes)

### 1. Install Dependencies
```bash
# In your project directory
pip install -r requirements.txt
playwright install chromium
```

### 2. Test the Installation
```bash
# Run the test script to verify everything works
python test_daywork123_scraper.py
```

### 3. Run Individual Scrapers
```bash
# Scrape Daywork123.com (1 page)
python -c "from app.services.scraping_service import scrape_daywork123; import asyncio; print(asyncio.run(scrape_daywork123(max_pages=1)))"

# Scrape Yotspot.com (1 page)  
python -c "from app.services.scraping_service import scrape_yotspot; import asyncio; print(asyncio.run(scrape_yotspot(max_pages=1)))"

# Scrape all sources
python -c "from app.services.scraping_service import scrape_all_sources; import asyncio; print(asyncio.run(scrape_all_sources(max_pages=1)))"
```

## Detailed Usage Guide

### Method 1: Using the Test Script (Recommended for Testing)
```bash
# This runs comprehensive tests for all scrapers
python test_daywork123_scraper.py
```

### Method 2: Using the Scraping Service (Production)
```python
# Create a simple run script: run_scraper.py
import asyncio
from app.services.scraping_service import ScrapingService

async def main():
    service = ScrapingService()
    
    # Option A: Scrape Daywork123 only
    result = await service.scrape_source("daywork123", max_pages=3)
    print(f"Daywork123: Found {result['jobs_found']} jobs, {result['new_jobs']} new")
    
    # Option B: Scrape all sources
    results = await service.scrape_all_sources(max_pages=2)
    for result in results:
        print(f"{result['source']}: {result['jobs_found']} jobs found")

if __name__ == "__main__":
    asyncio.run(main())
```

Run it:
```bash
python run_scraper.py
```

### Method 3: Interactive Python
```bash
# Start Python interactive mode
python

# Then run these commands:
from app.services.scraping_service import ScrapingService
import asyncio

service = ScrapingService()
result = asyncio.run(service.scrape_source("daywork123", max_pages=2))
print(result)
```

## Common Usage Patterns

### Check What's Available
```bash
# List all registered scrapers
python -c "from app.scrapers.registry import ScraperRegistry; print('Available scrapers:', ScraperRegistry.list_scrapers())"

# Check health of all sources
python -c "from app.services.scraping_service import ScrapingService; import asyncio; service = ScrapingService(); print(asyncio.run(service.health_check_all()))"
```

### Run with Custom Settings
```bash
# Create custom_run.py
import asyncio
from app.services.scraping_service import ScrapingService

async def custom_scrape():
    service = ScrapingService()
    
    # Scrape with filters
    filters = {"location": "Caribbean", "job_type": "deckhand"}
    
    # Scrape 5 pages from Daywork123
    result = await service.scrape_source("daywork123", max_pages=5)
    
    print(f"Scraped {result['jobs_found']} jobs from {result['source']}")
    print(f"New jobs: {result['new_jobs']}, Updated: {result['updated_jobs']}")
    print(f"Duration: {result['duration']} seconds")

if __name__ == "__main__":
    asyncio.run(custom_scrape())
```

## Troubleshooting Commands

### If Playwright Fails
```bash
# Install Playwright browsers
playwright install chromium

# On Linux, install dependencies
sudo playwright install-deps chromium
```

### If Dependencies Missing
```bash
# Reinstall requirements
pip install -r requirements.txt --force-reinstall

# Install specific missing packages
pip install playwright aiohttp beautifulsoup4
```

### Test Database Connection
```bash
python -c "from app.database import SessionLocal; db = SessionLocal(); print('Database connected successfully')"
```

## Quick Debug Mode

### Check if Scrapers Are Registered
```bash
python -c "
from app.scrapers.registry import ScraperRegistry
scrapers = ScraperRegistry.list_scrapers()
print('Registered scrapers:', scrapers)
for name in scrapers:
    scraper = ScraperRegistry.get_scraper(name)
    print(f'{name}: {scraper.base_url}')
"
```

### Test Individual Components
```bash
# Test Daywork123 scraper directly
python -c "
from app.scrapers.daywork123 import Daywork123Scraper
import asyncio

async def test():
    scraper = Daywork123Scraper()
    is_working = await scraper.test_connection()
    print(f'Daywork123 accessible: {is_working}')

asyncio.run(test())
"
```

## Production Integration

### Add to Your Scheduler
```python
# In your scheduler.py or wherever you run scheduled tasks
from app.services.scraping_service import scrape_all_sources
import asyncio

async def scheduled_job():
    """Run this every 45 minutes"""
    results = await scrape_all_sources(max_pages=3)
    for result in results:
        print(f"{result['source']}: {result['jobs_found']} jobs")

# Run manually
asyncio.run(scheduled_job())
```

### API Endpoint Example
```python
# In your FastAPI routes
from fastapi import APIRouter
from app.services.scraping_service import ScrapingService

router = APIRouter()

@router.post("/api/scrape/daywork123")
async def trigger_daywork123_scraping(pages: int = 3):
    service = ScrapingService()
    return await service.scrape_source("daywork123", max_pages=pages)
```

## One-Line Commands Summary

```bash
# Install everything
pip install -r requirements.txt && playwright install chromium

# Test all scrapers
python test_daywork123_scraper.py

# Quick Daywork123 scrape
python -c "from app.services.scraping_service import scrape_daywork123; import asyncio; print(asyncio.run(scrape_daywork123(max_pages=1)))"

# Check system health
python -c "from app.services.scraping_service import ScrapingService; import asyncio; service = ScrapingService(); print(asyncio.run(service.health_check_all()))"
</code>

debug_scrapers.py:
<code>
#!/usr/bin/env python3
"""Debug script to inspect website structure and fix scraper selectors"""
import asyncio
import logging
import sys
from pathlib import Path
from datetime import datetime

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent))

from app.scrapers.registry import ScraperRegistry

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def debug_daywork123():
    """Debug Daywork123.com structure"""
    print("üîç Debugging Daywork123.com structure...")
    
    try:
        from playwright.async_api import async_playwright
        
        async with async_playwright() as p:
            browser = await p.chromium.launch(headless=False)  # Show browser for debugging
            context = await browser.new_context()
            page = await context.new_page()
            
            # Navigate to the jobs page
            url = "https://www.daywork123.com/jobs"
            print(f"Navigating to: {url}")
            
            await page.goto(url, wait_until='networkidle', timeout=30000)
            
            # Wait a bit for content to load
            await asyncio.sleep(5)
            
            # Take a screenshot for debugging
            await page.screenshot(path="daywork123_debug.png")
            print("üì∏ Screenshot saved as: daywork123_debug.png")
            
            # Try to find job listings with different selectors
            selectors_to_try = [
                '.job-listing',
                '.job-card',
                '.job-item',
                'article',
                '[class*="job"]',
                '[class*="listing"]',
                '.card',
                '.item'
            ]
            
            for selector in selectors_to_try:
                try:
                    elements = await page.query_selector_all(selector)
                    if elements:
                        print(f"‚úÖ Found {len(elements)} elements with selector: {selector}")
                        
                        # Get some sample content
                        if len(elements) > 0:
                            sample_text = await elements[0].text_content()
                            print(f"   Sample content: {sample_text[:200]}...")
                    else:
                        print(f"‚ùå No elements found with selector: {selector}")
                except Exception as e:
                    print(f"‚ùå Error with selector {selector}: {e}")
            
            # Get page title and URL
            title = await page.title()
            current_url = page.url
            print(f"\nüìÑ Page title: {title}")
            print(f"üåê Current URL: {current_url}")
            
            # Get page HTML for manual inspection
            html = await page.content()
            with open("daywork123_debug.html", "w", encoding="utf-8") as f:
                f.write(html)
            print("üìÑ HTML saved as: daywork123_debug.html")
            
            await browser.close()
            
    except Exception as e:
        print(f"‚ùå Error debugging Daywork123: {e}")

async def debug_yotspot():
    """Debug Yotspot.com structure"""
    print("\nüîç Debugging Yotspot.com structure...")
    
    try:
        import aiohttp
        
        async with aiohttp.ClientSession() as session:
            url = "https://www.yotspot.com/jobs"
            print(f"Fetching: {url}")
            
            async with session.get(url) as response:
                print(f"Status: {response.status}")
                print(f"Headers: {dict(response.headers)}")
                
                if response.status == 200:
                    html = await response.text()
                    
                    # Save HTML for inspection
                    with open("yotspot_debug.html", "w", encoding="utf-8") as f:
                        f.write(html)
                    print("üìÑ HTML saved as: yotspot_debug.html")
                    
                    # Try to parse with BeautifulSoup
                    from bs4 import BeautifulSoup
                    soup = BeautifulSoup(html, 'html.parser')
                    
                    # Look for job-related elements
                    job_selectors = [
                        '[class*="job"]',
                        '[class*="listing"]',
                        'article',
                        '.card',
                        '.item'
                    ]
                    
                    for selector in job_selectors:
                        elements = soup.select(selector)
                        if elements:
                            print(f"‚úÖ Found {len(elements)} elements with selector: {selector}")
                            if len(elements) > 0:
                                sample_text = elements[0].get_text(strip=True)[:200]
                                print(f"   Sample content: {sample_text}...")
                        else:
                            print(f"‚ùå No elements found with selector: {selector}")
                    
                    # Get page title
                    title = soup.title.string if soup.title else "No title"
                    print(f"\nüìÑ Page title: {title}")
                    
                else:
                    print(f"‚ùå Failed to fetch page: {response.status}")
                    
    except Exception as e:
        print(f"‚ùå Error debugging Yotspot: {e}")

async def test_alternative_urls():
    """Test alternative URLs for the job sites"""
    print("\nüîç Testing alternative URLs...")
    
    # Test different possible job URLs
    daywork123_urls = [
        "https://www.daywork123.com/jobs",
        "https://www.daywork123.com/job-listings",
        "https://www.daywork123.com/careers",
        "https://www.daywork123.com/positions",
        "https://www.daywork123.com"
    ]
    
    yotspot_urls = [
        "https://www.yotspot.com/jobs",
        "https://www.yotspot.com/job-listings",
        "https://www.yotspot.com/careers",
        "https://www.yotspot.com/positions",
        "https://www.yotspot.com"
    ]
    
    try:
        import aiohttp
        
        async with aiohttp.ClientSession() as session:
            print("Testing Daywork123 URLs:")
            for url in daywork123_urls:
                try:
                    async with session.get(url, timeout=10) as response:
                        print(f"  {url}: {response.status}")
                except Exception as e:
                    print(f"  {url}: Error - {e}")
            
            print("\nTesting Yotspot URLs:")
            for url in yotspot_urls:
                try:
                    async with session.get(url, timeout=10) as response:
                        print(f"  {url}: {response.status}")
                except Exception as e:
                    print(f"  {url}: Error - {e}")
                    
    except Exception as e:
        print(f"‚ùå Error testing URLs: {e}")

async def main():
    """Main debug function"""
    print("üêõ Yacht Jobs Scraper Debug Tool")
    print("=" * 50)
    
    try:
        # Test alternative URLs first
        await test_alternative_urls()
        
        # Debug individual sites
        await debug_daywork123()
        await debug_yotspot()
        
        print("\n‚úÖ Debug complete! Check the generated files:")
        print("  - daywork123_debug.png (screenshot)")
        print("  - daywork123_debug.html (page source)")
        print("  - yotspot_debug.html (page source)")
        
    except KeyboardInterrupt:
        print("\nDebug interrupted by user")
    except Exception as e:
        print(f"Debug failed: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 
</code>

SETUP_GUIDE.md:
<code>
# üõ•Ô∏è Daywork123.com Scraper Setup Guide

This guide provides step-by-step instructions for setting up the Daywork123.com scraper in your yacht jobs platform.

## üìã Prerequisites

- Python 3.11+ (recommended)
- Conda environment (recommended) or virtualenv
- Git

## üöÄ Quick Setup

### 1. Environment Setup

```bash
# Activate your conda environment
conda activate yachtjobs

# Install new dependencies
pip install -r requirements.txt

# Install Playwright browsers (for Daywork123.com)
playwright install chromium
```

### 2. Database Migration

The new scrapers use the existing database schema. No migration needed.

### 3. Test the Installation

```bash
# Test the scraper installation
python test_daywork123_scraper.py

# Test individual scrapers
python -c "from app.services.scraping_service import scrape_daywork123; import asyncio; print(asyncio.run(scrape_daywork123(max_pages=1)))"
```

## üîß Configuration

### Environment Variables

Add these to your `.env` file:

```bash
# Scraping Configuration
SCRAPER_INTERVAL_MINUTES=45
MAX_SCRAPING_PAGES=5
MIN_REQUEST_DELAY=2.0
MAX_REQUEST_DELAY=5.0

# Anti-detection settings
PLAYWRIGHT_HEADLESS=true
PLAYWRIGHT_TIMEOUT=30000
```

### Custom Filters

You can configure custom filters for each scraper:

```python
# Example: Filter by location and job type
filters = {
    "location": "Caribbean",
    "job_type": "daywork",
    "vessel_size": "50-100m"
}
```

## üìä Usage Examples

### Basic Usage

```python
import asyncio
from app.services.scraping_service import ScrapingService

async def main():
    service = ScrapingService()
    
    # Scrape Daywork123.com
    result = await service.scrape_source("daywork123", max_pages=3)
    print(f"Found {result['jobs_found']} jobs")
    
    # Scrape all sources
    results = await service.scrape_all_sources(max_pages=2)
    for result in results:
        print(f"{result['source']}: {result['jobs_found']} jobs")

if __name__ == "__main__":
    asyncio.run(main())
```

### Advanced Usage

```python
from app.scrapers.registry import ScraperRegistry

# Get specific scraper
scraper = ScraperRegistry.get_scraper("daywork123")

# Test connection
is_working = await scraper.test_connection()

# Get supported filters
filters = scraper.get_supported_filters()
```

## üîç Monitoring and Debugging

### Health Checks

```bash
# Check all scrapers
python -c "from app.services.scraping_service import ScrapingService; import asyncio; service = ScrapingService(); print(asyncio.run(service.health_check_all()))"
```

### Log Files

Logs are written to the console by default. Configure logging in your application:

```python
import logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('scraper.log'),
        logging.StreamHandler()
    ]
)
```

## üß™ Testing

### Run All Tests

```bash
python test_daywork123_scraper.py
```

### Test Individual Components

```bash
# Test scraper registry
python -c "from app.scrapers.registry import ScraperRegistry; print(ScraperRegistry.list_scrapers())"

# Test database integration
python -c "from app.services.scraping_service import ScrapingService; import asyncio; service = ScrapingService(); print(service.get_scraper_stats())"
```

## üö® Troubleshooting

### Common Issues

#### Playwright Not Found
```bash
pip install playwright
playwright install chromium
```

#### Permission Errors
```bash
# On Linux/macOS
sudo playwright install-deps chromium

# On Windows (run as Administrator)
playwright install chromium
```

#### Connection Timeouts
- Check internet connection
- Verify target websites are accessible
- Increase timeout values in configuration

#### Database Issues
- Ensure database file exists: `yacht_jobs.db`
- Check database permissions
- Verify SQLAlchemy models are up to date

### Debug Mode

Enable debug logging:

```python
import logging
logging.getLogger('app.scrapers').setLevel(logging.DEBUG)
```

## üîÑ Integration with Existing System

### Update Scheduler

Modify your scheduler to use the new scraping service:

```python
from app.services.scraping_service import scrape_all_sources

# In your scheduler
async def scheduled_scraping():
    results = await scrape_all_sources(max_pages=3)
    # Process results...
```

### API Endpoints

Update your FastAPI endpoints:

```python
from fastapi import APIRouter
from app.services.scraping_service import ScrapingService

router = APIRouter()

@router.post("/api/scrape/daywork123")
async def scrape_daywork123_endpoint(max_pages: int = 3):
    service = ScrapingService()
    return await service.scrape_source("daywork123", max_pages)
```

## üìà Performance Optimization

### Rate Limiting

The scrapers include built-in rate limiting:
- Daywork123: 2.5s delay between pages
- Yotspot: 2.0s delay between pages
- 30s delay between different sources

### Concurrent Scraping

For production use, consider:

```python
import asyncio
from app.services.scraping_service import ScrapingService

async def concurrent_scraping():
    service = ScrapingService()
    
    # Run scrapers concurrently
    tasks = [
        service.scrape_source("daywork123", max_pages=2),
        service.scrape_source("yotspot", max_pages=2)
    ]
    
    results = await asyncio.gather(*tasks)
    return results
```

## üîí Security Considerations

### Anti-Detection Measures

The Daywork123 scraper includes:
- Randomized user agents
- Realistic browser fingerprints
- Human-like delays
- Stealth mode scripts

### Rate Limiting

Respectful scraping with:
- Configurable delays
- Page limits
- Connection pooling
- Error handling

## üìû Support

For issues or questions:
1. Check the troubleshooting section above
2. Review logs for specific error messages
3. Test with the provided test script
4. Check website accessibility manually

## üéØ Next Steps

1. Run the test script to verify installation
2. Configure your environment variables
3. Test individual scrapers
4. Integrate with your scheduler
5. Monitor logs for any issues
6. Scale up gradually

## üìù Changelog

- **v1.0.0**: Initial Daywork123.com scraper implementation
- **v1.1.0**: Added pluggable architecture with Yotspot support
- **v1.2.0**: Enhanced anti-detection measures
- **v1.3.0**: Added comprehensive testing suite
</code>

daywork123_scraper.py:
<code>
import asyncio
import time
from datetime import datetime
from playwright.async_api import async_playwright, TimeoutError
from bs4 import BeautifulSoup
import logging
import re
import pprint

# --- Configuration ---
# In a real application, this would come from a config file or environment variables
# as specified in your documents (e.g., daywork123_scraper_spec.md).
BASE_URL = "https://www.daywork123.com/jobannouncementlist.aspx"
MAX_PAGES = 1  # Limit for this demonstration, your spec allows for more.
REQUEST_DELAY = 2.5  # Respectful delay between requests as per your spec.
HEADLESS_BROWSER = True # Set to False for debugging to see the browser UI.
OUTPUT_FILE_TIMESTAMP = datetime.now().strftime("%Y%m%d_%H%M%S")
OUTPUT_FILE_NAME = f"daywork123.{OUTPUT_FILE_TIMESTAMP}.md"

# --- Logging Setup ---
# As per your spec for monitoring and observability.
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('scraper.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class Daywork123Scraper:
    """
    A production-grade scraper for Daywork123.com, built according to the
    provided architectural specifications. It uses Playwright for robust,
    anti-detection browser automation.
    """

    def __init__(self, base_url: str):
        """Initializes the scraper with the target URL."""
        self.base_url = base_url
        self.jobs = []
        # Corrected job table selector based on provided HTML
        self.job_table_selector = '#ContentPlaceHolder1_RepJobAnnouncement'
        logger.info("Daywork123Scraper initialized.")

    async def scrape_jobs(self, max_pages: int):
        """
        Main method to orchestrate the scraping process.
        It launches a browser, handles pagination, and extracts job data.
        """
        logger.info(f"Starting scrape for up to {max_pages} pages.")
        async with async_playwright() as p:
            # Launch browser with anti-detection measures as per spec
            browser = await p.chromium.launch(headless=HEADLESS_BROWSER)
            context = await browser.new_context(
                user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36',
                viewport={'width': 1920, 'height': 1080},
                locale='en-US',
                timezone_id='America/New_York',
            )
            # Add stealth script to avoid detection
            await context.add_init_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            page = await context.new_page()

            try:
                for page_num in range(1, max_pages + 1):
                    logger.info(f"Scraping page {page_num}...")
                    page_loaded_successfully = await self._navigate_to_page(page, page_num)

                    if not page_loaded_successfully:
                        logger.error(f"Failed to load page {page_num} or find job table. Stopping.")
                        break
                    
                    content = await page.content()
                    new_jobs = self._parse_jobs(content)

                    if not new_jobs:
                        logger.warning(f"No jobs found on page {page_num} while parsing. Stopping pagination.")
                        break
                    
                    self.jobs.extend(new_jobs)
                    logger.info(f"Found {len(new_jobs)} jobs on page {page_num}. Total jobs: {len(self.jobs)}.")

                    # Respectful delay
                    await asyncio.sleep(REQUEST_DELAY)

            except Exception as e:
                logger.error(f"An error occurred during scraping: {e}", exc_info=True)
            finally:
                await browser.close()
                logger.info("Browser closed. Scraping finished.")

    async def _navigate_to_page(self, page, page_num: int) -> bool:
        """
        Navigates to a specific page number on the website and waits for the
        job table to be visible. Returns True on success, False on failure.
        """
        try:
            if page_num == 1:
                # Changed wait_until to 'domcontentloaded' for initial page load
                await page.goto(self.base_url, wait_until='domcontentloaded')
            else:
                # Find the link for the next page and click it
                pagination_link_selector = f'a[href*="Page${page_num}"]'
                await page.click(pagination_link_selector)
            
            # Increased timeout for waiting for the job table selector
            await page.wait_for_selector(self.job_table_selector, timeout=30000) # 30 second timeout
            return True
        except TimeoutError:
            logger.error(f"Timeout occurred waiting for job table or pagination link on page {page_num}.")
            return False
        except Exception as e:
            logger.error(f"An unexpected error occurred during navigation to page {page_num}: {e}")
            return False


    def _parse_jobs(self, html_content: str) -> list:
        """
        Parses the HTML content of a job list page to extract job details.
        Uses BeautifulSoup for robust HTML parsing.
        """
        soup = BeautifulSoup(html_content, 'html.parser')
        job_listings = []
        
        # Find the main table containing the jobs
        job_table = soup.select_one(self.job_table_selector)
        if not job_table:
            logger.warning("Could not find job table in the parsed HTML.")
            return []

        # Find all job rows, skipping the header row
        job_rows = job_table.find_all('tr')[1:]

        for row in job_rows:
            cells = row.find_all('td')
            if len(cells) < 6:
                continue

            try:
                # Extract data based on the table structure
                job_id = cells[0].text.strip() # Extract Job ID
                job_title_link = cells[0].find('a') # The link is associated with the ID cell
                
                # The "Work Type" column contains the job description/title
                job_description_or_title = cells[3].text.strip() 
                
                # The source URL is constructed from the base URL and the link's href
                job_url = f"https://www.daywork123.com/{job_title_link['href']}" if job_title_link and job_title_link.get('href') else "N/A"
                
                # Extracting other fields, adjusted based on the new HTML structure
                company = cells[2].text.strip()
                location = cells[4].text.strip()
                job_type = "" # No explicit 'job_type' column, 'Work Type' is description
                posted_date_str = cells[1].text.strip()
                
                # A simple quality score as per the spec
                quality_score = self._calculate_quality_score(
                    title=job_description_or_title, company=company, location=location
                )

                job_listings.append({
                    'id': job_id, # Added job ID
                    'title': job_description_or_title, # Using description as title for output
                    'company': company,
                    'location': location,
                    'job_type': job_type,
                    'posted_date': posted_date_str,
                    'source_url': job_url,
                    'quality_score': quality_score
                })
            except (AttributeError, IndexError) as e:
                logger.error(f"Error parsing a job row: {e}. Row content: {row}")

        return job_listings
        
    def _calculate_quality_score(self, **kwargs) -> float:
        """
        Calculates a data quality score based on field completeness.
        This is a simplified version of the algorithm in your spec.
        """
        score = 0.0
        required_fields = ['title', 'company', 'location']
        total_weight = 1.0
        weight_per_field = total_weight / len(required_fields)
        
        for field in required_fields:
            if kwargs.get(field) and kwargs[field] != "N/A":
                score += weight_per_field
                
        return round(score, 2)

    def print_jobs(self):
        """Prints the scraped job data to the console."""
        logger.info(f"Printing {len(self.jobs)} jobs to the console.")
        print("\n" + "="*60)
        print(f"Found {len(self.jobs)} jobs on Daywork123.com")
        print("="*60 + "\n")

        if not self.jobs:
            print("No jobs found in this run.")
            return

        for i, job in enumerate(self.jobs, 1):
            pprint.pprint(job)
            print("-" * 20)

        logger.info("Finished printing jobs.")


    def save_to_markdown(self, filename: str):
        """Saves the scraped job data to a Markdown file."""
        logger.info(f"Saving {len(self.jobs)} jobs to {filename}.")
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"# Daywork123.com Job Listings\n\n")
            f.write(f"*Scraped on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*\n")
            f.write(f"*Total Jobs Found: {len(self.jobs)}*\n\n")
            f.write("---\n\n")

            if not self.jobs:
                f.write("No jobs found in this run.\n")
                return

            for job in self.jobs:
                f.write(f"## {job['title']}\n\n")
                f.write(f"- **ID:** {job['id']}\n") # Added Job ID to Markdown output
                f.write(f"- **Company:** {job['company']}\n")
                f.write(f"- **Location:** {job['location']}\n")
                f.write(f"- **Job Type:** {job['job_type']}\n")
                f.write(f"- **Posted Date:** {job['posted_date']}\n")
                f.write(f"- **Quality Score:** {job['quality_score']}\n")
                f.write(f"- **Source URL:** [{job['source_url']}]({job['source_url']})\n\n")
                f.write("---\n\n")
        logger.info("Successfully saved jobs to Markdown file.")


async def main():
    """Main function to run the scraper."""
    scraper = Daywork123Scraper(base_url=BASE_URL)
    await scraper.scrape_jobs(max_pages=MAX_PAGES)
    scraper.print_jobs()
    scraper.save_to_markdown(OUTPUT_FILE_NAME) # Uncommented this line

if __name__ == "__main__":
    # Ensure you have installed the necessary dependencies:
    # pip install playwright beautifulsoup4
    # And install the browser binaries:
    # playwright install chromium
    
    # To run the script:
    # python your_script_name.py
    
    asyncio.run(main())
</code>

run.py:
<code>
#!/usr/bin/env python3
"""
Simple run script for YotCrew.app
"""

import uvicorn
import os

if __name__ == "__main__":
    # Load environment variables
    from dotenv import load_dotenv
    load_dotenv()
    
    # Get configuration from environment
    host = os.getenv("HOST", "0.0.0.0")
    port = int(os.getenv("PORT", 8000))
    debug = os.getenv("DEBUG", "True").lower() == "true"
    
    print("üõ•Ô∏è  Starting YotCrew.app...")
    print(f"üìç Server: http://{host}:{port}")
    print(f"üîß Debug mode: {debug}")
    print("=" * 50)
    
    uvicorn.run(
        "main:app",
        host=host,
        port=port,
        reload=debug,
        log_level="info"
    ) 
</code>

RENDER_DEPLOYMENT.md:
<code>
# Deploying Yacht Jobs Monitor to Render

This guide explains how to deploy the Yacht Jobs Monitor application to Render hosting platform.

## üöÄ **Deployment Options**

### **Option 1: Blueprint Deployment (Recommended)**
Deploy all services at once using the `render.yaml` blueprint.

### **Option 2: Manual Service Creation**
Create each service individually through Render dashboard.

### **Option 3: Docker Deployment**
Deploy using Docker containers (limited support on Render).

## **Option 1: Blueprint Deployment**

### **Step 1: Prepare Your Repository**
1. Push your code to GitHub/GitLab
2. Ensure `render.yaml` is in the root directory
3. Commit all changes

### **Step 2: Create Render Account**
1. Go to [render.com](https://render.com)
2. Sign up with GitHub/GitLab
3. Connect your repository

### **Step 3: Deploy Blueprint**
1. In Render dashboard, click "New +"
2. Select "Blueprint"
3. Connect your repository
4. Render will detect `render.yaml` automatically
5. Click "Apply"

### **Step 4: Configure Environment Variables**
After deployment, set these environment variables in the backend service:

```env
FB_ACCESS_TOKEN=your_facebook_access_token
FB_GROUP_ID=your_facebook_group_id
FB_APP_SECRET=your_facebook_app_secret
FB_VERIFY_TOKEN=your_custom_verify_token
```

### **Step 5: Update Facebook Webhook**
Update your Facebook app webhook URL to:
```
https://yacht-jobs-backend.onrender.com/facebook/webhook
```

## **Option 2: Manual Service Creation**

### **Backend Service**
1. **Create Web Service**
   - Runtime: Python
   - Build Command: `pip install -r requirements.txt && python -m spacy download en_core_web_sm`
   - Start Command: `python main.py`

2. **Environment Variables**
   ```env
   DATABASE_URL=sqlite:///./yacht_jobs.db
   FB_ACCESS_TOKEN=your_token
   FB_GROUP_ID=your_group_id
   FB_APP_SECRET=your_secret
   FB_VERIFY_TOKEN=your_verify_token
   CORS_ORIGINS=https://your-frontend-url.onrender.com
   ```

### **Frontend Service**
1. **Create Web Service**
   - Runtime: Node.js
   - Root Directory: `frontend`
   - Build Command: `npm install && npm run build`
   - Start Command: `npm start`

2. **Environment Variables**
   ```env
   NEXT_PUBLIC_API_URL=https://your-backend-url.onrender.com
   NEXT_PUBLIC_WS_URL=wss://your-backend-url.onrender.com
   ```

### **Redis Service**
1. **Create Redis Service**
   - Plan: Starter (Free tier available)
   - Copy the connection string for backend configuration

## **Option 3: Docker Deployment**

‚ö†Ô∏è **Note**: Render has limited Docker support. Use native runtimes when possible.

### **Backend Docker Service**
1. **Create Web Service**
   - Runtime: Docker
   - Dockerfile path: `./Dockerfile`
   - Build context: `.`

2. **Environment Variables**
   ```env
   DATABASE_URL=sqlite:///./yacht_jobs.db
   FB_ACCESS_TOKEN=your_token
   FB_GROUP_ID=your_group_id
   FB_APP_SECRET=your_secret
   FB_VERIFY_TOKEN=your_verify_token
   ```

### **Frontend Docker Service**
1. **Create Web Service**
   - Runtime: Docker
   - Dockerfile path: `./frontend/Dockerfile`
   - Build context: `./frontend`

## **Important Considerations**

### **1. Free Tier Limitations**
- **Sleep Mode**: Free services sleep after 15 minutes of inactivity
- **Build Time**: Limited to 500 build minutes/month
- **Bandwidth**: 100GB/month
- **Storage**: Ephemeral (files don't persist between deploys)

### **2. Database Persistence**
SQLite files are ephemeral on Render. For production:

```python
# Use PostgreSQL instead
DATABASE_URL=postgresql://user:password@host:port/database
```

### **3. WebSocket Support**
Render supports WebSockets, but with limitations:
- Free tier has connection limits
- May timeout during inactivity

### **4. Facebook Webhook Requirements**
- Must use HTTPS (Render provides this)
- Webhook URL must be publicly accessible
- Must respond to verification requests

## **Production Optimizations**

### **1. Use PostgreSQL**
```python
# In main.py, update database URL
SQLALCHEMY_DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///./yacht_jobs.db")

# Add PostgreSQL dependency
pip install psycopg2-binary
```

### **2. Environment-Specific Configuration**
```python
# In main.py
ENVIRONMENT = os.getenv("ENVIRONMENT", "development")
DEBUG = ENVIRONMENT == "development"
```

### **3. Persistent Storage**
For file uploads or persistent data:
```python
# Use external storage (AWS S3, Cloudinary, etc.)
import cloudinary
```

## **Monitoring & Debugging**

### **1. View Logs**
```bash
# In Render dashboard
Services > Your Service > Logs
```

### **2. Health Checks**
Both services have health check endpoints:
- Backend: `https://your-backend.onrender.com/health`
- Frontend: `https://your-frontend.onrender.com/`

### **3. Performance Monitoring**
```python
# Add performance monitoring
import sentry_sdk
sentry_sdk.init(dsn="your-sentry-dsn")
```

## **Cost Estimation**

### **Free Tier**
- Backend: Free (with sleep mode)
- Frontend: Free (with sleep mode)
- Redis: Free starter plan
- **Total**: $0/month

### **Paid Tier**
- Backend: $7/month (no sleep mode)
- Frontend: $7/month (no sleep mode)
- Redis: $7/month (persistent)
- **Total**: $21/month

## **Deployment Checklist**

- [ ] Repository connected to Render
- [ ] `render.yaml` configured
- [ ] Environment variables set
- [ ] Facebook webhook URL updated
- [ ] Services deployed successfully
- [ ] Health checks passing
- [ ] WebSocket connection working
- [ ] Job detection functioning
- [ ] Notifications working

## **Troubleshooting**

### **Common Issues**

1. **Build Failures**
   ```bash
   # Check Python version
   python --version
   
   # Ensure all dependencies in requirements.txt
   pip freeze > requirements.txt
   ```

2. **spaCy Model Download Fails**
   ```bash
   # Add to build command
   python -m spacy download en_core_web_sm --quiet
   ```

3. **WebSocket Connection Issues**
   ```javascript
   // Use wss:// for HTTPS sites
   const ws = new WebSocket('wss://your-backend.onrender.com/ws/all');
   ```

4. **CORS Errors**
   ```python
   # Update CORS origins
   CORS_ORIGINS=https://your-frontend.onrender.com
   ```

5. **Database Connection Issues**
   ```python
   # For PostgreSQL
   pip install psycopg2-binary
   ```

## **Next Steps**

1. **Custom Domain**: Add custom domain in Render dashboard
2. **SSL Certificate**: Automatic with custom domains
3. **Monitoring**: Set up error tracking and performance monitoring
4. **Scaling**: Upgrade to paid plans for better performance
5. **CI/CD**: Set up automatic deployments on code changes

## **Support**

- [Render Documentation](https://render.com/docs)
- [Render Community](https://community.render.com)
- [GitHub Issues](https://github.com/your-repo/issues)

Your Yacht Jobs Monitor will be live at:
- **Frontend**: `https://yacht-jobs-frontend.onrender.com`
- **Backend**: `https://yacht-jobs-backend.onrender.com`
- **API Docs**: `https://yacht-jobs-backend.onrender.com/docs` 
</code>

README.md:
<code>
# üõ•Ô∏è YotCrew.app

A modern, interactive yacht job platform built with **FastAPI**, **Alpine.js**, **HTMX**, **Tailwind CSS**, and **DaisyUI**. Automatically scrapes and displays yacht crew positions from top industry platforms with enhanced user interactivity.

![FastAPI](https://img.shields.io/badge/FastAPI-009688?style=for-the-badge&logo=FastAPI&logoColor=white)
![Alpine.js](https://img.shields.io/badge/Alpine.js-8BC34A?style=for-the-badge&logo=Alpine.js&logoColor=white)
![HTMX](https://img.shields.io/badge/HTMX-334155?style=for-the-badge&logo=html5&logoColor=white)
![Tailwind CSS](https://img.shields.io/badge/Tailwind_CSS-06B6D4?style=for-the-badge&logo=tailwind-css&logoColor=white)

## ‚ú® Features

### üöÄ Interactive Frontend
- **üéØ Alpine.js Integration**: Reactive components for job cards, filters, and search
- **üì± Expandable Job Cards**: Click to expand descriptions with smooth animations
- **‚≠ê Save/Bookmark System**: Mark favorite jobs for later review
- **‚òëÔ∏è Multi-select Comparison**: Select multiple jobs to compare side-by-side
- **üîç Real-time Filtering**: Instant search and filter without page reloads
- **üè∑Ô∏è Quick Filter Tags**: One-click filtering by department and vessel type
- **üìä Dynamic Sorting**: Sort by title, salary, or posting date

### üîß Backend Capabilities
- **üîÑ Automated Scraping**: Scrapes yacht jobs from Yotspot every 45 minutes
- **‚ö° HTMX-Powered**: Seamless partial page updates
- **üé® Modern Themes**: Beautiful DaisyUI themes (currently: Cupcake)
- **üõ•Ô∏è Yacht-Specific Categories**: Deck, Interior, Engineering, and Galley positions
- **üì± Mobile Responsive**: Perfect experience across all devices
- **üåà Theme Switching**: Easy theme customization

## üöÄ Quick Start

### Prerequisites

- **Python 3.11+**
- **Conda** (recommended) or pip

### Installation

1. **Clone the repository**
   ```bash
   git clone https://github.com/evgenii-codesmith/yotcrew.app.git
   cd yotcrew.app
   ```

2. **Set up environment**
   ```bash
   # Using Conda (recommended)
   conda create -n yachtjobs python=3.11
   conda activate yachtjobs
   
   # Install dependencies
   pip install -r requirements.txt
   ```

3. **Create sample data** (optional but recommended)
   ```bash
   python create_sample_data.py
   ```

4. **Start the application**
   ```bash
   python run.py
   ```

5. **Open your browser**
   ```
   http://localhost:8000
   ```

## üìÅ Project Structure

```
yotcrew.app/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ database.py          # Database configuration
‚îÇ   ‚îú‚îÄ‚îÄ models.py            # SQLAlchemy models (Job, ScrapingJob)
‚îÇ   ‚îú‚îÄ‚îÄ scraper.py           # Yotspot scraper
‚îÇ   ‚îî‚îÄ‚îÄ scheduler.py         # Background job scheduler
‚îú‚îÄ‚îÄ templates/
‚îÇ   ‚îú‚îÄ‚îÄ base.html           # Base template with Alpine.js/HTMX/Tailwind
‚îÇ   ‚îú‚îÄ‚îÄ dashboard.html      # Simple dashboard overview
‚îÇ   ‚îú‚îÄ‚îÄ jobs.html           # Main interactive jobs page
‚îÇ   ‚îî‚îÄ‚îÄ partials/           # HTMX partial templates
‚îÇ       ‚îú‚îÄ‚îÄ jobs_table.html # Interactive job cards with Alpine.js
‚îÇ       ‚îú‚îÄ‚îÄ job_card.html   # Individual job card
‚îÇ       ‚îî‚îÄ‚îÄ dashboard_stats.html
‚îú‚îÄ‚îÄ static/                 # Static assets
‚îÇ   ‚îú‚îÄ‚îÄ logo.png           # YotCrew.app logo
‚îÇ   ‚îú‚îÄ‚îÄ favicon.svg        # Site favicon
‚îÇ   ‚îî‚îÄ‚îÄ favicon.ico        # Alternative favicon
‚îú‚îÄ‚îÄ DesignSpecs/           # Project documentation
‚îú‚îÄ‚îÄ main.py                # FastAPI application
‚îú‚îÄ‚îÄ requirements.txt       # Python dependencies
‚îú‚îÄ‚îÄ run.py                # Application runner
‚îî‚îÄ‚îÄ yacht_jobs.db         # SQLite database
```

## üõ†Ô∏è Technology Stack

### Backend
- **FastAPI**: Modern Python web framework with async support
- **SQLAlchemy**: Database ORM with relationship management
- **SQLite**: Lightweight database (production-ready for small to medium loads)
- **APScheduler**: Background job scheduling for automated scraping
- **Beautiful Soup**: Web scraping and HTML parsing
- **Requests**: HTTP client with session management

### Frontend
- **Alpine.js**: Lightweight reactive framework for interactivity
- **HTMX**: Dynamic HTML updates without full page reloads
- **Tailwind CSS**: Utility-first CSS framework
- **DaisyUI**: Beautiful component library with theme support
- **Jinja2**: Server-side template engine

### Interactive Features (Alpine.js)
- **Job Cards**: Expandable descriptions, save/bookmark functionality
- **Multi-select**: Compare multiple jobs with floating panel
- **Real-time Filters**: Search, department, vessel type, location
- **Dynamic Sorting**: Client-side sorting with server validation
- **Quick Actions**: Copy job links, share functionality
- **Filter Status**: Visual feedback on active filters with clear options

## üéØ Pages & Routes

### Main Routes
- **`/`** - Interactive jobs page (Alpine.js powered)
- **`/dashboard`** - Simple dashboard overview
- **`/health`** - Health check endpoint

### API Endpoints
- **`GET /api/jobs`** - Get jobs with filtering and sorting
- **`POST /api/scrape`** - Trigger manual scraping
- **`GET /api/scrape/status`** - Get scraping status

### HTMX Endpoints
- **`GET /htmx/jobs-table`** - Jobs table with interactive cards
- **`GET /htmx/dashboard-stats`** - Dashboard statistics

## üé® Current Theme: Cupcake

YotCrew.app uses the **Cupcake** DaisyUI theme featuring:
- Soft pastel colors (pinks and creams)
- Light, friendly background
- Professional yet approachable design
- Excellent readability and contrast

### Theme Customization
Easily change themes by modifying `templates/base.html`:
```html
<html lang="en" data-theme="cupcake">
```

Available themes: `cupcake`, `nord`, `abyss`, `coffee`, `dark`, `light`, and more.

## üîß Configuration

### Environment Variables

Copy `env.example` to `.env` and configure:

```env
# Database
DATABASE_URL=sqlite:///./yacht_jobs.db

# Application
HOST=0.0.0.0
PORT=8000
DEBUG=True

# Scraping
SCRAPER_INTERVAL_MINUTES=45
MAX_SCRAPING_PAGES=5
MIN_REQUEST_DELAY=2.0
MAX_REQUEST_DELAY=5.0
```

## üîç Job Categories & Filtering

### Department Categories
- **‚öì Deck**: Captain, First Mate, Bosun, Deckhand, Navigation
- **üè† Interior**: Chief Stewardess, Stewardess, Butler, Housekeeping
- **üîß Engineering**: Chief Engineer, Engineer, ETO, Mechanical
- **üë®‚Äçüç≥ Galley**: Head Chef, Sous Chef, Cook, Galley Assistant

### Vessel Types
- Motor Yacht
- Sailing Yacht
- Explorer Yacht
- Catamaran
- Superyacht
- Expedition Vessel

### Advanced Filtering
- **Real-time Search**: Instant results as you type
- **Location Filtering**: By region, country, or city
- **Salary Range**: Filter by compensation levels
- **Job Type**: Permanent, Temporary, Rotational
- **Experience Level**: Entry, Junior, Senior, Executive

## üéÆ Interactive Features

### Alpine.js Components

#### Job Cards (`jobFilters` component)
```javascript
// Real-time filtering and search
x-data="jobFilters()"
x-model="filters.search"
@change="applyFilters()"
```

#### Expandable Content
```javascript
// Expandable job descriptions
x-data="{ expanded: false }"
x-show="expanded"
x-transition
```

#### Save/Bookmark System
```javascript
// Job bookmarking
x-data="{ saved: false }"
@click="toggleSave(jobId)"
```

#### Multi-select Comparison
```javascript
// Compare multiple jobs
x-model="selectedJobs"
x-show="selectedJobs.length > 0"
```

## üîÑ Scraping Details

### Source
- **Primary**: [Yotspot.com](https://www.yotspot.com/job-search.html)
- **Categories**: All yacht crew positions
- **Update Frequency**: Every 45 minutes
- **Data Extracted**: Title, company, location, salary, description, vessel type

### Ethical Scraping
- ‚úÖ **Rate Limited**: 2-5 second delays between requests
- ‚úÖ **Respectful**: Maximum 5 pages per session
- ‚úÖ **User-Agent**: Proper browser identification
- ‚úÖ **Public Data**: Only publicly available job listings
- ‚úÖ **Error Handling**: Graceful failure management

## üê≥ Docker Deployment

### Using Docker Compose

```yaml
version: '3.8'
services:
  yotcrew:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DEBUG=False
      - HOST=0.0.0.0
    volumes:
      - ./yacht_jobs.db:/app/yacht_jobs.db
```

### Build and Run
```bash
docker build -t yotcrew-app .
docker run -p 8000:8000 yotcrew-app
```

## üß™ Testing & Development

### Test Scraper
```bash
python test_scraper.py
```

### Create Sample Data
```bash
python create_sample_data.py
```

### Development Mode
```bash
# With auto-reload
python run.py
# OR
uvicorn main:app --reload
```

## üöÄ Production Deployment

### Render.com (Recommended)
The project includes `render.yaml` for easy deployment to Render:

1. Connect your GitHub repository
2. Render will automatically detect the configuration
3. Environment variables are pre-configured
4. Automatic deployments on git push

### Manual Production Setup
1. Set `DEBUG=False`
2. Configure production database (PostgreSQL recommended)
3. Set up proper secrets management
4. Configure reverse proxy (nginx)
5. Enable HTTPS

## ü§ù Contributing

1. **Fork** the repository
2. **Create** a feature branch (`git checkout -b feature/amazing-feature`)
3. **Commit** your changes (`git commit -m 'Add amazing feature'`)
4. **Push** to the branch (`git push origin feature/amazing-feature`)
5. **Open** a Pull Request

## üìÑ License

This project is licensed under the MIT License - see the LICENSE file for details.

## üôè Acknowledgments

- **[Yotspot](https://www.yotspot.com)** - Primary source for yacht job listings
- **[FastAPI](https://fastapi.tiangolo.com/)** - Modern Python web framework
- **[Alpine.js](https://alpinejs.dev/)** - Lightweight reactive framework
- **[HTMX](https://htmx.org/)** - Modern web interactions
- **[Tailwind CSS](https://tailwindcss.com/)** - Utility-first styling
- **[DaisyUI](https://daisyui.com/)** - Beautiful component library

---

**Made with ‚ù§Ô∏è for yacht crew professionals worldwide** üõ•Ô∏è

**Repository**: [https://github.com/evgenii-codesmith/yotcrew.app](https://github.com/evgenii-codesmith/yotcrew.app) 
</code>

test_real_scraping.py:
<code>
#!/usr/bin/env python3
"""Test real scraping with updated URLs and selectors"""
import asyncio
import logging
import sys
from pathlib import Path
from datetime import datetime

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent))

from app.scrapers.registry import ScraperRegistry
from app.services.scraping_service import ScrapingService

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_real_scraping():
    """Test real scraping with updated URLs"""
    print("üîç Testing real scraping with updated URLs...")
    
    service = ScrapingService()
    
    # Test each scraper individually
    for scraper_name in ScraperRegistry.list_scrapers():
        print(f"\nüìã Testing {scraper_name.value} scraper...")
        try:
            # Test with max_pages=1 to avoid overwhelming the sites
            result = await service.scrape_source(scraper_name, max_pages=1)
            print(f"‚úÖ {scraper_name.value}: Found {result['jobs_found']} jobs")
            print(f"   New jobs: {result['new_jobs']}, Updated: {result['updated_jobs']}")
            
            if result['errors']:
                print(f"   Errors: {result['errors']}")
                
        except Exception as e:
            print(f"‚ùå {scraper_name.value}: Error - {e}")
    
    print("\nüéØ Testing complete!")

if __name__ == "__main__":
    asyncio.run(test_real_scraping()) 
</code>

main.py:
<code>
from fastapi import FastAPI, Request, Depends, HTTPException, BackgroundTasks
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session
from datetime import datetime, timedelta
import uvicorn
import os
from contextlib import asynccontextmanager

from app.database import engine, get_db, Base
from app.models import Job, ScrapingJob
from app.scraper import YotspotScraper
from app.scheduler import start_scheduler, stop_scheduler

# Create tables
Base.metadata.create_all(bind=engine)

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    start_scheduler()
    yield
    # Shutdown
    stop_scheduler()

app = FastAPI(
    title="YotCrew.app",
    description="Real-time yacht job monitoring with HTMX and Tailwind CSS",
    version="1.0.0",
    lifespan=lifespan
)

# Mount static files
os.makedirs("static", exist_ok=True)
app.mount("/static", StaticFiles(directory="static"), name="static")

# Templates
templates = Jinja2Templates(directory="templates")

# Initialize scrapers
scraper = YotspotScraper()

@app.get("/", response_class=HTMLResponse)
async def main_page(request: Request):
    """Main interactive jobs page with Alpine.js features"""
    return templates.TemplateResponse("jobs.html", {"request": request})

@app.get("/dashboard", response_class=HTMLResponse)
async def simple_dashboard(request: Request, db: Session = Depends(get_db)):
    """Simple dashboard page (legacy)"""
    # Get recent jobs
    recent_jobs = db.query(Job).order_by(Job.posted_at.desc()).limit(10).all()
    
    # Get stats
    total_jobs = db.query(Job).count()
    today_jobs = db.query(Job).filter(
        Job.created_at >= datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    ).count()
    
    return templates.TemplateResponse("dashboard.html", {
        "request": request,
        "recent_jobs": recent_jobs,
        "total_jobs": total_jobs,
        "today_jobs": today_jobs
    })

@app.get("/api/jobs")
async def get_jobs(
    page: int = 1,
    limit: int = 20,
    job_type: str = None,
    location: str = None,
    vessel_size: str = None,
    vessel_type: str = None,
    department: str = None,
    search: str = None,
    db: Session = Depends(get_db)
):
    """Get jobs with filtering and pagination"""
    query = db.query(Job)
    
    # Apply filters
    if job_type:
        query = query.filter(Job.job_type.ilike(f"%{job_type}%"))
    if location:
        query = query.filter(Job.location.ilike(f"%{location}%"))
    if vessel_size:
        query = query.filter(Job.vessel_size.ilike(f"%{vessel_size}%"))
    if vessel_type:
        query = query.filter(Job.vessel_type.ilike(f"%{vessel_type}%"))
    if department:
        query = query.filter(Job.department.ilike(f"%{department}%"))
    if search:
        query = query.filter(
            Job.title.ilike(f"%{search}%") | 
            Job.description.ilike(f"%{search}%")
        )
    
    # Pagination
    offset = (page - 1) * limit
    jobs = query.order_by(Job.posted_at.desc()).offset(offset).limit(limit).all()
    total = query.count()
    
    return {
        "jobs": [job.to_dict() for job in jobs],
        "total": total,
        "page": page,
        "pages": (total + limit - 1) // limit
    }

@app.get("/api/jobs/{job_id}")
async def get_job(job_id: str, db: Session = Depends(get_db)):
    """Get job details"""
    job = db.query(Job).filter(Job.id == job_id).first()
    if not job:
        raise HTTPException(status_code=404, detail="Job not found")
    return job.to_dict()

@app.get("/htmx/jobs-table")
async def htmx_jobs_table(
    request: Request,
    page: int = 1,
    limit: int = 20,
    job_type: str = None,
    location: str = None,
    vessel_size: str = None,
    vessel_type: str = None,  # Motor Yacht, Sailing Yacht
    department: str = None,   # Deck, Interior, Engineering, Galley
    search: str = None,
    sort: str = None,  # "posted_at", "title", "salary"
    source: str = "all",  # "all", "yotspot", "facebook"
    db: Session = Depends(get_db)
):
    """HTMX endpoint for jobs table - supports both Yotspot and Facebook jobs"""
    
    # Get regular Yotspot jobs
    yotspot_jobs_data = await get_jobs(page, limit, job_type, location, vessel_size, vessel_type, department, search, db)
    all_jobs = list(yotspot_jobs_data["jobs"])
    
    # Add Facebook jobs if requested
    if source in ["all", "facebook"]:
        try:
            fb_service = FacebookJobService(db, fb_config)
            fb_jobs = fb_service.get_recent_facebook_jobs(limit=limit)
            
            # Convert Facebook jobs to match regular job format
            for fb_job in fb_jobs:
                # Apply filters
                if search and search.lower() not in (fb_job.title or "").lower():
                    continue
                if location and location.lower() not in (fb_job.location or "").lower():
                    continue
                if job_type and job_type.lower() not in (fb_job.job_type or "").lower():
                    continue
                
                # Convert to dict format
                job_dict = {
                    'id': f"fb_{fb_job.id}",
                    'title': fb_job.title,
                    'company': fb_job.company,
                    'location': fb_job.location,
                    'department': fb_job.department,
                    'job_type': fb_job.job_type,
                    'salary': fb_job.salary,
                    'description': fb_job.description,
                    'posted_at': fb_job.posted_at,
                    'source': fb_job.group_name or 'Facebook',
                    'url': fb_job.post_url,
                    'source_type': 'facebook'
                }
                all_jobs.append(job_dict)
        except Exception as e:
            # If Facebook jobs fail, continue with just Yotspot jobs
            pass
    
    # Filter by source if specified
    if source == "yotspot":
        all_jobs = [job for job in all_jobs if job.get('source_type') != 'facebook']
    elif source == "facebook":
        all_jobs = [job for job in all_jobs if job.get('source_type') == 'facebook']
    
    # Dynamic sorting based on sort parameter
    def get_sort_key(job, sort_field):
        if sort_field == "title":
            return (job.get('title') or '').lower()
        elif sort_field == "salary":
            # Extract numeric value from salary string for sorting
            salary = job.get('salary') or ''
            import re
            numbers = re.findall(r'[\d,]+', str(salary))
            if numbers:
                try:
                    return int(numbers[0].replace(',', ''))
                except:
                    return 0
            return 0
        else:  # Default to posted_at
            posted_at = job.get('posted_at')
            if posted_at is None:
                return datetime.min
            if isinstance(posted_at, str):
                try:
                    return datetime.fromisoformat(posted_at.replace('Z', '+00:00'))
                except:
                    return datetime.min
            if isinstance(posted_at, datetime):
                return posted_at
            return datetime.min
    
    # Apply sorting
    if sort:
        reverse_sort = sort in ["posted_at", "salary"]  # Date and salary sort descending by default
        all_jobs.sort(key=lambda job: get_sort_key(job, sort), reverse=reverse_sort)
    else:
        # Default sort by posted date, newest first
        all_jobs.sort(key=lambda job: get_sort_key(job, "posted_at"), reverse=True)
    
    # Limit results
    all_jobs = all_jobs[:limit]
    
    # Calculate pagination (simplified for combined results)
    total = len(all_jobs)
    pages = (total + limit - 1) // limit if total > 0 else 1
    
    return templates.TemplateResponse("partials/jobs_table.html", {
        "request": request,
        "jobs": all_jobs,
        "total": total,
        "page": page,
        "pages": pages
    })

@app.get("/htmx/job-card/{job_id}")
async def htmx_job_card(request: Request, job_id: str, db: Session = Depends(get_db)):
    """HTMX endpoint for job card details"""
    job = db.query(Job).filter(Job.id == job_id).first()
    if not job:
        raise HTTPException(status_code=404, detail="Job not found")
    
    return templates.TemplateResponse("partials/job_card.html", {
        "request": request,
        "job": job
    })

@app.get("/htmx/dashboard-stats")
async def htmx_dashboard_stats(request: Request, db: Session = Depends(get_db)):
    """HTMX endpoint for dashboard statistics"""
    total_jobs = db.query(Job).count()
    today_jobs = db.query(Job).filter(
        Job.created_at >= datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    ).count()
    week_jobs = db.query(Job).filter(
        Job.created_at >= datetime.now() - timedelta(days=7)
    ).count()
    
    # Get latest scraping status
    latest_scrape = db.query(ScrapingJob).order_by(ScrapingJob.started_at.desc()).first()
    
    return templates.TemplateResponse("partials/dashboard_stats.html", {
        "request": request,
        "total_jobs": total_jobs,
        "today_jobs": today_jobs,
        "week_jobs": week_jobs,
        "latest_scrape": latest_scrape
    })

@app.post("/api/scrape")
async def trigger_scrape(background_tasks: BackgroundTasks, db: Session = Depends(get_db)):
    """Manually trigger job scraping"""
    # Create scraping job record
    scraping_job = ScrapingJob(
        status="started",
        started_at=datetime.now()
    )
    db.add(scraping_job)
    db.commit()
    
    # Add background task
    background_tasks.add_task(run_scrape_task, scraping_job.id)
    
    return {"message": "Scraping started", "job_id": scraping_job.id}

async def run_scrape_task(scraping_job_id: int):
    """Background task for scraping"""
    db = next(get_db())
    try:
        scraping_job = db.query(ScrapingJob).filter(ScrapingJob.id == scraping_job_id).first()
        
        # Run scraper
        jobs_found = await scraper.scrape_jobs()
        
        # Save jobs to database
        new_jobs = 0
        for job_data in jobs_found:
            existing_job = db.query(Job).filter(Job.external_id == job_data["external_id"]).first()
            if not existing_job:
                job = Job(**job_data)
                db.add(job)
                new_jobs += 1
        
        db.commit()
        
        # Update scraping job
        scraping_job.status = "completed"
        scraping_job.completed_at = datetime.now()
        scraping_job.jobs_found = len(jobs_found)
        scraping_job.new_jobs = new_jobs
        db.commit()
        
    except Exception as e:
        # Update scraping job with error
        scraping_job = db.query(ScrapingJob).filter(ScrapingJob.id == scraping_job_id).first()
        scraping_job.status = "failed"
        scraping_job.completed_at = datetime.now()
        scraping_job.error_message = str(e)
        db.commit()
    finally:
        db.close()

@app.get("/api/scrape/status")
async def scrape_status(db: Session = Depends(get_db)):
    """Get latest scraping status"""
    latest_scrape = db.query(ScrapingJob).order_by(ScrapingJob.started_at.desc()).first()
    if not latest_scrape:
        return {"status": "no_jobs"}
    
    return {
        "status": latest_scrape.status,
        "started_at": latest_scrape.started_at.isoformat(),
        "completed_at": latest_scrape.completed_at.isoformat() if latest_scrape.completed_at else None,
        "jobs_found": latest_scrape.jobs_found,
        "new_jobs": latest_scrape.new_jobs,
        "error_message": latest_scrape.error_message
    }

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "1.0.0"
    }

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=int(os.getenv("PORT", 8000)),
        reload=True
    ) 
</code>

yotspot_scraper.py:
<code>
import asyncio
from datetime import datetime, timedelta
import logging
import re
import pprint
from playwright.async_api import async_playwright, TimeoutError

# --- Configuration ---
BASE_URL = "https://www.yotspot.com"
JOB_SEARCH_URL = f"{BASE_URL}/job-search.html"
MAX_PAGES = 5  # Reduced to focus on recent jobs
MAX_JOB_AGE_DAYS = 3  # Only jobs from last 3 days
REQUEST_DELAY = 1.0 
HEADLESS_BROWSER = True # Set to False to watch the scraper work
OUTPUT_FILE_TIMESTAMP = datetime.now().strftime("%Y%m%d_%H%M%S")
OUTPUT_FILE_NAME = f"yotspot_recent_3days.{OUTPUT_FILE_TIMESTAMP}.md"

# --- Logging Setup ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('scraper.log', mode='a'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class YotspotScraper:
    """
    A robust, production-grade scraper for Yotspot.com, architected to use
    Playwright for the entire process to handle anti-scraping measures.
    This version uses a resilient, multi-selector strategy to handle
    inconsistent page layouts.
    """

    def __init__(self, base_url: str):
        self.base_url = base_url
        self.jobs = []
        self.job_card_selector = "div.job-item--list"
        # --- ARCHITECT'S NOTE: This is the key architectural change. ---
        # Each field now has a LIST of possible selectors to try.
        self.job_detail_selectors = {
            "title": [
                "div.job-profile-v2__title h1", 
                "div.hgroup--job h1",
                "h1.job-title",
                "h1",
                ".job-profile h1",
                "div.job-header h1"
            ],
            "company": [
                "div.job-profile-v2__company a", 
                "li.company a",
                ".company-name",
                ".employer",
                "div.company a"
            ],
            "location": [
                "div.job-profile-v2__summary-item--location span", 
                "aside.job-profile__sidebar li.location span",
                ".location",
                ".job-location",
                "div.location",
                "span.location"
            ],
            "description": [
                "div.job-profile-v2__description", 
                "div.job-profile__description",
                ".job-description",
                ".description",
                "div.description",
                "article.job-content"
            ],
            "salary": [
                "div.job-profile-v2__summary-item--salary", 
                "aside.job-profile__sidebar li.salary",
                ".salary",
                ".compensation",
                "div.salary"
            ]
        }
        logger.info("YotspotScraper (Playwright Edition) initialized with resilient selectors.")

    def _normalize_date(self, date_str: str) -> datetime:
        if not date_str: return datetime.now() - timedelta(days=999)
        date_str = date_str.lower().replace('posted ', '').strip()
        if "today" in date_str or "hour" in date_str: return datetime.now()
        if "yesterday" in date_str: return datetime.now() - timedelta(days=1)
        match = re.search(r'(\d+)\s+days?', date_str)
        if match: return datetime.now() - timedelta(days=int(match.group(1)))
        try:
            cleaned_date_str = re.sub(r'(\d+)(st|nd|rd|th)', r'\1', date_str)
            return datetime.strptime(cleaned_date_str, '%d %b %Y')
        except ValueError:
            logger.debug(f"Could not parse date: '{date_str}'")
            return datetime.now() - timedelta(days=999)

    def _clean_description(self, description: str) -> str:
        """Remove unwanted navigation elements from job description"""
        if not description or description == "N/A":
            return description
        
        # List of unwanted navigation elements to remove
        unwanted_elements = [
            "Login to Apply",
            "Overview",
            "Summary", 
            "Language & Visas",
            "Qualifications",
            "Location",
            "Search",
            "About",
            "More from",
            "View all",
            "Click to show map",
            "HOMEPORT",
            "DESTINATION", 
            "CURRENT LOCATION"
        ]
        
        # Remove each unwanted element
        cleaned_description = description
        for element in unwanted_elements:
            # Use regex to remove the element and any surrounding whitespace
            pattern = rf'\s*{re.escape(element)}\s*'
            cleaned_description = re.sub(pattern, '\n', cleaned_description, flags=re.IGNORECASE)
        
        # Clean up multiple newlines and extra whitespace
        cleaned_description = re.sub(r'\n\s*\n', '\n\n', cleaned_description)
        cleaned_description = re.sub(r'^\s+|\s+$', '', cleaned_description, flags=re.MULTILINE)
        
        return cleaned_description.strip()

    async def scrape_jobs(self, max_pages: int):
        logger.info("Starting Playwright-based scrape.")
        async with async_playwright() as p:
            browser = await p.chromium.launch(headless=HEADLESS_BROWSER)
            context = await browser.new_context(
                user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                viewport={'width': 1920, 'height': 1080}
            )
            page = await context.new_page()
            
            urls_to_scrape = []
            keep_paginating = True

            # Phase 1: Discover all recent job URLs
            for page_num in range(1, max_pages + 1):
                if not keep_paginating: break
                page_url = f"{JOB_SEARCH_URL}?p={page_num}"
                logger.info(f"Discovering jobs on page {page_num}: {page_url}")
                try:
                    await page.goto(page_url, wait_until='domcontentloaded', timeout=30000)
                    
                    # Wait for any job-related content to load
                    await page.wait_for_load_state('networkidle', timeout=15000)
                    
                    # Try multiple selectors for job cards
                    job_cards = []
                    selectors_to_try = [
                        "div.job-item--list",
                        ".job-item",
                        ".job-listing",
                        "div[class*='job']",
                        "article.job"
                    ]
                    
                    for selector in selectors_to_try:
                        try:
                            await page.wait_for_selector(selector, timeout=5000)
                            job_cards = await page.locator(selector).all()
                            if job_cards:
                                logger.info(f"Found {len(job_cards)} job cards using selector: {selector}")
                                break
                        except:
                            continue
                    
                    if not job_cards:
                        logger.warning(f"No job cards found on page {page_num}")
                        break
                    
                    for card in job_cards:
                        try:
                            # Try to get date from various locations
                            date_str = ""
                            date_selectors = [
                                "ul.job-item__info li:last-child",
                                ".job-date",
                                ".posted-date",
                                "span.date"
                            ]
                            
                            for date_selector in date_selectors:
                                try:
                                    date_locator = card.locator(date_selector).first
                                    if await date_locator.count() > 0:
                                        date_str = await date_locator.inner_text()
                                        break
                                except:
                                    continue
                            
                            job_date = self._normalize_date(date_str)
                            days_old = (datetime.now() - job_date).days
                            if days_old > MAX_JOB_AGE_DAYS:
                                logger.info(f"Stopping pagination - found job {days_old} days old (older than {MAX_JOB_AGE_DAYS} days)")
                                keep_paginating = False
                                continue
                            
                            # Try to get job link from various locations
                            link_selectors = [
                                "div.job-item__position a",
                                ".job-title a",
                                "h3 a",
                                "a[href*='job-profile']",
                                "a"
                            ]
                            
                            relative_url = None
                            for link_selector in link_selectors:
                                try:
                                    link_locator = card.locator(link_selector).first
                                    if await link_locator.count() > 0:
                                        relative_url = await link_locator.get_attribute('href')
                                        if relative_url and 'job-profile' in relative_url:
                                            break
                                except:
                                    continue
                            
                            if relative_url:
                                if not relative_url.startswith('http'):
                                    relative_url = f"{self.base_url}{relative_url}"
                                urls_to_scrape.append(relative_url)
                                
                        except Exception as e:
                            logger.debug(f"Error processing job card: {e}")
                            continue
                            
                except Exception as e:
                    logger.error(f"Error during job discovery on page {page_num}: {e}")
                    break
                await asyncio.sleep(REQUEST_DELAY)

            logger.info(f"Discovery complete. Found {len(urls_to_scrape)} recent job URLs to scrape.")

            # Phase 2: Scrape details for each discovered URL
            for url in urls_to_scrape:
                try:
                    logger.info(f"Scraping detail from: {url}")
                    await page.goto(url, wait_until='domcontentloaded', timeout=30000)
                    await page.wait_for_load_state('networkidle', timeout=15000)
                    
                    # Wait for any content to load
                    await page.wait_for_selector('body', timeout=10000)

                    job_details = {"source_url": url}
                    
                    # Try to extract job details with multiple fallback strategies
                    for key, selector_list in self.job_detail_selectors.items():
                        text_content = "N/A"
                        
                        # Try each selector in the list
                        for selector in selector_list:
                            try:
                                element = page.locator(selector).first
                                if await element.count() > 0:
                                    text_content = (await element.inner_text()).strip()
                                    if text_content:
                                        break
                            except:
                                continue
                        
                        # If no selector worked, try a more generic approach
                        if text_content == "N/A":
                            if key == "title":
                                # Try to find any h1 tag
                                try:
                                    h1_element = page.locator("h1").first
                                    if await h1_element.count() > 0:
                                        text_content = (await h1_element.inner_text()).strip()
                                except:
                                    pass
                            elif key == "description":
                                # Try to find any content area
                                try:
                                    content_selectors = [
                                        "main",
                                        "article",
                                        ".content",
                                        ".main-content",
                                        "div[class*='content']"
                                    ]
                                    for content_selector in content_selectors:
                                        try:
                                            content_element = page.locator(content_selector).first
                                            if await content_element.count() > 0:
                                                text_content = (await content_element.inner_text()).strip()
                                                if len(text_content) > 50:  # Ensure it's substantial content
                                                    break
                                        except:
                                            continue
                                except:
                                    pass
                        
                        job_details[key] = text_content
                    
                    # Clean up the description by removing unwanted navigation elements
                    if job_details.get('description'):
                        job_details['description'] = self._clean_description(job_details['description'])
                    
                    # Extract job ID from URL
                    id_match = re.search(r'/job-profile/(\d+)\.html', url)
                    job_details['id'] = id_match.group(1) if id_match else "N/A"
                    
                    # Only add jobs that have at least a title
                    if job_details.get('title') and job_details['title'] != "N/A":
                        job_details['quality_score'] = self._calculate_quality_score(**job_details)
                        self.jobs.append(job_details)
                        logger.info(f"Successfully scraped job: {job_details['title'][:50]}...")
                    else:
                        logger.warning(f"Skipping job with no title: {url}")
                    
                    await asyncio.sleep(REQUEST_DELAY)
                    
                except TimeoutError:
                    logger.error(f"Timeout: Could not load page {url}")
                except Exception as e:
                    logger.error(f"Error scraping detail for {url}: {e}")
            
            await browser.close()
            logger.info(f"Scraping finished. Successfully processed {len(self.jobs)} jobs.")

    def _calculate_quality_score(self, **kwargs) -> float:
        score = 0.0
        required_fields = ['title', 'company', 'location', 'description']
        for field in required_fields:
            if kwargs.get(field) and kwargs[field] not in ["N/A", ""]:
                score += 1
        return round(score / len(required_fields), 2)

    def print_jobs(self):
        logger.info(f"Printing {len(self.jobs)} jobs to the console.")
        print("\n" + "="*60)
        print(f"Found {len(self.jobs)} jobs on Yotspot.com (last {MAX_JOB_AGE_DAYS} days only)")
        print("="*60 + "\n")
        if not self.jobs:
            print("No recent jobs found in this run.")
            return
        for job in sorted(self.jobs, key=lambda j: j.get('id', '0'), reverse=True):
            pprint.pprint(job)
            print("-" * 20)

    def save_to_markdown(self, filename: str):
        logger.info(f"Saving {len(self.jobs)} jobs to {filename}.")
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"# Yotspot.com Job Listings (Last {MAX_JOB_AGE_DAYS} Days)\n\n")
            f.write(f"*Scraped on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*\n")
            f.write(f"*Total Jobs Found: {len(self.jobs)}*\n\n")
            f.write("---\n\n")
            if not self.jobs:
                f.write("No recent jobs found in this run.\n")
                return
            for job in sorted(self.jobs, key=lambda j: j.get('id', '0'), reverse=True):
                f.write(f"## {job['title']}\n\n")
                f.write(f"- **ID:** {job['id']}\n")
                f.write(f"- **Company:** {job['company']}\n")
                f.write(f"- **Location:** {job['location']}\n")
                f.write(f"- **Salary:** {job['salary']}\n")
                f.write(f"- **Quality Score:** {job['quality_score']}\n")
                f.write(f"- **Source URL:** [{job['source_url']}]({job['source_url']})\n\n")
                f.write("### Description\n")
                description = job.get('description', '')[:500] if job.get('description') else 'No description available'
                f.write(f"```\n{description}...\n```\n\n")
                f.write("---\n\n")
        logger.info("Successfully saved jobs to Markdown file.")

async def main():
    scraper = YotspotScraper(base_url=BASE_URL)
    await scraper.scrape_jobs(max_pages=MAX_PAGES)
    scraper.print_jobs()
    scraper.save_to_markdown(OUTPUT_FILE_NAME)

if __name__ == "__main__":
    asyncio.run(main())
</code>

test_scraper.py:
<code>
#!/usr/bin/env python3
"""
Test script for the Yotspot scraper
"""

import asyncio
import sys
import os

# Add the current directory to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.scraper import YotspotScraper

async def test_scraper():
    """Test the Yotspot scraper"""
    scraper = YotspotScraper()
    
    print("üß™ Testing Yotspot scraper...")
    print("=" * 50)
    
    # Test basic connection
    print("1. Testing website connection...")
    test_result = scraper.test_scraping()
    print(f"   Status: {test_result.get('status', 'unknown')}")
    if test_result.get('title'):
        print(f"   Page title: {test_result['title']}")
    if test_result.get('view_job_links'):
        print(f"   Found {test_result['view_job_links']} 'View Job' links")
    
    if test_result.get('status') == 'error':
        print(f"   Error: {test_result.get('error')}")
        print("\n‚ùå Connection test failed. Check your internet connection.")
        return
    
    print("   ‚úÖ Connection successful!")
    
    # Test scraping a small number of jobs
    print("\n2. Testing job scraping (1 page only)...")
    try:
        jobs = await scraper.scrape_jobs(max_pages=1)
        
        if jobs:
            print(f"   ‚úÖ Successfully scraped {len(jobs)} jobs!")
            print("\nüìã Sample jobs found:")
            
            for i, job in enumerate(jobs[:3], 1):  # Show first 3 jobs
                print(f"\n   Job {i}:")
                print(f"   Title: {job.get('title', 'N/A')}")
                print(f"   Company: {job.get('company', 'N/A')}")
                print(f"   Location: {job.get('location', 'N/A')}")
                print(f"   Vessel: {job.get('vessel_type', 'N/A')} - {job.get('vessel_size', 'N/A')}")
                print(f"   Salary: {job.get('salary_range', 'N/A')}")
                print(f"   Type: {job.get('job_type', 'N/A')}")
                
                if i == 3 and len(jobs) > 3:
                    print(f"\n   ... and {len(jobs) - 3} more jobs")
        else:
            print("   ‚ö†Ô∏è  No jobs found. This might be normal if:")
            print("      - The website structure has changed")
            print("      - There are no current job postings")
            print("      - The selectors need updating")
            
    except Exception as e:
        print(f"   ‚ùå Scraping failed: {e}")
        return
    
    print("\n" + "=" * 50)
    print("üéâ Scraper test completed!")
    
    if jobs:
        print(f"‚úÖ Found {len(jobs)} jobs successfully")
        print("\nüí° Tips:")
        print("   - Run 'python create_sample_data.py' to add sample data")
        print("   - Start the app with 'uvicorn main:app --reload'")
        print("   - Visit http://localhost:8000 to see the dashboard")
    else:
        print("‚ö†Ô∏è  No jobs found, but you can still test with sample data")
        print("   - Run 'python create_sample_data.py' to add sample data")

if __name__ == "__main__":
    asyncio.run(test_scraper()) 
</code>

git_instructions.md:
<code>
# GitHub Push Instructions with Personal Access Token

## Overview
This guide explains how to push code to GitHub using a Personal Access Token for authentication.

## Prerequisites
- GitHub account
- Personal Access Token (PAT) with appropriate permissions
- Git installed on your system

## Step-by-Step Instructions

### Step 1: Ensure Clean Remote URL
Make sure your remote URL doesn't contain any embedded tokens:
```bash
git remote set-url origin https://github.com/evgenii-codesmith/yotcrew.app.git
```

### Step 2: Configure Credential Storage (One-time setup)
Set up git to remember your credentials:
```bash
git config --global credential.helper store
```

### Step 3: Standard Workflow
Follow these steps for each push:

1. **Make your changes** to the code
2. **Add files to staging**:
   ```bash
   git add .
   ```
3. **Commit your changes**:
   ```bash
   git commit -m "Your descriptive commit message"
   ```
4. **Push to GitHub**:
   ```bash
   git push origin main
   ```

### Step 4: Authentication Prompt
When you push for the first time, git will prompt you:
- **Username**: Enter your GitHub username (`evgenii-codesmith`)
- **Password**: Enter your **Personal Access Token** (NOT your GitHub password)

### Step 5: Subsequent Pushes
After the first authentication, git will remember your credentials and won't ask again.

## Complete Example Workflow

```bash
# 1. Make changes to your code
# 2. Stage changes
git add .

# 3. Commit with descriptive message
git commit -m "Add new feature: user authentication"

# 4. Push to GitHub
git push origin main
# Username: evgenii-codesmith
# Password: YOUR_PERSONAL_ACCESS_TOKEN
```

## Security Best Practices

### ‚úÖ Do's:
- Use Personal Access Token as password
- Keep your token secure and private
- Use descriptive commit messages
- Regularly update your token

### ‚ùå Don'ts:
- Never commit tokens to git
- Never share your token
- Don't use your GitHub account password
- Don't store tokens in plain text files

## Troubleshooting

### If you get authentication errors:
1. Verify your token is valid and not expired
2. Check that your token has the correct permissions
3. Ensure you're using the token as password, not your GitHub password

### If you need to update your token:
1. Generate a new token on GitHub
2. Update your stored credentials:
   ```bash
   git config --global --unset credential.helper
   git config --global credential.helper store
   ```
3. Push again and enter new credentials

### If you need to change remote URL:
```bash
git remote set-url origin https://github.com/evgenii-codesmith/yotcrew.app.git
```

## Token Management

### Creating a Personal Access Token:
1. Go to GitHub.com ‚Üí Settings ‚Üí Developer settings ‚Üí Personal access tokens
2. Click "Generate new token"
3. Select appropriate scopes (repo, workflow, etc.)
4. Copy the token immediately (you won't see it again)

### Revoking a Token:
1. Go to GitHub.com ‚Üí Settings ‚Üí Developer settings ‚Üí Personal access tokens
2. Find the token and click "Delete"
3. Generate a new one if needed

## Branch Management

### Working with branches:
```bash
# Create and switch to new branch
git checkout -b feature-branch

# Switch between branches
git checkout main
git checkout feature-branch

# Merge branch into main
git checkout main
git merge feature-branch

# Delete local branch
git branch -d feature-branch
```

## Common Commands Reference

```bash
# Check status
git status

# Check remote configuration
git remote -v

# View commit history
git log --oneline

# Pull latest changes
git pull origin main

# View branches
git branch -a
```

---

**Remember**: Always use your Personal Access Token as the password, never your GitHub account password! 
</code>

search_bot_api.py:
<code>
from fastapi import FastAPI, Request, HTTPException
from pydantic import BaseModel
from typing import Optional, List, Dict, Any
import requests
import json
import logging
from datetime import datetime
import re
import asyncio
import aiohttp
import facebook
from googlesearch import search
import spacy
from spacy.matcher import Matcher
import uvicorn
from contextlib import asynccontextmanager

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Global variables for models
nlp = None
job_matcher = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Lifespan events for loading models on startup"""
    global nlp, job_matcher
    
    # Load spaCy model on startup
    try:
        nlp = spacy.load("en_core_web_sm")
        job_matcher = Matcher(nlp.vocab)
        logger.info("spaCy model loaded successfully")
    except OSError:
        logger.warning("spaCy model not found. Job detection will be limited.")
        nlp = None
    
    yield
    
    # Cleanup (if needed)
    logger.info("Shutting down...")

app = FastAPI(
    title="Search Bot API",
    description="A search bot that provides web search, job search, and Facebook search functionality",
    version="1.0.0",
    lifespan=lifespan
)

# Configuration
# Facebook Graph API for group posts
FB_ACCESS_TOKEN = "YOUR_FB_ACCESS_TOKEN"
FB_GROUP_ID = "YOUR_FB_GROUP_ID"

# Pydantic models
class SearchRequest(BaseModel):
    query: str
    max_results: int = 5

class JobSearchRequest(BaseModel):
    location: str = "remote"
    max_results: int = 5

class FacebookSearchRequest(BaseModel):
    query: str
    max_results: int = 10

class SearchBot:
    def __init__(self):
        self.setup_job_patterns()
    
    def setup_job_patterns(self):
        """Setup spaCy patterns for job detection"""
        if not nlp or not job_matcher:
            return
        
        hiring_patterns = [
            [{"LOWER": {"IN": ["hiring", "recruiting", "seeking"]}}],
            [{"LOWER": {"IN": ["job", "position", "role"]}}, 
             {"LOWER": {"IN": ["opening", "available", "vacancy"]}}],
            [{"LOWER": {"IN": ["apply", "send"]}}, 
             {"LOWER": {"IN": ["resume", "cv"]}}],
            [{"LOWER": {"IN": ["full", "part"]}}, {"LOWER": "time"}],
            [{"LOWER": "remote"}, {"LOWER": {"IN": ["work", "job"]}}],
            [{"LOWER": {"IN": ["salary", "wage"]}}, {"IS_DIGIT": True}],
            [{"LOWER": {"IN": ["we", "company"]}}, {"LOWER": {"IN": ["are", "is"]}}, {"LOWER": "hiring"}]
        ]
        
        try:
            for i, pattern in enumerate(hiring_patterns):
                job_matcher.add(f"JOB_PATTERN_{i}", [pattern])
            logger.info("Job patterns loaded successfully")
        except Exception as e:
            logger.error(f"Error setting up job patterns: {str(e)}")
    
    def is_job_post(self, text: str) -> bool:
        """Check if text is a job post using spaCy"""
        if not nlp or not job_matcher or not text:
            return False
        
        try:
            doc = nlp(text)
            matches = job_matcher(doc)
            
            job_keywords = {
                'hire', 'hiring', 'job', 'position', 'role', 'career', 'opportunity',
                'apply', 'resume', 'cv', 'salary', 'wage', 'remote', 'fulltime', 'parttime',
                'interview', 'candidate', 'employee', 'team', 'join', 'work', 'experience'
            }
            
            keyword_count = sum(1 for token in doc if token.lemma_.lower() in job_keywords)
            
            # Additional pattern checks
            salary_pattern = r'\$\d+(?:,\d+)*(?:\.\d+)?'
            has_salary = bool(re.search(salary_pattern, text))
            
            return len(matches) > 0 or keyword_count >= 2 or has_salary
            
        except Exception as e:
            logger.error(f"Error in job detection: {str(e)}")
            return False
    
    async def search_web(self, query: str, max_results: int = 5) -> List[str]:
        """Perform web search and return results"""
        try:
            # Using Google Search in a separate thread to avoid blocking
            loop = asyncio.get_event_loop()
            search_results = await loop.run_in_executor(
                None, 
                lambda: list(search(query, num_results=max_results))
            )
            return search_results
        except Exception as e:
            logger.error(f"Search error: {str(e)}")
            return []
    
    async def search_jobs(self, location: str = "remote", max_results: int = 5) -> List[str]:
        """Search for job postings"""
        try:
            # Search for jobs using web search
            job_query = f"jobs hiring {location} site:indeed.com OR site:linkedin.com OR site:glassdoor.com"
            
            loop = asyncio.get_event_loop()
            job_results = await loop.run_in_executor(
                None, 
                lambda: list(search(job_query, num_results=max_results))
            )
            return job_results
        except Exception as e:
            logger.error(f"Jobs search error: {str(e)}")
            return []
    
    async def search_facebook(self, search_term: str, max_results: int = 10) -> Dict[str, Any]:
        """Search Facebook group posts"""
        try:
            # Run Facebook API call in executor to avoid blocking
            loop = asyncio.get_event_loop()
            posts_data = await loop.run_in_executor(
                None, 
                self._search_facebook_posts, 
                search_term
            )
            return posts_data
        except Exception as e:
            logger.error(f"Facebook search error: {str(e)}")
            return {"job_posts": [], "regular_posts": []}
    
    def _search_facebook_posts(self, search_term: str):
        """Search Facebook posts synchronously"""
        try:
            graph = facebook.GraphAPI(access_token=FB_ACCESS_TOKEN)
            feed = graph.get_connections(FB_GROUP_ID, "feed", limit=50)
            
            job_posts = []
            regular_posts = []
            
            for post in feed['data']:
                if 'message' in post and search_term.lower() in post['message'].lower():
                    post_data = {
                        'id': post['id'],
                        'message': post['message'][:150] + "..." if len(post['message']) > 150 else post['message'],
                        'created_time': post.get('created_time', 'Unknown')[:10],  # Just date
                        'author': post.get('from', {}).get('name', 'Unknown')
                    }
                    
                    if self.is_job_post(post['message']):
                        job_posts.append(post_data)
                    else:
                        regular_posts.append(post_data)
            
            return {"job_posts": job_posts, "regular_posts": regular_posts}
            
        except Exception as e:
            logger.error(f"Facebook API error: {str(e)}")
            return {"job_posts": [], "regular_posts": []}
    
    async def search_news(self, topic: str = "technology", max_results: int = 5) -> List[str]:
        """Get latest news"""
        try:
            # Search for news
            news_query = f"{topic} news today site:reuters.com OR site:bbc.com OR site:cnn.com OR site:techcrunch.com"
            
            loop = asyncio.get_event_loop()
            news_results = await loop.run_in_executor(
                None, 
                lambda: list(search(news_query, num_results=max_results))
            )
            return news_results
        except Exception as e:
            logger.error(f"News search error: {str(e)}")
            return []

# Initialize bot
bot = SearchBot()

# Routes
@app.get("/")
async def root():
    """Root endpoint"""
    return {
        "message": "Search Bot API",
        "version": "1.0.0",
        "status": "online",
        "timestamp": datetime.now().isoformat()
    }

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "spacy_loaded": nlp is not None,
        "timestamp": datetime.now().isoformat()
    }

# API endpoints
@app.post("/api/search")
async def api_search(request: SearchRequest):
    """Direct search API endpoint"""
    try:
        results = await bot.search_web(request.query, request.max_results)
        return {
            "query": request.query,
            "results": results,
            "count": len(results)
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/jobs")
async def api_jobs(request: JobSearchRequest):
    """Direct job search API endpoint"""
    try:
        results = await bot.search_jobs(request.location, request.max_results)
        return {
            "location": request.location,
            "results": results,
            "count": len(results)
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/facebook")
async def api_facebook(request: FacebookSearchRequest):
    """Direct Facebook search API endpoint"""
    try:
        posts_data = await bot.search_facebook(request.query, request.max_results)
        return {
            "query": request.query,
            "job_posts": posts_data["job_posts"],
            "regular_posts": posts_data["regular_posts"],
            "total_found": len(posts_data["job_posts"]) + len(posts_data["regular_posts"])
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/news")
async def api_news(query: str = "technology", max_results: int = 5):
    """Direct news search API endpoint"""
    try:
        results = await bot.search_news(query, max_results)
        return {
            "topic": query,
            "results": results,
            "count": len(results)
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/status")
async def api_status():
    """Check bot status"""
    return {
        "system": "online",
        "ai_model": "spaCy Loaded" if nlp else "Not Available",
        "facebook_api": "Connected" if FB_ACCESS_TOKEN else "Not Configured",
        "search": "available",
        "uptime": datetime.now().isoformat()
    }

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
</code>

render.yaml:
<code>
services:
  # Backend API Service
  - type: web
    name: yacht-jobs-backend
    runtime: python
    buildCommand: |
      pip install -r requirements.txt
      python -m spacy download en_core_web_sm
    startCommand: python main.py
    envVars:
      - key: DATABASE_URL
        value: sqlite:///./yacht_jobs.db
      - key: REDIS_URL
        fromService:
          type: redis
          name: yacht-jobs-redis
          property: connectionString

      - key: CORS_ORIGINS
        value: https://yacht-jobs-frontend.onrender.com
    healthCheckPath: /health
    autoDeploy: false

  # Frontend Service
  - type: web
    name: yacht-jobs-frontend
    runtime: node
    rootDir: frontend
    buildCommand: npm install && npm run build
    startCommand: npm start
    envVars:
      - key: NEXT_PUBLIC_API_URL
        value: https://yacht-jobs-backend.onrender.com
      - key: NEXT_PUBLIC_WS_URL
        value: wss://yacht-jobs-backend.onrender.com
    healthCheckPath: /
    autoDeploy: false

  # Redis Service
  - type: redis
    name: yacht-jobs-redis
    maxmemoryPolicy: allkeys-lru
    plan: starter  # Free tier available 
</code>

docker-compose.yml:
<code>
version: '3.8'

services:
  backend:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=sqlite:///./yacht_jobs.db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FB_ACCESS_TOKEN=${FB_ACCESS_TOKEN}
      - FB_GROUP_ID=${FB_GROUP_ID}
      - FB_APP_SECRET=${FB_APP_SECRET}
      - FB_VERIFY_TOKEN=${FB_VERIFY_TOKEN}
    depends_on:
      - redis
    volumes:
      - ./data:/app/data
    restart: unless-stopped

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    depends_on:
      - backend
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

volumes:
  redis_data: 
</code>

meridian_scraper.py:
<code>
#!/usr/bin/env python3
"""
Meridian Go Job Board Scraper
Scrapes job listings from https://www.meridiango.com/jobs with pagination support
"""

import requests
from bs4 import BeautifulSoup
import json
import csv
import time
from typing import List, Dict, Optional
import logging
from urllib.parse import urljoin, urlparse
import re

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class MeridianScraper:
    def __init__(self, base_url: str = "https://www.meridiango.com"):
        self.base_url = base_url
        self.jobs_url = f"{base_url}/jobs"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        
    def get_total_pages(self) -> int:
        """Get the total number of pages available"""
        try:
            response = self.session.get(self.jobs_url)
            response.raise_for_status()
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # Look for pagination elements
            pagination = soup.find('nav', {'aria-label': 'pagination'}) or soup.find('ul', class_=re.compile('pagination'))
            if pagination:
                page_links = pagination.find_all('a', href=re.compile(r'page=\d+'))
                if page_links:
                    # Extract page numbers from href attributes
                    page_numbers = []
                    for link in page_links:
                        href = link.get('href', '')
                        match = re.search(r'page=(\d+)', href)
                        if match:
                            page_numbers.append(int(match.group(1)))
                    return max(page_numbers) if page_numbers else 1
            
            # Alternative: look for "Last" button or total pages indicator
            last_link = soup.find('a', text=re.compile(r'Last|¬ª|>>'))
            if last_link and last_link.get('href'):
                href = last_link['href']
                match = re.search(r'page=(\d+)', href)
                if match:
                    return int(match.group(1))
                    
            return 1  # Default to 1 page if no pagination found
            
        except Exception as e:
            logger.error(f"Error getting total pages: {e}")
            return 1
    
    def scrape_job_listings(self, page: int = 1) -> List[Dict[str, str]]:
        """Scrape job listings from a specific page"""
        jobs = []
        
        try:
            url = f"{self.jobs_url}?page={page}" if page > 1 else self.jobs_url
            logger.info(f"Scraping page {page}: {url}")
            
            response = self.session.get(url)
            response.raise_for_status()
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # Find job listings - adjust selectors based on actual HTML structure
            job_cards = soup.find_all('div', class_=re.compile('job|listing|position|card'))
            
            if not job_cards:
                # Try alternative selectors
                job_cards = soup.find_all('article', class_=re.compile('job|listing'))
                
            if not job_cards:
                # Try finding by data attributes
                job_cards = soup.find_all('div', {'data-job-id': True})
                
            logger.info(f"Found {len(job_cards)} job cards on page {page}")
            
            for card in job_cards:
                job_data = self.extract_job_data(card)
                if job_data:
                    jobs.append(job_data)
                    
            return jobs
            
        except Exception as e:
            logger.error(f"Error scraping page {page}: {e}")
            return []
    
    def extract_job_data(self, card) -> Optional[Dict[str, str]]:
        """Extract job data from a single job card element"""
        try:
            job_data = {}
            
            # Job title
            title_elem = card.find('h2') or card.find('h3') or card.find('a', class_=re.compile('title|job-title'))
            if not title_elem:
                title_elem = card.find('a', href=re.compile(r'/jobs/\d+'))
            job_data['title'] = title_elem.get_text(strip=True) if title_elem else 'N/A'
            
            # Job URL
            link_elem = title_elem.find('a') if title_elem else card.find('a', href=re.compile(r'/jobs/\d+'))
            if link_elem and link_elem.get('href'):
                job_data['url'] = urljoin(self.base_url, link_elem['href'])
            else:
                job_data['url'] = 'N/A'
            
            # Company name
            company_elem = card.find(class_=re.compile('company|employer')) or card.find('span', class_=re.compile('company'))
            job_data['company'] = company_elem.get_text(strip=True) if company_elem else 'Meridian Go'
            
            # Location
            location_elem = card.find(class_=re.compile('location|place')) or card.find('span', class_=re.compile('location'))
            job_data['location'] = location_elem.get_text(strip=True) if location_elem else 'N/A'
            
            # Job type (Full-time, Part-time, etc.)
            type_elem = card.find(class_=re.compile('type|employment')) or card.find('span', class_=re.compile('type'))
            job_data['job_type'] = type_elem.get_text(strip=True) if type_elem else 'N/A'
            
            # Posted date
            date_elem = card.find(class_=re.compile('date|posted')) or card.find('time')
            job_data['posted_date'] = date_elem.get_text(strip=True) if date_elem else 'N/A'
            
            # Salary (if available)
            salary_elem = card.find(class_=re.compile('salary|pay|compensation'))
            job_data['salary'] = salary_elem.get_text(strip=True) if salary_elem else 'N/A'
            
            # Description snippet
            desc_elem = card.find(class_=re.compile('description|summary')) or card.find('p')
            job_data['description'] = desc_elem.get_text(strip=True)[:200] + '...' if desc_elem else 'N/A'
            
            return job_data
            
        except Exception as e:
            logger.error(f"Error extracting job data: {e}")
            return None
    
    def scrape_all_jobs(self, max_pages: Optional[int] = None) -> List[Dict[str, str]]:
        """Scrape all job listings across all pages"""
        all_jobs = []
        
        total_pages = self.get_total_pages()
        if max_pages:
            total_pages = min(total_pages, max_pages)
            
        logger.info(f"Total pages to scrape: {total_pages}")
        
        for page in range(1, total_pages + 1):
            page_jobs = self.scrape_job_listings(page)
            all_jobs.extend(page_jobs)
            
            # Add delay to be respectful
            if page < total_pages:
                time.sleep(1)
        
        logger.info(f"Total jobs scraped: {len(all_jobs)}")
        return all_jobs
    
    def save_to_json(self, jobs: List[Dict[str, str]], filename: str = "meridian_jobs.json"):
        """Save jobs to JSON file"""
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(jobs, f, indent=2, ensure_ascii=False)
        logger.info(f"Saved {len(jobs)} jobs to {filename}")
    
    def save_to_csv(self, jobs: List[Dict[str, str]], filename: str = "meridian_jobs.csv"):
        """Save jobs to CSV file"""
        if not jobs:
            logger.warning("No jobs to save")
            return
            
        with open(filename, 'w', newline='', encoding='utf-8') as f:
            writer = csv.DictWriter(f, fieldnames=jobs[0].keys())
            writer.writeheader()
            writer.writerows(jobs)
        logger.info(f"Saved {len(jobs)} jobs to {filename}")

def main():
    """Main execution function"""
    scraper = MeridianScraper()
    
    # Scrape all jobs
    jobs = scraper.scrape_all_jobs()
    
    # Save results
    if jobs:
        scraper.save_to_json(jobs)
        scraper.save_to_csv(jobs)
        
        # Print summary
        print(f"\nScraping completed successfully!")
        print(f"Total jobs found: {len(jobs)}")
        print(f"First 5 jobs:")
        for i, job in enumerate(jobs[:5], 1):
            print(f"{i}. {job['title']} at {job['company']} - {job['location']}")
    else:
        print("No jobs found. The website structure might have changed.")

if __name__ == "__main__":
    main()
</code>

DesignSpecs/pluggable_scraper_architecture.md:
<code>
# Pluggable Scraping Architecture Specification
## Multi-Source Yacht Job Scraping System

### Overview
This specification redesigns the scraping system to support pluggable scrapers for multiple sources: Yotspot.com (existing), Daywork123.com, and MeridianGo.com. Each scraper is a self-contained module that implements a common interface.

---

## 1. Pluggable Architecture Design

### 1.1 Core Interface Definition
```python
# app/scrapers/base.py
from abc import ABC, abstractmethod
from typing import List, Dict, Any, AsyncIterator
from datetime import datetime
from pydantic import BaseModel

class ScrapingResult(BaseModel):
    """Standardized scraping result"""
    source: str
    jobs_found: int
    new_jobs: int
    updated_jobs: int
    errors: List[str]
    duration: float
    timestamp: datetime

class BaseScraper(ABC):
    """Abstract base class for all scrapers"""
    
    @property
    @abstractmethod
    def source_name(self) -> str:
        """Unique identifier for this scraper"""
        pass
    
    @property
    @abstractmethod
    def base_url(self) -> str:
        """Base URL of the source website"""
        pass
    
    @abstractmethod
    async def scrape_jobs(self, 
                         max_pages: int = 5,
                         filters: Dict[str, Any] = None) -> AsyncIterator[Dict[str, Any]]:
        """Scrape jobs and yield standardized job data"""
        pass
    
    @abstractmethod
    async def test_connection(self) -> bool:
        """Test if the source is accessible"""
        pass
    
    @abstractmethod
    def get_supported_filters(self) -> List[str]:
        """Return list of supported filter parameters"""
        pass
    
    async def health_check(self) -> Dict[str, Any]:
        """Health check for monitoring"""
        return {
            "source": self.source_name,
            "accessible": await self.test_connection(),
            "last_scrape": None,  # To be implemented by subclasses
            "status": "healthy"
        }
```

### 1.2 Plugin Registration System
```python
# app/scrapers/registry.py
from typing import Dict, Type
from .base import BaseScraper

class ScraperRegistry:
    """Registry for managing pluggable scrapers"""
    
    _scrapers: Dict[str, Type[BaseScraper]] = {}
    
    @classmethod
    def register(cls, scraper_class: Type[BaseScraper]):
        """Register a new scraper"""
        instance = scraper_class()
        cls._scrapers[instance.source_name] = scraper_class
    
    @classmethod
    def get_scraper(cls, source_name: str) -> BaseScraper:
        """Get scraper instance by source name"""
        if source_name not in cls._scrapers:
            raise ValueError(f"Unknown scraper: {source_name}")
        return cls._scrapers[source_name]()
    
    @classmethod
    def list_scrapers(cls) -> List[str]:
        """List all registered scrapers"""
        return list(cls._scrapers.keys())
    
    @classmethod
    def get_all_scrapers(cls) -> List[BaseScraper]:
        """Get instances of all scrapers"""
        return [scraper_class() for scraper_class in cls._scrapers.values()]

# Auto-registration decorator
def register_scraper(cls):
    """Decorator to automatically register scrapers"""
    ScraperRegistry.register(cls)
    return cls
```

---

## 2. Standardized Data Models

### 2.1 Universal Job Schema
```python
# app/scrapers/models.py
from pydantic import BaseModel, Field, HttpUrl
from typing import Optional, List, Dict, Any
from datetime import datetime
from enum import Enum

class JobSource(str, Enum):
    YOTSPOT = "yotspot"
    DAYWORK123 = "daywork123"
    MERIDIAN_GO = "meridian_go"

class EmploymentType(str, Enum):
    PERMANENT = "permanent"
    TEMPORARY = "temporary"
    ROTATIONAL = "rotational"
    DAYWORK = "daywork"
    SEASONAL = "seasonal"
    CONTRACT = "contract"

class Department(str, Enum):
    DECK = "deck"
    INTERIOR = "interior"
    ENGINEERING = "engineering"
    GALLEY = "galley"
    BRIDGE = "bridge"
    OTHER = "other"

class VesselType(str, Enum):
    MOTOR_YACHT = "motor_yacht"
    SAILING_YACHT = "sailing_yacht"
    CATAMARAN = "catamaran"
    SUPER_YACHT = "super_yacht"
    EXPEDITION = "expedition"
    CHASE_BOAT = "chase_boat"

class UniversalJob(BaseModel):
    """Standardized job format across all sources"""
    
    # Required fields
    external_id: str = Field(..., description="Unique ID from source")
    title: str = Field(..., min_length=3, max_length=200)
    company: str = Field(..., max_length=100)
    source: JobSource
    source_url: HttpUrl
    
    # Location
    location: str = Field(..., max_length=100)
    country: Optional[str] = None
    region: Optional[str] = None
    coordinates: Optional[Dict[str, float]] = None
    
    # Vessel information
    vessel_type: Optional[VesselType] = None
    vessel_size: Optional[str] = None  # e.g., "40m", "50-75m"
    vessel_name: Optional[str] = None
    
    # Employment details
    employment_type: Optional[EmploymentType] = None
    department: Optional[Department] = None
    position_level: Optional[str] = None  # Junior, Senior, Chief, etc.
    
    # Compensation
    salary_range: Optional[str] = None
    salary_currency: Optional[str] = None
    salary_period: Optional[str] = None  # hourly, daily, monthly, yearly
    
    # Timing
    start_date: Optional[str] = None
    posted_date: Optional[datetime] = None
    application_deadline: Optional[datetime] = None
    
    # Content
    description: str = Field(..., min_length=10)
    requirements: List[str] = Field(default_factory=list)
    benefits: List[str] = Field(default_factory=list)
    
    # Metadata
    scraped_at: datetime = Field(default_factory=datetime.utcnow)
    quality_score: float = Field(default=0.0, ge=0.0, le=1.0)
    raw_data: Optional[Dict[str, Any]] = None  # Original data for debugging
    
    class Config:
        use_enum_values = True
```

---

## 3. Refactored Scraper Implementations

### 3.1 Yotspot Scraper (Refactored)
```python
# app/scrapers/yotspot.py
from .base import BaseScraper, register_scraper
from .models import UniversalJob, JobSource
import asyncio
import aiohttp
from bs4 import BeautifulSoup

@register_scraper
class YotspotScraper(BaseScraper):
    """Refactored Yotspot scraper implementing pluggable interface"""
    
    @property
    def source_name(self) -> str:
        return JobSource.YOTSPOT
    
    @property
    def base_url(self) -> str:
        return "https://www.yotspot.com"
    
    async def scrape_jobs(self, max_pages=5, filters=None):
        """Implement standardized scraping interface"""
        async with aiohttp.ClientSession() as session:
            for page in range(1, max_pages + 1):
                jobs = await self._scrape_page(session, page, filters)
                for job in jobs:
                    yield self._normalize_job(job)
    
    async def test_connection(self) -> bool:
        """Test Yotspot accessibility"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(self.base_url) as response:
                    return response.status == 200
        except:
            return False
    
    def get_supported_filters(self) -> List[str]:
        return ["location", "department", "vessel_type", "salary_range"]
    
    async def _scrape_page(self, session, page, filters):
        """Scrape individual page"""
        # Implementation here
        pass
    
    def _normalize_job(self, raw_job):
        """Convert raw job to UniversalJob format"""
        return UniversalJob(
            external_id=raw_job.get("id"),
            title=raw_job.get("title"),
            company=raw_job.get("company"),
            source=self.source_name,
            source_url=raw_job.get("url"),
            location=raw_job.get("location", ""),
            vessel_type=raw_job.get("vessel_type"),
            employment_type=raw_job.get("job_type"),
            department=raw_job.get("department"),
            salary_range=raw_job.get("salary_range"),
            description=raw_job.get("description", ""),
            posted_date=raw_job.get("posted_at"),
            raw_data=raw_job
        )
```

### 3.2 Daywork123 Scraper
```python
# app/scrapers/daywork123.py
from .base import BaseScraper, register_scraper
from .models import UniversalJob, JobSource
import asyncio
from playwright.async_api import async_playwright

@register_scraper
class Daywork123Scraper(BaseScraper):
    """Daywork123.com scraper with anti-detection"""
    
    @property
    def source_name(self) -> str:
        return JobSource.DAYWORK123
    
    @property
    def base_url(self) -> str:
        return "https://www.daywork123.com"
    
    async def scrape_jobs(self, max_pages=5, filters=None):
        async with async_playwright() as p:
            browser = await p.chromium.launch(headless=True)
            page = await browser.new_page()
            # Anti-detection setup
            await page.add_init_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            try:
                for page_num in range(1, max_pages + 1):
                    jobs = await self._scrape_page_with_browser(page, page_num, filters)
                    for job in jobs:
                        yield self._normalize_job(job)
            finally:
                await browser.close()
    
    async def test_connection(self) -> bool:
        try:
            async with async_playwright() as p:
                browser = await p.chromium.launch()
                page = await browser.new_page()
                response = await page.goto(self.base_url)
                await browser.close()
                return response.status == 200
        except:
            return False
    
    def get_supported_filters(self) -> List[str]:
        return ["location", "date_range", "job_type", "vessel_size"]
```

### 3.3 MeridianGo Scraper
```python
# app/scrapers/meridian_go.py
from .base import BaseScraper, register_scraper
from .models import UniversalJob, JobSource
import aiohttp
from bs4 import BeautifulSoup

@register_scraper
class MeridianGoScraper(BaseScraper):
    """MeridianGo.com scraper"""
    
    @property
    def source_name(self) -> str:
        return JobSource.MERIDIAN_GO
    
    @property
    def base_url(self) -> str:
        return "https://www.meridiango.com"
    
    async def scrape_jobs(self, max_pages=5, filters=None):
        async with aiohttp.ClientSession() as session:
            for page in range(1, max_pages + 1):
                jobs = await self._scrape_page(session, page, filters)
                for job in jobs:
                    yield self._normalize_job(job)
    
    async def test_connection(self) -> bool:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(self.base_url) as response:
                    return response.status == 200
        except:
            return False
    
    def get_supported_filters(self) -> List[str]:
        return ["location", "category", "experience_level"]
```

---

## 4. Orchestrator Service

### 4.1 Unified Scraping Service
```python
# app/services/scraping_service.py
from typing import List, Dict, Any
from app.scrapers.registry import ScraperRegistry
from app.scrapers.models import UniversalJob
from app.database import SessionLocal
from sqlalchemy.orm import Session

class ScrapingService:
    """Unified service for managing all scrapers"""
    
    def __init__(self):
        self.registry = ScraperRegistry()
    
    async def scrape_source(self, source_name: str, max_pages: int = 5) -> Dict[str, Any]:
        """Scrape a specific source"""
        scraper = self.registry.get_scraper(source_name)
        
        jobs = []
        async for job in scraper.scrape_jobs(max_pages=max_pages):
            jobs.append(job)
        
        # Save to database
        saved_count = await self._save_jobs(jobs)
        
        return {
            "source": source_name,
            "jobs_found": len(jobs),
            "jobs_saved": saved_count,
            "timestamp": datetime.utcnow()
        }
    
    async def scrape_all_sources(self, max_pages: int = 5) -> List[Dict[str, Any]]:
        """Scrape all registered sources"""
        results = []
        for source_name in self.registry.list_scrapers():
            result = await self.scrape_source(source_name, max_pages)
            results.append(result)
        return results
    
    async def health_check_all(self) -> Dict[str, Any]:
        """Health check for all scrapers"""
        health_status = {}
        for scraper in self.registry.get_all_scrapers():
            health_status[scraper.source_name] = await scraper.health_check()
        return health_status
    
    async def _save_jobs(self, jobs: List[UniversalJob]) -> int:
        """Save jobs to database with deduplication"""
        # Implementation for database saving
        pass
```

---

## 5. Scheduler Integration

### 5.1 Updated Scheduler
```python
# app/scheduler.py (updated)
from app.services.scraping_service import ScrapingService

class ScrapingScheduler:
    def __init__(self):
        self.service = ScrapingService()
    
    async def scrape_all_sources(self):
        """Scrape all sources with staggered timing"""
        sources = ["yotspot", "daywork123", "meridian_go"]
        
        for source in sources:
            try:
                result = await self.service.scrape_source(source, max_pages=5)
                logger.info(f"Scraped {result['jobs_found']} jobs from {source}")
            except Exception as e:
                logger.error(f"Failed to scrape {source}: {e}")
            
            # Stagger requests to avoid overwhelming sources
            await asyncio.sleep(30)
```

---

## 6. Configuration Management

### 6.1 Source-Specific Configuration
```python
# app/config/scraping.py
from pydantic import BaseSettings, Field

class ScrapingConfig(BaseSettings):
    # Global settings
    max_concurrent_requests: int = 3
    request_delay: float = 2.5
    max_retries: int = 3
    
    # Source-specific settings
    yotspot_enabled: bool = True
    yotspot_max_pages: int = 5
    
    daywork123_enabled: bool = True
    daywork123_max_pages: int = 5
    daywork123_use_playwright: bool = True
    
    meridian_go_enabled: bool = True
    meridian_go_max_pages: int = 5
    
    class Config:
        env_prefix = "SCRAPER_"
```

---

## 7. Testing Framework

### 7.1 Unified Testing
```python
# tests/test_pluggable_scrapers.py
import pytest
from app.scrapers.registry import ScraperRegistry
from app.scrapers.models import UniversalJob

@pytest.mark.asyncio
async def test_all_scrapers():
    """Test all registered scrapers"""
    registry = ScraperRegistry()
    
    for source_name in registry.list_scrapers():
        scraper = registry.get_scraper(source_name)
        
        # Test connection
        assert await scraper.test_connection(), f"{source_name} not accessible"
        
        # Test scraping
        jobs = []
        async for job in scraper.scrape_jobs(max_pages=1):
            assert isinstance(job, UniversalJob)
            jobs.append(job)
        
        assert len(jobs) > 0, f"No jobs found for {source_name}"
```

---

## 8. Migration Strategy

### 8.1 Gradual Rollout
1. **Phase 1**: Keep existing Yotspot scraper as-is
2. **Phase 2**: Add new pluggable Yotspot scraper alongside existing
3. **Phase 3**: Switch to pluggable system for all sources
4. **Phase 4**: Deprecate old scrapers

### 8.2 Backward Compatibility
```python
# app/scrapers/legacy.py
from app.scrapers.yotspot import YotspotScraper

# Temporary compatibility layer
class LegacyYotspotScraper(YotspotScraper):
    """Backward-compatible scraper during transition"""
    async def scrape_jobs_old(self, *args, **kwargs):
        """Old interface for compatibility"""
        jobs = []
        async for job in self.scrape_jobs(*args, **kwargs):
            jobs.append(job.dict())
        return jobs
```

---

## 9. Quick Start Commands

### 9.1 Register All Scrapers
```python
# app/scrapers/__init__.py
from .yotspot import YotspotScraper
from .daywork123 import Daywork123Scraper
from .meridian_go import MeridianGoScraper

# Auto-registration happens via decorators
```

### 9.2 Usage Examples
```python
# Single source scraping
from app.services.scraping_service import ScrapingService

service = ScrapingService()
result = await service.scrape_source("daywork123", max_pages=3)

# All sources
results = await service.scrape_all_sources(max_pages=5)

# Health check
health = await service.health_check_all()
```

This pluggable architecture allows easy addition of new scrapers while maintaining a consistent interface across all sources.
</code>

DesignSpecs/Architechture.md:
<code>
# **Architecture Overview: FastAPI & Next.js**

This document outlines the proposed architecture, integrating your existing FastAPI backend with a new Next.js frontend.

## **Architecture Components**

* **Backend:** FastAPI (Python)  
* **Frontend:** Next.js with Tailwind CSS

## **Why Keep FastAPI?**

Your current FastAPI backend is crucial for handling computationally intensive and specialized tasks that Next.js cannot replace. These include:

* Facebook webhook processing  
* spaCy NLP for job detection  
* SQLite database operations  
* Redis caching  
* WebSocket server for real-time updates  
* Leveraging powerful Python libraries (e.g., spacy, googlesearch)

## **What Next.js Adds**

The addition of Next.js for the frontend brings significant benefits for user interaction and data visualization:

* A dedicated user interface to display the processed data.  
* A real-time dashboard connected directly to your FastAPI WebSocket.  
* A beautiful, responsive UI built with Tailwind CSS.  
* A WebSocket client to seamlessly receive real-time updates from the FastAPI backend.

## **Communication Flow**

The data flow within this architecture will follow this path:

**Facebook ‚Üí FastAPI Webhook ‚Üí Process & Store Data ‚Üí WebSocket ‚Üí Next.js UI**

## **Typical Development Setup**

For local development, the components will typically run on the following ports:

* **FastAPI:** localhost:8000  
* **Next.js:** localhost:3000  
* **Next.js WebSocket Connection:** ws://localhost:8000/ws/jobs (connecting to FastAPI's WebSocket endpoint)

## **Production Deployment**

In a production environment, the setup would typically be:

* **FastAPI:** api.yourdomain.com (serving as the API backend)  
* **Next.js:** yourdomain.com (serving the user-facing application)

Next.js will fetch data from FastAPI through standard API calls and maintain a real-time connection via the WebSocket.

## **Analogy**

Think of this architecture as a collaborative effort:

* **FastAPI is your data engine:** It handles all the heavy lifting, processing, and data management.  
* **Next.js is your dashboard display:** It provides the interactive and visually appealing interface for users to consume and interact with the data.

They work together, each excelling in its specialized role to deliver a powerful and responsive application.
</code>

DesignSpecs/daywork123_implementation_plan.md:
<code>
# Daywork123.com Scraping Module - Implementation Plan
## Quick Start Guide for Development Team

### Phase 1: Core Implementation (Priority 1)

#### 1.1 Create Project Structure
```
app/scrapers/
‚îú‚îÄ‚îÄ daywork123/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ scraper.py          # Main scraper class
‚îÇ   ‚îú‚îÄ‚îÄ parser.py           # Content parser
‚îÇ   ‚îú‚îÄ‚îÄ models.py           # Pydantic models
‚îÇ   ‚îú‚îÄ‚îÄ config.py           # Configuration
‚îÇ   ‚îî‚îÄ‚îÄ utils.py            # Utilities
‚îú‚îÄ‚îÄ shared/
‚îÇ   ‚îú‚îÄ‚îÄ anti_detection.py   # Anti-detection utilities
‚îÇ   ‚îú‚îÄ‚îÄ rate_limiter.py     # Rate limiting
‚îÇ   ‚îî‚îÄ‚îÄ validators.py       # Data validation
```

#### 1.2 Essential Files to Create First
1. `app/scrapers/daywork123/config.py` - Configuration management
2. `app/scrapers/daywork123/models.py` - Data models
3. `app/scrapers/daywork123/scraper.py` - Core scraper
4. `app/scrapers/daywork123/parser.py` - Content parser

### Phase 2: Integration Points

#### 2.1 Database Schema Updates
```sql
-- Add source column to existing jobs table
ALTER TABLE jobs ADD COLUMN IF NOT EXISTS source VARCHAR(50) DEFAULT 'yotspot';

-- Create daywork123 specific indexes
CREATE INDEX IF NOT EXISTS idx_jobs_source ON jobs(source);
CREATE INDEX IF NOT EXISTS idx_jobs_external_id_source ON jobs(external_id, source);
```

#### 2.2 Scheduler Integration
Update `app/scheduler.py` to include Daywork123 scraping:
```python
from app.scrapers.daywork123.scraper import Daywork123Scraper

# Add to scheduler
scheduler.add_job(
    scrape_daywork123,
    'interval',
    minutes=45,
    id='daywork123_scraper',
    replace_existing=True
)
```

### Phase 3: Configuration Files

#### 3.1 Environment Variables (.env)
```bash
# Daywork123 Scraping
DAYWORK123_ENABLED=true
DAYWORK123_BASE_URL=https://www.daywork123.com
DAYWORK123_MAX_PAGES=10
DAYWORK123_REQUEST_DELAY=2.5
DAYWORK123_USER_AGENT="YotCrewBot/1.0 (+https://yotcrew.app/bot)"
```

#### 3.2 Requirements Update
Add to `requirements.txt`:
```
playwright==1.40.0
fake-useragent==1.4.0
cloudscraper==1.2.71
pydantic[email]==2.5.0
```

### Phase 4: Testing Strategy

#### 4.1 Test Files to Create
```
tests/
‚îú‚îÄ‚îÄ test_daywork123_scraper.py
‚îú‚îÄ‚îÄ test_daywork123_parser.py
‚îú‚îÄ‚îÄ fixtures/
‚îÇ   ‚îú‚îÄ‚îÄ daywork123_sample.html
‚îÇ   ‚îî‚îÄ‚îÄ daywork123_job_detail.html
```

#### 4.2 Quick Test Command
```bash
python -m pytest tests/test_daywork123_scraper.py -v
```

### Phase 5: Deployment Checklist

#### 5.1 Pre-deployment
- [ ] Test scraper locally with 1-2 pages
- [ ] Verify data quality scores >0.8
- [ ] Check database integration
- [ ] Validate error handling

#### 5.2 Production Deployment
- [ ] Update Docker configuration
- [ ] Configure monitoring alerts
- [ ] Set up log rotation
- [ ] Test rollback procedure

---

## Quick Implementation Commands

### 1. Install Dependencies
```bash
pip install playwright fake-useragent cloudscraper
playwright install chromium
```

### 2. Create Basic Scraper
```bash
# Copy existing scraper as template
cp app/scraper.py app/scrapers/daywork123/scraper.py
```

### 3. Test Integration
```bash
# Test database connection
python -c "from app.database import SessionLocal; print('DB connected')"

# Test scraper
python -c "from app.scrapers.daywork123.scraper import Daywork123Scraper; print('Scraper loaded')"
```

### 4. Run First Scrape
```bash
# Quick test with 1 page
python -c "
from app.scrapers.daywork123.scraper import Daywork123Scraper
import asyncio
async def test():
    scraper = Daywork123Scraper()
    jobs = await scraper.scrape_jobs(max_pages=1)
    print(f'Found {len(jobs)} jobs')
asyncio.run(test())
"
```

---

## Risk Mitigation

### High Priority Risks
1. **Website Structure Changes**: Implement flexible selectors
2. **IP Blocking**: Use proxy rotation from day 1
3. **Rate Limiting**: Conservative delays (2.5s between requests)
4. **Data Quality**: Implement validation early

### Fallback Strategy
- Keep existing Yotspot scraper as primary
- Daywork123 as secondary source initially
- Gradual rollout with feature flags

---

## Success Criteria

### Week 1 Goals
- [ ] Basic scraper working with 1-2 pages
- [ ] Data successfully saved to database
- [ ] No duplicate entries
- [ ] Quality score >0.7

### Week 2 Goals
- [ ] Full pagination support
- [ ] Anti-detection measures working
- [ ] Integration with scheduler
- [ ] Basic monitoring in place

---

## Next Steps

1. **Switch to Code Mode** to begin implementation
2. **Start with Phase 1** - create basic scraper structure
3. **Test incrementally** - validate each component
4. **Deploy gradually** - monitor metrics closely

The specification document provides all technical details needed for implementation. This plan focuses on the essential first steps to get Daywork123 scraping operational quickly while maintaining quality and reliability.
</code>

DesignSpecs/yotcrew_app_requirements.md:
<code>
ss# YotCrew.app - Comprehensive Technical Requirements Specification

## Executive Summary

**YotCrew.app** is a sophisticated yacht job aggregation platform that automatically scrapes and presents yacht crew positions from multiple sources including Yotspot.com, Daywork123.com, and MeridianGo.com. The platform features a modern, responsive web interface built with FastAPI, HTMX, Alpine.js, Tailwind CSS, and DaisyUI, providing real-time job discovery, interactive filtering, and advanced job comparison capabilities for yacht industry professionals.

## 1. System Architecture Overview

### 1.1 Technology Stack
- **Backend**: Python 3.11+ with FastAPI
- **Database**: PostgreSQL (primary), Redis (caching)
- **Frontend**: HTMX + Alpine.js for interactivity
- **Styling**: Tailwind CSS + DaisyUI component library
- **Task Queue**: Celery with Redis broker
- **Web Scraping**: Playwright + BeautifulSoup4
- **API Documentation**: OpenAPI/Swagger
- **Deployment**: Docker containers on Render/Fly.io

### 1.2 System Architecture Diagram

```mermaid
graph TB
    subgraph "Frontend Layer"
        A[Browser] --> B[HTMX/Alpine.js]
        B --> C[Tailwind CSS/DaisyUI]
    end
    
    subgraph "API Layer"
        D[FastAPI] --> E[Authentication]
        D --> F[Rate Limiting]
        D --> G[Validation]
    end
    
    subgraph "Business Logic"
        
        H --> J[Yotspot Scraper]
        H --> K[Daywork123 Scraper]
        H --> L[MeridianGo Scraper]
        M[Job Processor] --> N[Duplicate Detection]
        M --> O[Category Classification]
        M --> P[Salary Extraction]
    end
    
    subgraph "Data Layer"
        Q[PostgreSQL] --> R[Jobs Table]
        Q --> S[Companies Table]
        Q --> T[Users Table]
        U[Redis] --> V[Cache]
        U --> W[Task Queue]
    end
    
    subgraph "External Services"
        
        Y[Yotspot.com]
        Z[Daywork123.com]
        AA[MeridianGo.com]
    end
```

## 2. Core Functional Requirements

### 2.1 Job Scraping & Aggregation

#### 2.1.1 Source Configuration
 
  - Support for private yacht crew groups
  - OAuth2 authentication flow
  - Rate limiting: 1 request per 3 seconds
  - Post filtering by keywords and date range
  
- **Yotspot.com**:
  - Public job listings scraping
  - Pagination support (up to 50 pages)
  - Job detail page extraction
  - Company profile enrichment
  
- **Daywork123.com**:
  - Daily job postings scraping
  - Location-based filtering
  - Position type categorization
  - Contact information extraction
  
- **MeridianGo.com**:
  - Real-time job updates
  - Vessel specifications extraction
  - Contract type identification
  - Salary range parsing

#### 2.1.2 Scraping Schedule

- **Hourly**: Daywork123.com updates
- **Daily**: Full Yotspot.com refresh
- **Weekly**: MeridianGo.com comprehensive scan

### 2.2 Job Classification System

#### 2.2.1 Primary Categories
1. **Chef**
   - Head Chef
   - Sous Chef
   - Crew Chef
   - Private Chef

2. **Stewardess**
   - Chief Stewardess
   - Second Stewardess
   - Junior Stewardess
   - Service Stewardess

3. **Engineer**
   - Chief Engineer
   - Second Engineer
   - Third Engineer
   - Junior Engineer

4. **ETO (Electro-Technical Officer)**
   - Senior ETO
   - Junior ETO
   - AV/IT Officer

5. **Captain**
   - Master
   - Relief Captain
   - Captain/Engineer

6. **Deckhand**
   - Bosun
   - Lead Deckhand
   - Senior Deckhand
   - Junior Deckhand

#### 2.2.2 Classification Algorithm
- **Keyword matching**: 85% accuracy threshold
- **ML-based classification**: BERT model for job descriptions
- **Manual override**: Admin panel for corrections
- **Confidence scoring**: Display reliability indicators

### 2.3 Job Card Component Specification

#### 2.3.1 Visual Design
- **Dimensions**: 350px x 280px (desktop), full-width (mobile)
- **Layout**: Card-based with glassmorphism effects
- **Colors**: Category-specific accent colors
- **Typography**: Inter font family with proper hierarchy

#### 2.3.2 Interactive Features
- **Hover effects**: Subtle elevation and shadow
- **Quick actions**: Save, share, apply buttons
- **Expandable details**: Full description on click
- **Source attribution**: Platform-specific styling
- **Real-time updates**: Live status indicators

## 3. Technical Requirements

### 3.1 Backend API Specification

#### 3.1.1 RESTful Endpoints

```yaml
GET /api/v1/jobs:
  parameters:
    - category: string (chef|stewardess|engineer|eto|captain|deckhand)
    - source: string (yotspot|daywork123|meridiango)
    - location: string
    - salary_min: integer
    - salary_max: integer
    - contract_type: string (permanent|temporary|rotational)
    - start_date_from: date
    - start_date_to: date
    - page: integer (default: 1)
    - limit: integer (default: 20)
  responses:
    200:
      schema:
        jobs: array[Job]
        pagination: PaginationInfo
        filters: ActiveFilters

GET /api/v1/jobs/{job_id}:
  responses:
    200:
      schema: JobDetail
    404:
      description: Job not found

GET /api/v1/categories:
  responses:
    200:
      schema:
        categories: array[Category]
        counts: object (category -> count)

GET /api/v1/scraping/status:
  responses:
    200:
      schema:
        sources: array[SourceStatus]
        last_update: datetime
        next_update: datetime
```

#### 3.1.2 WebSocket Events
```yaml
events:
  job_created:
    payload: Job
  job_updated:
    payload: Job
  scraping_started:
    payload: { source: string }
  scraping_completed:
    payload: { source: string, count: integer }
  connection_status:
    payload: { status: string, timestamp: datetime }
```

### 3.2 Database Schema

#### 3.2.1 Core Tables

```sql
-- Jobs table
CREATE TABLE jobs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    external_id VARCHAR(255) UNIQUE NOT NULL,
    source VARCHAR(50) NOT NULL,
    title VARCHAR(500) NOT NULL,
    description TEXT,
    category VARCHAR(50) NOT NULL,
    subcategory VARCHAR(100),
    company_name VARCHAR(255),
    company_logo_url TEXT,
    location VARCHAR(255),
    vessel_name VARCHAR(255),
    vessel_type VARCHAR(100),
    vessel_size INTEGER,
    salary_min INTEGER,
    salary_max INTEGER,
    salary_currency VARCHAR(3),
    contract_type VARCHAR(50),
    start_date DATE,
    posted_date TIMESTAMP,
    application_url TEXT,
    contact_email VARCHAR(255),
    contact_phone VARCHAR(50),
    is_active BOOLEAN DEFAULT true,
    scraped_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    created_at TIMESTAMP DEFAULT NOW()
);

-- Categories table
CREATE TABLE categories (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) UNIQUE NOT NULL,
    display_name VARCHAR(100),
    icon VARCHAR(50),
    color VARCHAR(7),
    sort_order INTEGER
);

-- Sources table
CREATE TABLE sources (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) UNIQUE NOT NULL,
    display_name VARCHAR(100),
    base_url TEXT,
    is_active BOOLEAN DEFAULT true,
    last_scraped TIMESTAMP,
    scrape_interval_minutes INTEGER
);

-- Saved jobs table
CREATE TABLE saved_jobs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id),
    job_id UUID REFERENCES jobs(id),
    saved_at TIMESTAMP DEFAULT NOW(),
    UNIQUE(user_id, job_id)
);
```

### 3.3 Frontend Specifications

#### 3.3.1 HTMX Integration
```html
<!-- Job listing with HTMX -->
<div id="jobs-container" 
     hx-get="/htmx/jobs"
     hx-trigger="load, every 30s"
     hx-target="#jobs-container"
     hx-swap="innerHTML">
</div>

<!-- Filter form -->
<form hx-get="/htmx/jobs" 
      hx-target="#jobs-container"
      hx-push-url="true"
      hx-indicator="#loading">
  <select name="category" hx-get="/htmx/jobs" hx-target="#jobs-container">
    <option value="">All Categories</option>
    <option value="chef">Chef</option>
    <option value="stewardess">Stewardess</option>
    <option value="engineer">Engineer</option>
    <option value="eto">ETO</option>
    <option value="captain">Captain</option>
    <option value="deckhand">Deckhand</option>
  </select>
</form>
```

#### 3.3.2 Alpine.js Components
```javascript
// Job card component
<div x-data="jobCard({
    job: jobData,
    isSaved: false,
    isExpanded: false
})">
  <div @click="toggleExpand" 
       :class="{ 'shadow-lg': isExpanded }"
       class="job-card transition-all duration-300">
    <!-- Card content -->
  </div>
</div>
```

### 3.4 Responsive Design Specifications

#### 3.4.1 Breakpoints
- **Mobile**: 320px - 768px
- **Tablet**: 768px - 1024px
- **Desktop**: 1024px - 1440px
- **Large Desktop**: 1440px+

#### 3.4.2 Grid System
```css
/* Mobile: 1 column */
.job-grid {
  display: grid;
  grid-template-columns: 1fr;
  gap: 1rem;
}

/* Tablet: 2 columns */
@media (min-width: 768px) {
  .job-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}

/* Desktop: 3 columns */
@media (min-width: 1024px) {
  .job-grid {
    grid-template-columns: repeat(3, 1fr);
  }
}

/* Large Desktop: 4 columns */
@media (min-width: 1440px) {
  .job-grid {
    grid-template-columns: repeat(4, 1fr);
  }
}
```

## 4. Performance Requirements

### 4.1 Response Times
- **Initial page load**: < 2 seconds
- **Job search/filter**: < 500ms
- **Real-time updates**: < 1 second
- **Image loading**: Lazy loading with blur-up effect

### 4.2 Caching Strategy
- **Redis caching**: Job listings (5-minute TTL)
- **CDN integration**: Static assets and images
- **Database query caching**: Complex aggregations
- **Browser caching**: Static resources (1-year TTL)

### 4.3 Scalability Targets
- **Concurrent users**: 1,000+
- **Jobs per day**: 10,000+
- **Scraping frequency**: Every 15 minutes
- **Database size**: 1M+ jobs capacity

## 5. Security Requirements

### 5.1 Authentication & Authorization
- **JWT tokens**: Stateless authentication

- **Rate limiting**: 100 requests per minute per IP
- **API key management**: For third-party integrations

### 5.2 Data Protection
- **HTTPS enforcement**: All endpoints
- **Input validation**: SQL injection prevention
- **XSS protection**: Content sanitization
- **CORS configuration**: Whitelist domains

### 5.3 Scraping Ethics
- **Robots.txt compliance**: Respect site policies
- **Rate limiting**: Maximum 1 request per 2 seconds
- **User-agent identification**: Clear bot identification
- **Data retention**: 90-day automatic cleanup

## 6. Monitoring & Analytics

### 6.1 Application Monitoring
- **Error tracking**: Sentry integration
- **Performance monitoring**: APM metrics
- **Uptime monitoring**: 99.9% SLA
- **Log aggregation**: Structured logging

### 6.2 Business Analytics
- **Job posting trends**: Category-wise analytics
- **User engagement**: Click-through rates
- **Source performance**: Scraping success rates
- **Geographic insights**: Location-based analytics

## 7. Deployment & Infrastructure

### 7.1 Container Configuration
```dockerfile
FROM python:3.11-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY . .
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
```

### 7.2 Environment Configuration
```yaml
version: '3.8'
services:
  app:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://user:pass@postgres:5432/yotcrew
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=yotcrew
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pass

  redis:
    image: redis:7-alpine
```

## 8. Testing Strategy

### 8.1 Test Coverage Requirements
- **Unit tests**: 80% minimum coverage
- **Integration tests**: API endpoints
- **E2E tests**: Critical user flows
- **Performance tests**: Load testing

## 9. Success Metrics

### 9.1 Key Performance Indicators
- **Daily active users**: 500+ within 3 months
- **Job discovery rate**: 100+ new jobs daily
- **User engagement**: 5+ page views per session
- **Search success rate**: 70% click-through
- **System uptime**: 99.9% availability

---

This comprehensive specification provides the foundation for building YotCrew.app as a world-class yacht job aggregation platform.
</code>

DesignSpecs/daywork123_scraper_spec.md:
<code>
# Daywork123.com Scraping Module Specification
## Version 2.0 - 2025 Best Practices Implementation

### Executive Summary
This specification outlines the development of a robust, production-grade scraping module for Daywork123.com that integrates seamlessly with the existing YotCrew.app platform. The module implements 2025 best practices including AI-powered anti-detection, distributed scraping, real-time monitoring, and GDPR-compliant data handling.

---

## 1. Architecture Overview

### 1.1 System Architecture
```mermaid
graph TD
    A[Daywork123 Scraper] --> B[Scraping Orchestrator]
    B --> C[Anti-Detection Layer]
    C --> D[Rate Limiting & Throttling]
    D --> E[Content Parser]
    E --> F[Data Normalizer]
    F --> G[Quality Validator]
    G --> H[Database Integration]
    H --> I[Real-time Monitoring]
    
    J[Proxy Pool] --> C
    K[User-Agent Rotation] --> C
    L[CAPTCHA Solver] --> C
    M[Error Recovery] --> B
```

### 1.2 Technology Stack
- **Core Framework**: Python 3.11+ with asyncio
- **HTTP Client**: httpx with HTTP/2 support
- **Browser Automation**: Playwright (headless Chromium/Firefox)
- **Anti-Detection**: Undetected ChromeDriver + stealth plugins
- **Data Processing**: Pydantic v2 for validation
- **Caching**: Redis with TTL policies
- **Monitoring**: Prometheus metrics + Grafana dashboards
- **Logging**: Structured logging with ELK stack integration

---

## 2. Data Schema & Mapping

### 2.1 Daywork123.com Data Structure Analysis
Based on current Daywork123.com structure (2025):

| Field | Type | Mapping | Notes |
|-------|------|---------|--------|
| job_title | string | title | Primary job title |
| company_name | string | company | Yacht/company name |
| location | string | location | Port/marina location |
| vessel_type | enum | vessel_type | Motor/Sailing yacht |
| vessel_size | string | vessel_size | Length in meters |
| job_category | enum | department | Deck/Interior/Engineering/Galley |
| employment_type | enum | job_type | Permanent/Rotational/Daywork |
| salary_range | string | salary_range | Compensation details |
| start_date | date | start_date | Job start date |
| description_html | html | description | Full job description |
| requirements | array | requirements | Parsed from description |
| benefits | array | benefits | Parsed from description |
| posted_date | datetime | posted_at | Original posting date |
| external_id | string | external_id | Daywork123 job ID |
| source_url | url | source_url | Original job URL |
| is_daywork | boolean | is_daywork | True for daywork positions |

### 2.2 Enhanced Data Model Extensions
```python
class DayworkJob(BaseModel):
    """Extended job model for Daywork123 specific fields"""
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    external_id: str = Field(..., index=True)
    title: str = Field(..., min_length=3, max_length=200)
    company: str = Field(..., max_length=100)
    location: Location = Field(...)
    vessel: VesselInfo = Field(...)
    employment: EmploymentDetails = Field(...)
    compensation: Compensation = Field(...)
    schedule: Schedule = Field(...)
    requirements: List[str] = Field(default_factory=list)
    benefits: List[str] = Field(default_factory=list)
    description: str = Field(..., min_length=50)
    source_url: HttpUrl
    scraped_at: datetime = Field(default_factory=datetime.utcnow)
    quality_score: float = Field(default=0.0, ge=0.0, le=1.0)
    ai_enriched: bool = Field(default=False)
    compliance_flags: List[str] = Field(default_factory=list)
```

---

## 3. Scraping Strategy

### 3.1 Multi-Layer Anti-Detection System
```python
class AntiDetectionConfig:
    """Configuration for anti-detection measures"""
    browser_fingerprinting: bool = True
    canvas_noise: bool = True
    webgl_noise: bool = True
    user_agent_rotation: bool = True
    proxy_rotation: bool = True
    request_timing_randomization: bool = True
    behavioral_mimicry: bool = True
```

### 3.2 Scraping Patterns
- **Initial Discovery**: Sitemap-based discovery + pagination
- **Incremental Updates**: Delta scraping with change detection
- **Deep Scraping**: Individual job page analysis
- **Real-time Monitoring**: WebSocket-based job alerts

### 3.3 Rate Limiting Strategy
```python
class RateLimitConfig:
    """Rate limiting configuration"""
    requests_per_minute: int = 30
    requests_per_hour: int = 500
    concurrent_requests: int = 3
    backoff_strategy: str = "exponential"
    max_retries: int = 5
    base_delay: float = 2.0
```

---

## 4. Implementation Details

### 4.1 Core Scraper Class
```python
class Daywork123Scraper:
    """Production-grade Daywork123.com scraper"""
    
    def __init__(self, config: ScrapingConfig):
        self.config = config
        self.session = self._create_session()
        self.parser = DayworkParser()
        self.validator = DataValidator()
        self.monitor = ScrapingMonitor()
        
    async def scrape_jobs(self, 
                         start_date: Optional[datetime] = None,
                         end_date: Optional[datetime] = None,
                         categories: List[str] = None) -> AsyncIterator[Job]:
        """Scrape jobs with async streaming"""
        
    async def _handle_pagination(self, 
                               start_url: str) -> AsyncIterator[str]:
        """Handle pagination with intelligent stopping"""
        
    async def _scrape_job_detail(self, 
                               job_url: str) -> Optional[Job]:
        """Scrape individual job with retry logic"""
```

### 4.2 Content Parser
```python
class DayworkParser:
    """AI-enhanced content parser for Daywork123"""
    
    def __init__(self):
        self.nlp = spacy.load("en_core_web_sm")
        self.salary_parser = SalaryParser()
        self.location_parser = LocationParser()
        
    def parse_job(self, html: str, url: str) -> DayworkJob:
        """Parse job from HTML with AI enrichment"""
        
    def extract_requirements(self, description: str) -> List[str]:
        """Extract structured requirements using NLP"""
        
    def parse_salary(self, salary_text: str) -> Compensation:
        """Parse salary with currency detection"""
```

---

## 5. Error Handling & Recovery

### 5.1 Error Classification
| Error Type | Strategy | Retry Count | Backoff |
|------------|----------|-------------|---------|
| Network Timeout | Exponential backoff | 5 | 2^n seconds |
| HTTP 429 | Linear backoff | 10 | 60s increments |
| HTTP 403 | Proxy rotation | 3 | Immediate |
| CAPTCHA | Solver service | 1 | Manual review |
| Parse Error | Skip & log | 0 | N/A |

### 5.2 Circuit Breaker Pattern
```python
class CircuitBreaker:
    def __init__(self, failure_threshold: int = 5, timeout: int = 300):
        self.failure_threshold = failure_threshold
        self.timeout = timeout
        self.failure_count = 0
        self.last_failure_time = None
        self.state = "closed"  # closed, open, half-open
```

---

## 6. Data Quality & Validation

### 6.1 Quality Scoring Algorithm
```python
def calculate_quality_score(job: DayworkJob) -> float:
    """Calculate data quality score (0-1)"""
    score = 0.0
    
    # Completeness (40%)
    required_fields = ['title', 'company', 'location', 'description']
    completeness = sum(1 for field in required_fields if getattr(job, field)) / len(required_fields)
    score += completeness * 0.4
    
    # Accuracy (30%)
    accuracy_checks = [
        validate_location(job.location),
        validate_salary(job.compensation),
        validate_url(job.source_url)
    ]
    accuracy = sum(accuracy_checks) / len(accuracy_checks)
    score += accuracy * 0.3
    
    # Freshness (20%)
    days_old = (datetime.utcnow() - job.posted_at).days
    freshness = max(0, 1 - (days_old / 30))
    score += freshness * 0.2
    
    # Consistency (10%)
    consistency = validate_consistency(job)
    score += consistency * 0.1
    
    return min(1.0, score)
```

### 6.2 Data Validation Rules
- **Location**: Must be valid port/marina in yacht industry database
- **Salary**: Must be within reasonable ranges for position type
- **Dates**: Posted date cannot be in future, start date reasonable
- **URLs**: Must be valid Daywork123.com URLs
- **Text**: No spam/malicious content, profanity filtering

---

## 7. Monitoring & Observability

### 7.1 Key Metrics
```yaml
metrics:
  scraping:
    jobs_per_hour: counter
    success_rate: gauge
    average_response_time: histogram
    error_rate: gauge
    
  data_quality:
    average_quality_score: gauge
    validation_failures: counter
    duplicate_detection: counter
    
  system:
    memory_usage: gauge
    cpu_usage: gauge
    active_connections: gauge
```

### 7.2 Alerting Rules
- **High Error Rate**: >5% errors in 5-minute window
- **Quality Drop**: Average quality score <0.7
- **Scraping Stalled**: No new jobs in 2 hours
- **Resource Exhaustion**: Memory usage >80%

---

## 8. Deployment & Infrastructure

### 8.1 Docker Configuration
```dockerfile
FROM python:3.11-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    chromium-browser \
    chromium-chromedriver \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application
COPY . /app
WORKDIR /app

# Run scraper
CMD ["python", "-m", "scrapers.daywork123"]
```

### 8.2 Kubernetes Deployment
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: daywork123-scraper
spec:
  replicas: 3
  selector:
    matchLabels:
      app: daywork123-scraper
  template:
    metadata:
      labels:
        app: daywork123-scraper
    spec:
      containers:
      - name: scraper
        image: yotcrew/daywork123-scraper:latest
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
```

---

## 9. Testing Framework

### 9.1 Test Categories
- **Unit Tests**: Parser functions, validators, utilities
- **Integration Tests**: Full scraping pipeline
- **Performance Tests**: Load testing with 1000+ jobs
- **Regression Tests**: Website structure changes
- **End-to-End Tests**: Complete user journey

### 9.2 Test Data Management
```python
class TestDataManager:
    """Manage test fixtures and mock data"""
    
    def load_mock_html(self, filename: str) -> str:
        """Load mock HTML responses"""
        
    def create_test_job(self, **overrides) -> DayworkJob:
        """Create test job with defaults"""
        
    def simulate_website_change(self, change_type: str):
        """Simulate website structure changes"""
```

---

## 10. Security & Compliance

### 10.1 GDPR Compliance
- **Data Minimization**: Only collect necessary fields
- **Right to be Forgotten**: Automated job removal
- **Data Retention**: 90-day automatic cleanup
- **Consent Management**: Respect robots.txt and terms

### 10.2 Security Measures
- **Input Sanitization**: XSS prevention
- **Rate Limiting**: Prevent DoS attacks
- **API Security**: Token-based authentication
- **Data Encryption**: At-rest and in-transit

---

## 11. Integration Points

### 11.1 Database Integration
```python
class DayworkRepository:
    """Repository pattern for Daywork123 data"""
    
    async def save_job(self, job: DayworkJob) -> str:
        """Save job with deduplication"""
        
    async def get_jobs_by_date_range(self, 
                                   start: datetime, 
                                   end: datetime) -> List[DayworkJob]:
        """Retrieve jobs by date range"""
        
    async def mark_job_inactive(self, external_id: str):
        """Mark job as inactive/removed"""
```

### 11.2 API Integration
- **RESTful Endpoints**: `/api/daywork/jobs`
- **WebSocket**: Real-time job updates
- **GraphQL**: Flexible querying
- **Webhook**: Job change notifications

---

## 12. Performance Optimization

### 12.1 Caching Strategy
- **Redis Cache**: Job listings (TTL: 15 minutes)
- **CDN**: Static assets and images
- **Database**: Query result caching
- **Browser**: Local storage for filters

### 12.2 Scaling Considerations
- **Horizontal Scaling**: Multiple scraper instances
- **Queue Management**: Redis-based job queue
- **Database Sharding**: By date/source
- **CDN Integration**: Global content delivery

---

## 13. Maintenance & Updates

### 13.1 Website Change Detection
- **Automated Monitoring**: Daily structure checks
- **Alert System**: Slack/Email notifications
- **Rollback Strategy**: Previous version fallback
- **A/B Testing**: Gradual rollout of changes

### 13.2 Update Schedule
- **Daily**: Anti-detection measures
- **Weekly**: Parser improvements
- **Monthly**: Performance optimization
- **Quarterly**: Architecture review

---

## 14. Development Roadmap

### Phase 1: Foundation (Week 1-2)
- [ ] Core scraper implementation
- [ ] Basic anti-detection
- [ ] Database integration
- [ ] Unit tests

### Phase 2: Enhancement (Week 3-4)
- [ ] AI-powered parsing
- [ ] Advanced anti-detection
- [ ] Monitoring setup
- [ ] Performance optimization

### Phase 3: Production (Week 5-6)
- [ ] Load testing
- [ ] Security audit
- [ ] Documentation
- [ ] Deployment automation

---

## 15. Success Metrics

### 15.1 KPIs
- **Scraping Success Rate**: >95%
- **Data Quality Score**: >0.85
- **Average Response Time**: <2s
- **Uptime**: >99.5%
- **False Positive Rate**: <2%

### 15.2 Business Impact
- **Job Coverage**: 100% of Daywork123 listings
- **Freshness**: <30 minutes delay
- **User Satisfaction**: >4.5/5 rating
- **Revenue Impact**: 25% increase in user engagement

---

## Appendix A: Environment Variables

```bash
# Scraping Configuration
DAYWORK_BASE_URL=https://www.daywork123.com
DAYWORK_MAX_PAGES=50
DAYWORK_REQUEST_DELAY=2.0
DAYWORK_CONCURRENT_REQUESTS=3

# Anti-Detection
PROXY_POOL_ENABLED=true
USER_AGENT_ROTATION=true
CAPTCHA_SOLVER_API_KEY=your_key_here

# Database
DATABASE_URL=postgresql://user:pass@localhost/yotcrew
REDIS_URL=redis://localhost:6379

# Monitoring
PROMETHEUS_PORT=9090
GRAFANA_DASHBOARD_URL=http://localhost:3000
SLACK_WEBHOOK_URL=https://hooks.slack.com/...

# Security
ENCRYPTION_KEY=your_32_byte_key
API_RATE_LIMIT=1000/hour
```

---

## Appendix B: Quick Start Guide

```bash
# 1. Install dependencies
pip install -r requirements-daywork123.txt

# 2. Configure environment
cp .env.example .env
# Edit .env with your settings

# 3. Run tests
pytest tests/test_daywork123.py -v

# 4. Start scraper
python -m scrapers.daywork123 --config production.yaml

# 5. Monitor results
open http://localhost:3000/dashboard
```

This specification provides a comprehensive blueprint for implementing a state-of-the-art Daywork123.com scraping module that will seamlessly integrate with your existing YotCrew.app platform while maintaining the highest standards of reliability, performance, and compliance.
</code>

DesignSpecs/yotcrew_simple_implementation_plan.md:
<code>
# YotCrew.app - Simple Implementation Plan

## Core Philosophy: Start Simple, Stay Extensible

### 1. Database Setup (SQLite + SQLAlchemy)
- Single SQLite file: `yacht_jobs.db`
- SQLAlchemy ORM for easy PostgreSQL migration later
- No migration scripts needed initially

### 2. Simple Classification System
- Keyword-based classification (regex/simple matching)
- Easy to extend with NLTK later
- Pluggable architecture for new categories

### 3. Scraping Architecture
- Modular scraper classes
- Easy to add new Facebook groups
- Simple configuration-based approach

### 4. Tech Stack (Minimal)
- **Backend**: FastAPI + SQLAlchemy
- **Frontend**: HTMX + Tailwind CSS
- **Database**: SQLite
- **Scraping**: requests + BeautifulSoup

## Implementation Phases

### Phase 1: Core Database (Day 1)
```python
# app/models.py - Simple models
from sqlalchemy import create_engine, Column, String, Integer, DateTime, Text, Boolean
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from datetime import datetime

engine = create_engine("sqlite:///yacht_jobs.db")
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

class Job(Base):
    __tablename__ = "jobs"
    
    id = Column(String, primary_key=True)
    title = Column(String)
    description = Column(Text)
    category = Column(String, index=True)
    company = Column(String)
    location = Column(String)
    salary = Column(String)
    source = Column(String, index=True)
    url = Column(String)
    posted_date = Column(DateTime)
    scraped_at = Column(DateTime, default=datetime.utcnow)
    is_active = Column(Boolean, default=True)
```

### Phase 2: Simple Classifier (Day 2)
```python
# app/classifier.py - Keyword-based
CATEGORY_KEYWORDS = {
    "chef": ["chef", "cook", "culinary", "galley"],
    "stewardess": ["stewardess", "stew", "interior", "service"],
    "engineer": ["engineer", "engineering", "mechanical"],
    "deckhand": ["deckhand", "deck", "bosun", "exterior"],
    "captain": ["captain", "master", "skipper"]
}

def classify_job(title, description):
    text = f"{title} {description}".lower()
    for category, keywords in CATEGORY_KEYWORDS.items():
        if any(keyword in text for keyword in keywords):
            return category
    return "other"
```

### Phase 3: Pluggable Scrapers (Day 3-4)
```python
# app/scrapers/base.py
class BaseScraper:
    def __init__(self, source_name):
        self.source_name = source_name
    
    def scrape(self):
        raise NotImplementedError
    
    def parse_job(self, raw_data):
        raise NotImplementedError

# app/scrapers/yotspot.py
class YotspotScraper(BaseScraper):
    def __init__(self):
        super().__init__("yotspot")
    
    def scrape(self):
        # Yotspot-specific scraping
        pass

# app/scrapers/facebook.py
class FacebookScraper(BaseScraper):
    def __init__(self, group_url):
        super().__init__(f"facebook_{group_url.split('/')[-1]}")
        self.group_url = group_url
    
    def scrape(self):
        # Facebook group scraping
        pass
```

### Phase 4: FastAPI Backend (Day 5)
```python
# main.py - Simple FastAPI
from fastapi import FastAPI, Depends
from sqlalchemy.orm import Session
from app.models import Job, Base
from app.database import SessionLocal, engine

Base.metadata.create_all(bind=engine)

app = FastAPI()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@app.get("/api/jobs")
def get_jobs(category: str = None, db: Session = Depends(get_db)):
    query = db.query(Job)
    if category:
        query = query.filter(Job.category == category)
    return query.all()
```

### Phase 5: Simple Frontend (Day 6)
```html
<!-- templates/index.html -->
<!DOCTYPE html>
<html>
<head>
    <title>YotCrew - Yacht Jobs</title>
    <script src="https://unpkg.com/htmx.org"></script>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mx-auto p-4">
        <h1 class="text-3xl font-bold mb-4">YotCrew Jobs</h1>
        
        <select hx-get="/api/jobs" hx-target="#jobs">
            <option value="">All Categories</option>
            <option value="chef">Chef</option>
            <option value="stewardess">Stewardess</option>
            <option value="engineer">Engineer</option>
        </select>
        
        <div id="jobs" hx-get="/api/jobs" hx-trigger="load">
            <!-- Jobs loaded here -->
        </div>
    </div>
</body>
</html>
```

## Extensibility Points

### 1. Adding New Facebook Groups
```python
# config/groups.py
FACEBOOK_GROUPS = [
    "https://facebook.com/groups/yachtcrewjobs",
    "https://facebook.com/groups/yachtjobs",
    # Add new groups here
]

# Usage
for group_url in FACEBOOK_GROUPS:
    scraper = FacebookScraper(group_url)
    jobs = scraper.scrape()
```

### 2. Adding New Categories
```python
# Just extend CATEGORY_KEYWORDS
CATEGORY_KEYWORDS["first_officer"] = ["first officer", "chief officer", "mate"]
```

### 3. Adding New Sources
```python
# Create new scraper class
class NewSourceScraper(BaseScraper):
    def __init__(self):
        super().__init__("new_source")
    
    def scrape(self):
        # Implementation
        pass
```

## File Structure
```
yotcrew/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ models.py
‚îÇ   ‚îú‚îÄ‚îÄ classifier.py
‚îÇ   ‚îú‚îÄ‚îÄ scrapers/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ base.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ yotspot.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ daywork123.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ facebook.py
‚îÇ   ‚îî‚îÄ‚îÄ database.py
‚îú‚îÄ‚îÄ templates/
‚îÇ   ‚îî‚îÄ‚îÄ index.html
‚îú‚îÄ‚îÄ static/
‚îú‚îÄ‚îÄ main.py
‚îú‚îÄ‚îÄ requirements.txt
‚îî‚îÄ‚îÄ yacht_jobs.db
```

## Next Steps
1. Set up basic database models
2. Implement first scraper (Yotspot)
3. Add simple classification
4. Create basic FastAPI endpoints
5. Build simple frontend
6. Add Facebook group scraping (when you provide URLs)

This plan keeps everything simple but extensible. Each component can be enhanced later without breaking existing functionality.
</code>

DesignSpecs/v0_dashboard_spec.md:
<code>
# Vercel v0 Component Specifications

## **1. Main Dashboard Layout**

**v0 Prompt:**
```
Create a modern real-time social media monitoring dashboard with dark theme. Include:
- Top navigation bar with logo "FB Monitor" and connection status indicator
- Sidebar with navigation: Dashboard, Job Posts, All Posts, Analytics, Settings
- Main content area with grid layout for widgets
- Real-time status badge (online/offline)
- Notification bell icon with badge count
- User avatar dropdown in top right
- Use glassmorphism effects and subtle animations
- Modern typography with proper spacing
- Responsive design for mobile/desktop
```

**Key Features:**
- Sidebar navigation with active states
- Real-time connection status indicator
- Notification center
- Responsive grid layout
- Dark/light theme toggle
- Glassmorphism UI elements

---

## **2. Live Post Feed Component**

**v0 Prompt:**
```
Design a live social media post feed component with:
- Post cards with gradient borders
- Author avatar, name, and timestamp
- Post content with expandable text (show more/less)
- Job post badge with special styling (gradient, pulse animation)
- Engagement metrics (likes, comments, shares)
- Real-time "NEW" indicator for fresh posts
- Smooth fade-in animations for new posts
- Loading skeleton states
- Infinite scroll capability
- Post type indicators (job/regular)
- Action buttons: View on Facebook, Save, Share
```

**Key Features:**
- Animated post cards
- Job post highlighting
- Real-time indicators
- Skeleton loading states
- Expandable content
- Social engagement metrics

---

## **3. Job Post Alert Component**

**v0 Prompt:**
```
Create an urgent job post alert component with:
- Prominent alert card with red/orange gradient background
- Pulsing animation border
- "üö® NEW JOB POST" header with icon
- Job title extraction and highlighting
- Company name if detected
- Salary range if mentioned
- Location (remote/on-site) badges
- "Apply Now" CTA button
- Dismiss/Save for later actions
- Slide-in animation from right
- Auto-dismiss after 10 seconds option
- Sound notification toggle
```

**Key Features:**
- Urgent visual treatment
- Pulsing animations
- Job detail extraction
- CTA buttons
- Auto-dismiss functionality
- Slide animations

---

## **4. Statistics Dashboard Widget**

**v0 Prompt:**
```
Build a comprehensive statistics dashboard with:
- 4 main metric cards: Total Posts, Job Posts, Today's Posts, Active Connections
- Each card with icon, large number, and percentage change
- Mini line charts showing trends
- Color-coded positive/negative changes
- Real-time updating counters with smooth number transitions
- Hover effects with subtle shadows
- Responsive grid layout
- Loading states for each metric
- Time range selector (24h, 7d, 30d)
- Export data button
```

**Key Features:**
- Animated counters
- Trend indicators
- Mini charts
- Time range filtering
- Hover effects
- Real-time updates

---

## **5. Search & Filter Interface**

**v0 Prompt:**
```
Design a powerful search and filter interface featuring:
- Search bar with autocomplete and recent searches
- Filter chips for: Job Posts, Date Range, Author, Post Type
- Sort options: Newest, Oldest, Most Relevant
- Advanced filters panel (collapsible)
- Real-time search results with highlighting
- Search history with clear all option
- Saved searches functionality
- Quick filter buttons for common searches
- Search suggestions based on keywords
- Clear all filters button
```

**Key Features:**
- Advanced search functionality
- Filter chips and tags
- Autocomplete suggestions
- Search history
- Real-time filtering
- Collapsible panels

---

## **6. Real-time Activity Feed**

**v0 Prompt:**
```
Create a real-time activity feed sidebar showing:
- Live stream of activities with timestamps
- Different icons for: New Post, Job Post, Comment, Like
- Activity items with fade-in animations
- Grouping similar activities (e.g., "3 new posts in last 5 minutes")
- Clickable activities to jump to related content
- Activity type color coding
- Compact list view with avatars
- Auto-scroll to latest activity
- Pause/resume feed option
- Activity density indicator
```

**Key Features:**
- Real-time activity stream
- Activity grouping
- Color-coded events
- Auto-scrolling
- Pause/resume controls
- Density indicators

---

## **7. Connection Status Component**

**v0 Prompt:**
```
Build a connection status indicator showing:
- WebSocket connection status with colored dot (green/red/yellow)
- Connection quality indicator (excellent/good/poor)
- Last update timestamp
- Reconnection attempts counter
- Manual reconnect button
- Connection history (connected/disconnected events)
- Ping/latency display
- Network quality visualization
- Offline mode indicator
- Connection troubleshooting tips
```

**Key Features:**
- Real-time status updates
- Connection quality metrics
- Manual reconnection
- Troubleshooting guidance
- Network visualization
- Offline handling

---

## **8. Settings & Configuration Panel**

**v0 Prompt:**
```
Design a settings configuration panel with:
- Notification preferences (sound, desktop, email)
- Job keywords management (add/remove/edit)
- Alert thresholds and filters
- Theme selection (dark/light/auto)
- Language preferences
- Data export options
- Privacy settings
- Account management
- Integration settings (Facebook, webhooks)
- Performance preferences
- Backup and restore options
```

**Key Features:**
- Tabbed interface
- Toggle switches
- Keyword management
- Theme selection
- Data export
- Account settings

---

## **9. Mobile-First Responsive Design**

**v0 Prompt:**
```
Create mobile-optimized versions of all components with:
- Collapsible sidebar that slides over content
- Bottom navigation for mobile
- Swipe gestures for post interactions
- Pull-to-refresh functionality
- Thumb-friendly button sizes
- Optimized touch targets
- Mobile-specific animations
- Reduced motion for battery saving
- Offline indicator and caching
- Mobile notification integration
```

**Key Features:**
- Mobile-first approach
- Touch-friendly interactions
- Swipe gestures
- Pull-to-refresh
- Offline support
- Battery optimization

---

## **10. Loading & Error States**

**v0 Prompt:**
```
Design comprehensive loading and error states:
- Skeleton loading for post cards
- Shimmer effects for data loading
- Progress bars for long operations
- Error boundaries with retry options
- Empty states with helpful illustrations
- Network error messages
- Timeout handling
- Graceful degradation
- Loading state variations
- Success/error toast notifications
```

**Key Features:**
- Skeleton screens
- Shimmer effects
- Error boundaries
- Empty state illustrations
- Toast notifications
- Retry mechanisms

---

## **11. Job Scraping & Aggregation Components**

**v0 Prompt:**
```
Create a job scraping management dashboard with:
- Job source toggle switches (Indeed, LinkedIn, AngelList, Remote.co, etc.)
- Active scraping status indicators with progress bars
- Scraped job cards with source badges and comparison features
- Duplicate job detection and merging interface
- Job matching confidence scores and similarity indicators
- Source reliability ratings and success rates
- Scraping schedule configuration (hourly, daily, custom)
- Job alert rules and keyword management
- Scraped job analytics and trends
- Manual scraping trigger buttons
- Failed scrape retry options
- Data freshness indicators
```

**Key Features:**
- Multi-source job aggregation
- Duplicate detection interface
- Scraping status monitoring
- Job matching algorithms
- Source management
- Analytics dashboard

---

## **12. Job Comparison & Matching Interface**

**v0 Prompt:**
```
Design a job comparison interface featuring:
- Side-by-side job comparison cards
- Similarity score visualization with progress rings
- Highlighted matching keywords and requirements
- Salary comparison charts and ranges
- Company comparison with ratings and reviews
- Location preference matching
- Skills requirement overlap visualization
- Experience level compatibility indicators
- Job application tracking across sources
- Bookmark and save functionality
- Export comparison reports
- Smart recommendation engine results
```

**Key Features:**
- Job comparison matrix
- Similarity scoring
- Salary comparisons
- Skills matching
- Company insights
- Application tracking

---

## **13. Multi-Source Job Feed**

**v0 Prompt:**
```
Create a unified job feed combining multiple sources:
- Unified job cards with source badges (Facebook, Indeed, LinkedIn, etc.)
- Advanced filtering by source, salary, location, date posted
- Job source credibility indicators
- Duplicate job grouping with "Show similar" expandable sections
- Source-specific styling and branding
- Job freshness indicators (new, updated, stale)
- Quick apply buttons with source-specific actions
- Job saving across all sources
- Source performance metrics
- Feed customization preferences
- Bulk actions for multiple jobs
```

**Key Features:**
- Multi-source aggregation
- Duplicate handling
- Source credibility
- Unified interface
- Bulk operations
- Performance tracking

---

## **14. Scraping Configuration Panel**

**v0 Prompt:**
```
Build a comprehensive scraping configuration interface:
- Job site toggle switches with logos (Indeed, LinkedIn, AngelList, etc.)
- Scraping frequency sliders and schedule pickers
- Keyword and location input fields with autocomplete
- Scraping rate limiting and delay settings
- Proxy configuration and rotation options
- Success rate monitoring and alerts
- Error handling and retry logic settings
- Data quality thresholds and validation rules
- Scraping budget and cost tracking
- Performance optimization settings
- Backup and failover configurations
```

**Key Features:**
- Source configuration
- Schedule management
- Rate limiting controls
- Proxy settings
- Performance monitoring
- Cost tracking

---

## **Component Integration Guidelines**

### **State Management Requirements:**
```javascript
// Global state structure for components
{
  posts: [],
  jobPosts: [],
  connectionStatus: 'connected',
  notifications: [],
  filters: {},
  settings: {},
  realTimeEnabled: true
}
```

### **WebSocket Event Handlers:**
```javascript
// Events to handle in components
- 'new_post': Update post feed
- 'new_job_post': Show job alert
- 'connection_status': Update status indicator
- 'statistics_update': Refresh metrics
- 'error': Show error notification
```

### **Animation Libraries:**
- **Framer Motion** for complex animations
- **Tailwind CSS** for utility-based styling
- **Lucide React** for consistent icons
- **React Hot Toast** for notifications

### **Performance Considerations:**
- Virtual scrolling for large post lists
- Lazy loading for images and media
- Debounced search inputs
- Memoized expensive computations
- Efficient WebSocket message handling

### **Accessibility Features:**
- Keyboard navigation support
- Screen reader compatibility
- High contrast mode
- Focus indicators
- ARIA labels and roles
- Reduced motion preferences
</code>

DesignSpecs/Daywork123_Specifications_Summary.md:
<code>
# üõ•Ô∏è Daywork123.com Scraper Specifications Summary

## üìã Project Overview

This document provides a comprehensive summary of the Daywork123.com scraping module implementation for the YotCrew.app yacht jobs platform, incorporating 2025 best practices and modern scraping technologies.

## üéØ Key Features

### ‚úÖ Completed Components

1. **Daywork123.com Scraper** - Production-ready with anti-detection
2. **Pluggable Architecture** - Extensible for multiple job sources
3. **Yotspot.com Refactor** - Updated to use new architecture
4. **Unified Scraping Service** - Centralized management
5. **Comprehensive Testing** - Full test suite included
6. **Documentation** - Complete setup and usage guides

## üèóÔ∏è Architecture Design

### Pluggable Scraper System
```
app/scrapers/
‚îú‚îÄ‚îÄ base.py              # Base classes and interfaces
‚îú‚îÄ‚îÄ registry.py          # Scraper registration system
‚îú‚îÄ‚îÄ __init__.py          # Package initialization
‚îú‚îÄ‚îÄ daywork123.py        # Daywork123.com scraper
‚îú‚îÄ‚îÄ yotspot.py           # Yotspot.com scraper (refactored)
‚îî‚îÄ‚îÄ services/
    ‚îî‚îÄ‚îÄ scraping_service.py  # Unified service layer
```

### Core Components

#### 1. Base Classes (`app/scrapers/base.py`)
- `BaseScraper`: Abstract base class for all scrapers
- `UniversalJob`: Standardized job data structure
- `JobSource`: Enum for job source identification
- `EmploymentType`, `Department`, `VesselType`: Standardized enums

#### 2. Registry System (`app/scrapers/registry.py`)
- Automatic scraper registration via decorators
- Dynamic scraper discovery
- Health check capabilities

#### 3. Daywork123 Scraper (`app/scrapers/daywork123.py`)
- **Technology**: Playwright with anti-detection
- **Features**:
  - Stealth mode with realistic browser fingerprinting
  - Rate limiting and respectful delays
  - Comprehensive error handling
  - Quality scoring system
  - Support for all job categories

#### 4. Yotspot Refactor (`app/scrapers/yotspot.py`)
- **Technology**: aiohttp for async HTTP requests
- **Features**:
  - Updated to use pluggable architecture
  - Consistent data normalization
  - Enhanced error handling

#### 5. Scraping Service (`app/services/scraping_service.py`)
- Unified interface for all scrapers
- Database integration with deduplication
- Concurrent scraping support
- Comprehensive logging and monitoring

## üîß Technical Specifications

### 2025 Best Practices Implemented

#### Anti-Detection Measures
- **Playwright Stealth Mode**: Realistic browser fingerprinting
- **User Agent Rotation**: Multiple realistic user agents
- **Request Timing**: Human-like delays (2.5s between requests)
- **Viewport Simulation**: 1920x1080 resolution
- **Locale/Timezone**: US English, Eastern timezone

#### Data Quality
- **Quality Scoring**: 0-1 scale based on completeness
- **Data Validation**: Required field checking
- **Normalization**: Consistent job categorization
- **Deduplication**: External ID + source based

#### Performance Optimization
- **Async/Await**: Non-blocking I/O operations
- **Connection Pooling**: Efficient HTTP connections
- **Rate Limiting**: Configurable delays
- **Error Recovery**: Retry mechanisms with backoff

### Supported Job Sources

| Source | Technology | Status | Features |
|--------|------------|--------|----------|
| Daywork123.com | Playwright | ‚úÖ Ready | Anti-detection, stealth mode |
| Yotspot.com | aiohttp | ‚úÖ Ready | Async HTTP, comprehensive parsing |
| Meridian Go | BeautifulSoup | üîÑ Legacy | Existing implementation |

## üìä Data Schema

### Universal Job Structure
```python
class UniversalJob:
    external_id: str          # Source-specific ID
    title: str               # Job title
    company: str             # Hiring company
    source: JobSource        # Source identifier
    source_url: str          # Original URL
    location: str            # Job location
    vessel_type: VesselType  # Motor/Sailing/Catamaran/etc
    employment_type: EmploymentType  # Permanent/Rotational/etc
    department: Department   # Deck/Interior/Engineering/Galley
    salary_range: str        # Salary information
    description: str         # Full job description
    requirements: List[str]  # Parsed requirements
    benefits: List[str]      # Parsed benefits
    posted_date: datetime    # Original posting date
    quality_score: float     # 0-1 data quality score
    raw_data: Dict[str, Any] # Original scraped data
```

## üöÄ Installation & Setup

### Quick Start
```bash
# 1. Install dependencies
pip install -r requirements.txt
playwright install chromium

# 2. Test installation
python test_daywork123_scraper.py

# 3. Run scraper
python -c "from app.services.scraping_service import scrape_daywork123; import asyncio; print(asyncio.run(scrape_daywork123(max_pages=1)))"
```

### Environment Configuration
```bash
# Add to .env
SCRAPER_INTERVAL_MINUTES=45
MAX_SCRAPING_PAGES=5
MIN_REQUEST_DELAY=2.0
MAX_REQUEST_DELAY=5.0
PLAYWRIGHT_HEADLESS=true
```

## üß™ Testing Framework

### Test Coverage
- **Registry Tests**: Scraper registration and discovery
- **Health Checks**: Connection testing for all sources
- **Data Validation**: Schema compliance testing
- **Integration Tests**: End-to-end scraping workflows

### Test Commands
```bash
# Run all tests
python test_daywork123_scraper.py

# Test specific components
python -c "from app.scrapers.registry import ScraperRegistry; print(ScraperRegistry.list_scrapers())"
```

## üìà Monitoring & Logging

### Health Monitoring
- **Connection Tests**: Real-time source availability
- **Error Tracking**: Comprehensive error logging
- **Performance Metrics**: Scraping duration and success rates
- **Data Quality**: Quality score tracking

### Log Configuration
```python
import logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('scraper.log'),
        logging.StreamHandler()
    ]
)
```

## üîí Security & Compliance

### Anti-Detection Features
- **Stealth Browser**: Realistic fingerprinting
- **Rate Limiting**: Respectful request timing
- **User Agent Rotation**: Multiple realistic agents
- **Error Handling**: Graceful failure recovery

### Data Privacy
- **No Personal Data**: Only job listings
- **Source Attribution**: Clear source identification
- **URL Preservation**: Original links maintained

## üîÑ Integration Guide

### Existing System Integration
```python
from app.services.scraping_service import ScrapingService

# In scheduler
async def scheduled_scraping():
    service = ScrapingService()
    results = await service.scrape_all_sources(max_pages=3)
    # Process results...

# In API endpoints
@router.post("/api/scrape/daywork123")
async def scrape_daywork123_endpoint(max_pages: int = 3):
    service = ScrapingService()
    return await service.scrape_source("daywork123", max_pages)
```

## üìä Performance Metrics

### Expected Performance
- **Daywork123.com**: ~2-3 jobs per page
- **Yotspot.com**: ~10-15 jobs per page
- **Processing Time**: ~30-60 seconds per source
- **Memory Usage**: ~50-100MB per scraper

### Scaling Considerations
- **Concurrent Scraping**: Supported via asyncio
- **Rate Limiting**: Configurable delays
- **Error Recovery**: Automatic retry mechanisms
- **Resource Management**: Connection pooling

## üéØ Next Steps

### Immediate Actions
1. **Install Dependencies**: Run setup commands
2. **Test Installation**: Verify with test script
3. **Configure Environment**: Set up .env variables
4. **Run Health Checks**: Verify all sources accessible

### Future Enhancements
- **Additional Sources**: Meridian Go, Crew HQ, etc.
- **Advanced Filtering**: Location, salary, vessel size
- **Real-time Updates**: WebSocket integration
- **Machine Learning**: Job categorization improvements

## üìû Support & Troubleshooting

### Common Issues
- **Playwright Installation**: `playwright install chromium`
- **Permission Errors**: Run as administrator on Windows
- **Connection Issues**: Check internet and website accessibility
- **Database Errors**: Verify database file permissions

### Debug Commands
```bash
# Check scraper registry
python -c "from app.scrapers.registry import ScraperRegistry; print(ScraperRegistry.list_scrapers())"

# Test health checks
python -c "from app.services.scraping_service import ScrapingService; import asyncio; service = ScrapingService(); print(asyncio.run(service.health_check_all()))"
```

## üìã Checklist

### ‚úÖ Completed
- [x] Daywork123.com scraper implementation
- [x] Pluggable architecture design
- [x] Yotspot.com refactor
- [x] Comprehensive testing
- [x] Documentation and setup guides
- [x] Anti-detection measures
- [x] Database integration
- [x] Error handling and monitoring

### üîÑ Ready for Production
- [x] All components tested
- [x] Documentation complete
- [x] Installation guide provided
- [x] Monitoring configured
- [x] Error handling implemented

## üèÅ Conclusion

The Daywork123.com scraping module is now production-ready with:
- **Modern 2025 scraping practices**
- **Comprehensive anti-detection measures**
- **Pluggable architecture for future sources**
- **Complete testing and documentation**
- **Easy integration with existing systems**

The implementation follows industry best practices and provides a solid foundation for expanding to additional job sources in the future.
</code>

app/database.py:
<code>
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import os
from dotenv import load_dotenv

load_dotenv()

# Database URL from environment or default to SQLite
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///./yacht_jobs.db")

# Create engine
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False} if "sqlite" in DATABASE_URL else {})

# Session factory
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Base class for models
Base = declarative_base()

def get_db():
    """Database dependency for FastAPI"""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close() 
</code>

app/scraper.py:
<code>
import requests
from bs4 import BeautifulSoup
import time
import random
import logging
from datetime import datetime
from typing import List, Dict, Any
import re
from urllib.parse import urljoin, urlparse

logger = logging.getLogger(__name__)

class YotspotScraper:
    def __init__(self):
        self.base_url = "https://www.yotspot.com"
        self.search_url = f"{self.base_url}/job-search.html"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        
    def _respectful_delay(self, min_delay: float = 2.0, max_delay: float = 5.0):
        """Add random delay between requests to be respectful"""
        delay = random.uniform(min_delay, max_delay)
        time.sleep(delay)
    
    def _parse_job_card(self, job_element) -> Dict[str, Any]:
        """Parse individual job card from HTML"""
        try:
            job_data = {}
            
            # Extract job title
            title_elem = job_element.find('h3') or job_element.find('h4') or job_element.find('a')
            if title_elem:
                job_data['title'] = title_elem.get_text(strip=True)
                # Extract external ID from URL if present
                if title_elem.find('a'):
                    href = title_elem.find('a').get('href', '')
                    job_id_match = re.search(r'#(\d+)', href)
                    if job_id_match:
                        job_data['external_id'] = job_id_match.group(1)
            
            # Extract job details (usually in list items or divs)
            details = job_element.find_all(['li', 'div', 'span'])
            
            for detail in details:
                text = detail.get_text(strip=True)
                if not text:
                    continue
                
                # Parse different job attributes
                if 'Starting' in text and any(month in text for month in ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']):
                    job_data['start_date'] = text
                elif any(job_type in text for job_type in ['Permanent', 'Temporary', 'Rotational', 'Seasonal', 'Contract']):
                    job_data['job_type'] = text
                elif 'Motor Yacht' in text or 'Sailing Yacht' in text or 'Chase Boat' in text:
                    job_data['vessel_type'] = text
                elif 'm (' in text and 'ft)' in text:  # e.g., "36m (118ft)"
                    job_data['vessel_size'] = text
                elif any(currency in text for currency in ['USD', 'EUR', 'GBP', '$', '‚Ç¨', '¬£']):
                    job_data['salary_range'] = text
                    if 'Per Month' in text or 'per month' in text:
                        job_data['salary_per'] = 'month'
                    elif 'Per Day' in text or 'per day' in text:
                        job_data['salary_per'] = 'day'
                    elif 'Per Year' in text or 'per year' in text:
                        job_data['salary_per'] = 'year'
                elif any(location in text for location in ['United States', 'France', 'Italy', 'Spain', 'Greece', 'Monaco', 'Germany', 'United Kingdom']):
                    job_data['location'] = text
            
            # Extract "View Job" link for source URL
            view_job_link = job_element.find('a', text=re.compile(r'View Job', re.I))
            if view_job_link:
                job_data['source_url'] = urljoin(self.base_url, view_job_link.get('href', ''))
            
            # Set posted date to now if we don't have it
            job_data['posted_at'] = datetime.now()
            
            # Generate external_id if not found
            if 'external_id' not in job_data:
                job_data['external_id'] = f"yotspot_{hash(job_data.get('title', '') + str(job_data['posted_at']))}"
            
            return job_data
            
        except Exception as e:
            logger.error(f"Error parsing job card: {e}")
            return {}
    
    def _extract_job_details(self, job_url: str) -> Dict[str, Any]:
        """Extract detailed job information from job detail page"""
        try:
            self._respectful_delay()
            response = self.session.get(job_url)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            details = {}
            
            # Extract job description
            description_elem = soup.find('div', class_=re.compile(r'description|content|detail'))
            if description_elem:
                details['description'] = description_elem.get_text(strip=True)
            
            # Extract company name
            company_elem = soup.find('div', class_=re.compile(r'company|employer'))
            if company_elem:
                details['company'] = company_elem.get_text(strip=True)
            
            return details
            
        except Exception as e:
            logger.error(f"Error extracting job details from {job_url}: {e}")
            return {}
    
    async def scrape_jobs(self, max_pages: int = 5) -> List[Dict[str, Any]]:
        """Scrape jobs from Yotspot"""
        all_jobs = []
        
        try:
            logger.info("Starting Yotspot scraping...")
            
            for page in range(1, max_pages + 1):
                logger.info(f"Scraping page {page}")
                
                # Add delay between pages
                if page > 1:
                    self._respectful_delay(3.0, 6.0)
                
                # Get page
                params = {'page': page} if page > 1 else {}
                response = self.session.get(self.search_url, params=params)
                response.raise_for_status()
                
                soup = BeautifulSoup(response.content, 'html.parser')
                
                # Find job listings - these might be in various containers
                job_elements = []
                
                # Try different selectors that might contain job listings
                selectors = [
                    'div[class*="job"]',
                    'div[class*="position"]',
                    'div[class*="listing"]',
                    'article',
                    'li[class*="job"]',
                    '.job-card',
                    '.position-card'
                ]
                
                for selector in selectors:
                    elements = soup.select(selector)
                    if elements:
                        job_elements = elements
                        break
                
                # If no specific job containers found, look for elements with "View Job" links
                if not job_elements:
                    view_job_links = soup.find_all('a', text=re.compile(r'View Job', re.I))
                    job_elements = [link.find_parent() for link in view_job_links if link.find_parent()]
                
                logger.info(f"Found {len(job_elements)} job elements on page {page}")
                
                if not job_elements:
                    logger.warning(f"No job elements found on page {page}, stopping")
                    break
                
                # Parse each job
                page_jobs = []
                for job_elem in job_elements:
                    job_data = self._parse_job_card(job_elem)
                    if job_data and job_data.get('title'):
                        # Get additional details if we have a source URL
                        if job_data.get('source_url'):
                            additional_details = self._extract_job_details(job_data['source_url'])
                            job_data.update(additional_details)
                        
                        page_jobs.append(job_data)
                
                all_jobs.extend(page_jobs)
                logger.info(f"Scraped {len(page_jobs)} jobs from page {page}")
                
                # If no jobs found on this page, stop
                if not page_jobs:
                    break
            
            logger.info(f"Scraping completed. Total jobs found: {len(all_jobs)}")
            return all_jobs
            
        except Exception as e:
            logger.error(f"Error during scraping: {e}")
            return all_jobs
    
    def scrape_job_details(self, job_id: str) -> Dict[str, Any]:
        """Scrape detailed information for a specific job"""
        try:
            job_url = f"{self.base_url}/job-detail/{job_id}"
            return self._extract_job_details(job_url)
        except Exception as e:
            logger.error(f"Error scraping job details for {job_id}: {e}")
            return {}
    
    def test_scraping(self) -> Dict[str, Any]:
        """Test the scraper with a single page"""
        try:
            response = self.session.get(self.search_url)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            return {
                "status": "success",
                "url": self.search_url,
                "title": soup.title.get_text() if soup.title else "No title",
                "total_links": len(soup.find_all('a')),
                "view_job_links": len(soup.find_all('a', text=re.compile(r'View Job', re.I)))
            }
        except Exception as e:
            return {
                "status": "error",
                "error": str(e)
            } 
</code>

app/__init__.py:
<code>
# YotCrew.app Package 
</code>

app/models.py:
<code>
from sqlalchemy import Column, Integer, String, DateTime, Text, Boolean, Float, func
from datetime import datetime
from .database import Base
import uuid

class Job(Base):
    __tablename__ = "jobs"
    
    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    external_id = Column(String, unique=True, index=True)  # ID from source website
    title = Column(String, nullable=False)
    company = Column(String)
    location = Column(String)
    vessel_type = Column(String)  # Motor Yacht, Sailing Yacht, etc.
    vessel_size = Column(String)  # 40m+, 50-74m, etc.
    job_type = Column(String)     # Permanent, Temporary, Rotational
    department = Column(String)   # Deck, Interior, Engineering, etc.
    salary_range = Column(String)
    salary_per = Column(String)   # per day, per month, per year
    start_date = Column(String)
    description = Column(Text)
    posted_at = Column(DateTime)
    source_url = Column(String)
    source = Column(String, default="yotspot")
    is_featured = Column(Boolean, default=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    def to_dict(self):
        return {
            "id": self.id,
            "external_id": self.external_id,
            "title": self.title,
            "company": self.company,
            "location": self.location,
            "vessel_type": self.vessel_type,
            "vessel_size": self.vessel_size,
            "job_type": self.job_type,
            "department": self.department,
            "salary_range": self.salary_range,
            "salary_per": self.salary_per,
            "start_date": self.start_date,
            "description": self.description,
            "posted_at": self.posted_at.isoformat() if self.posted_at else None,
            "source_url": self.source_url,
            "source": self.source,
            "is_featured": self.is_featured,
            "created_at": self.created_at.isoformat(),
            "updated_at": self.updated_at.isoformat()
        }

class ScrapingJob(Base):
    __tablename__ = "scraping_jobs"
    
    id = Column(Integer, primary_key=True, index=True)
    status = Column(String, default="pending")  # pending, started, completed, failed
    started_at = Column(DateTime)
    completed_at = Column(DateTime)
    jobs_found = Column(Integer, default=0)
    new_jobs = Column(Integer, default=0)
    error_message = Column(Text)
    scraper_type = Column(String, default="yotspot")
    
    def to_dict(self):
        return {
            "id": self.id,
            "status": self.status,
            "started_at": self.started_at.isoformat() if self.started_at else None,
            "completed_at": self.completed_at.isoformat() if self.completed_at else None,
            "jobs_found": self.jobs_found,
            "new_jobs": self.new_jobs,
            "error_message": self.error_message,
            "scraper_type": self.scraper_type
        } 
</code>

app/scheduler.py:
<code>
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.interval import IntervalTrigger
import logging
from datetime import datetime
from .database import SessionLocal
from .models import Job, ScrapingJob
from .scraper import YotspotScraper

logger = logging.getLogger(__name__)

scheduler = BackgroundScheduler()
scraper = YotspotScraper()

def scheduled_scrape_job():
    """Scheduled function to scrape jobs"""
    db = SessionLocal()
    try:
        logger.info("Starting scheduled job scraping...")
        
        # Create scraping job record
        scraping_job = ScrapingJob(
            status="started",
            started_at=datetime.now(),
            scraper_type="yotspot_scheduled"
        )
        db.add(scraping_job)
        db.commit()
        
        # Run scraper
        jobs_found = []
        try:
            # Note: We need to make this async-compatible or run in sync mode
            import asyncio
            try:
                loop = asyncio.get_event_loop()
            except RuntimeError:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
            
            jobs_found = loop.run_until_complete(scraper.scrape_jobs(max_pages=3))
        except Exception as e:
            logger.error(f"Error in scheduled scraping: {e}")
            jobs_found = []
        
        # Save jobs to database
        new_jobs = 0
        for job_data in jobs_found:
            try:
                existing_job = db.query(Job).filter(Job.external_id == job_data["external_id"]).first()
                if not existing_job:
                    job = Job(**job_data)
                    db.add(job)
                    new_jobs += 1
            except Exception as e:
                logger.error(f"Error saving job: {e}")
                continue
        
        db.commit()
        
        # Update scraping job
        scraping_job.status = "completed"
        scraping_job.completed_at = datetime.now()
        scraping_job.jobs_found = len(jobs_found)
        scraping_job.new_jobs = new_jobs
        db.commit()
        
        logger.info(f"Scheduled scraping completed. Found {len(jobs_found)} jobs, {new_jobs} new")
        
    except Exception as e:
        logger.error(f"Error in scheduled scrape: {e}")
        # Update scraping job with error
        try:
            scraping_job = db.query(ScrapingJob).filter(ScrapingJob.id == scraping_job.id).first()
            if scraping_job:
                scraping_job.status = "failed"
                scraping_job.completed_at = datetime.now()
                scraping_job.error_message = str(e)
                db.commit()
        except:
            pass
    finally:
        db.close()

def start_scheduler():
    """Start the background scheduler"""
    try:
        # Schedule job scraping every 45 minutes
        scheduler.add_job(
            func=scheduled_scrape_job,
            trigger=IntervalTrigger(minutes=45),
            id='scrape_jobs',
                            name='Scrape jobs for YotCrew.app',
            replace_existing=True
        )
        
        scheduler.start()
        logger.info("Scheduler started - jobs will be scraped every 45 minutes")
        
    except Exception as e:
        logger.error(f"Error starting scheduler: {e}")

def stop_scheduler():
    """Stop the background scheduler"""
    try:
        scheduler.shutdown()
        logger.info("Scheduler stopped")
    except Exception as e:
        logger.error(f"Error stopping scheduler: {e}") 
</code>

app/scrapers/__init__.py:
<code>
"""Pluggable scrapers package for yacht job sources"""
from .base import BaseScraper, ScrapingResult, UniversalJob
from .registry import ScraperRegistry, register_scraper

# Import all scrapers - they auto-register via decorators
from .yotspot import YotspotScraper
from .daywork123 import Daywork123Scraper

__all__ = [
    'BaseScraper',
    'ScrapingResult', 
    'UniversalJob',
    'ScraperRegistry',
    'register_scraper'
]
</code>

app/scrapers/registry.py:
<code>
"""Registry for managing pluggable scrapers"""
from typing import Dict, Type, List
from .base import BaseScraper

class ScraperRegistry:
    """Registry for managing pluggable scrapers"""
    
    _scrapers: Dict[str, Type[BaseScraper]] = {}
    
    @classmethod
    def register(cls, scraper_class: Type[BaseScraper]):
        """Register a new scraper"""
        instance = scraper_class()
        cls._scrapers[instance.source_name] = scraper_class
    
    @classmethod
    def get_scraper(cls, source_name: str) -> BaseScraper:
        """Get scraper instance by source name"""
        if source_name not in cls._scrapers:
            raise ValueError(f"Unknown scraper: {source_name}")
        return cls._scrapers[source_name]()
    
    @classmethod
    def list_scrapers(cls) -> List[str]:
        """List all registered scrapers"""
        return list(cls._scrapers.keys())
    
    @classmethod
    def get_all_scrapers(cls) -> List[BaseScraper]:
        """Get instances of all scrapers"""
        return [scraper_class() for scraper_class in cls._scrapers.values()]

# Auto-registration decorator
def register_scraper(cls):
    """Decorator to automatically register scrapers"""
    ScraperRegistry.register(cls)
    return cls
</code>

app/scrapers/yotspot.py:
<code>
"""Yotspot.com scraper refactored for pluggable architecture"""
import asyncio
import logging
import aiohttp
from typing import Dict, Any, Optional, List
from datetime import datetime
import re
from urllib.parse import urljoin

from .base import BaseScraper, UniversalJob, JobSource, EmploymentType, Department, VesselType
from .registry import register_scraper

logger = logging.getLogger(__name__)

@register_scraper
class YotspotScraper(BaseScraper):
    """Refactored Yotspot.com scraper implementing pluggable interface"""
    
    def __init__(self):
        self.config = {
            'max_retries': 3,
            'request_delay': 2.0,
            'timeout': 30,
            'headers': {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                'Accept-Language': 'en-US,en;q=0.5',
                'Accept-Encoding': 'gzip, deflate',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1',
            }
        }
    
    @property
    def source_name(self) -> str:
        return JobSource.YOTSPOT
    
    @property
    def base_url(self) -> str:
        return "https://www.yotspot.com"
    
    async def scrape_jobs(self, max_pages: int = 5, filters: Optional[Dict[str, Any]] = None):
        """Scrape jobs from Yotspot.com using aiohttp"""
        async with aiohttp.ClientSession(
            timeout=aiohttp.ClientTimeout(total=self.config['timeout']),
            headers=self.config['headers']
        ) as session:
            
            for page in range(1, max_pages + 1):
                logger.info(f"Scraping Yotspot page {page}")
                
                try:
                    jobs = await self._scrape_page(session, page, filters)
                    for job in jobs:
                        yield self._normalize_job(job)
                        
                    # Add delay between pages
                    if page < max_pages:
                        await asyncio.sleep(self.config['request_delay'])
                        
                except Exception as e:
                    logger.error(f"Error scraping page {page}: {e}")
                    continue
    
    async def _scrape_page(self, session: aiohttp.ClientSession, page: int, filters: Optional[Dict[str, Any]] = None) -> List[Dict[str, Any]]:
        """Scrape a single page of job listings"""
        url = f"{self.base_url}/job-search.html?page={page}"
        
        # Add filters to URL if provided
        if filters:
            params = []
            if filters.get('location'):
                params.append(f"location={filters['location']}")
            if filters.get('department'):
                params.append(f"department={filters['department']}")
            if params:
                url += "&" + "&".join(params)
        
        try:
            async with session.get(url) as response:
                if response.status != 200:
                    logger.error(f"HTTP {response.status} for {url}")
                    return []
                
                html = await response.text()
                return await self._parse_job_listings(html)
                
        except Exception as e:
            logger.error(f"Error fetching page {page}: {e}")
            return []
    
    async def _parse_job_listings(self, html: str) -> List[Dict[str, Any]]:
        """Parse job listings from HTML"""
        try:
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(html, 'html.parser')
            
            jobs = []
            job_cards = soup.find_all('div', class_='job-item')
            
            if not job_cards:
                # Try alternative selectors
                job_cards = soup.find_all('div', class_=re.compile(r'job-listing|job-card'))
                if not job_cards:
                    job_cards = soup.find_all('article', class_=re.compile(r'job'))
                    if not job_cards:
                        job_cards = soup.find_all('div', attrs={'data-job-id': True})
            
            for card in job_cards:
                job_data = self._extract_job_data(card)
                if job_data:
                    jobs.append(job_data)
            
            return jobs
            
        except Exception as e:
            logger.error(f"Error parsing job listings: {e}")
            return []
    
    def _extract_job_data(self, card) -> Optional[Dict[str, Any]]:
        """Extract job data from a single job card"""
        try:
            job_data = {}
            
            # Job title and URL - look for the position link
            title_elem = card.find('div', class_='job-item__position')
            if title_elem:
                title_link = title_elem.find('a')
                if title_link:
                    job_data['title'] = title_link.get_text(strip=True)
                    job_data['url'] = urljoin(self.base_url, title_link.get('href', ''))
                else:
                    return None
            else:
                return None
            
            # Company name - default for yotspot
            job_data['company'] = "Yotspot"
            
            # Location - extract from job-item__info
            location = "Unknown"
            info_list = card.find('ul', class_='job-item__info')
            if info_list:
                info_items = info_list.find_all('li')
                for item in info_items:
                    item_text = item.get_text(strip=True)
                    # Look for location patterns
                    if any(loc in item_text.lower() for loc in ['miami', 'fort lauderdale', 'caribbean', 'mediterranean', 'europe']):
                        location = item_text
                        break
            
            job_data['location'] = location
            
            # Job type - extract from job-item__info
            job_type = None
            if info_list:
                for item in info_list.find_all('li'):
                    item_text = item.get_text(strip=True)
                    if any(type_word in item_text.lower() for type_word in ['permanent', 'temporary', 'contract', 'seasonal']):
                        job_type = item_text
                        break
            
            job_data['job_type'] = job_type
            
            # Posted date - extract from job-item__info
            posted_date = None
            if info_list:
                for item in info_list.find_all('li'):
                    item_text = item.get_text(strip=True)
                    if 'posted' in item_text.lower() or any(date_indicator in item_text.lower() for date_indicator in ['2024', '2025', 'jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']):
                        posted_date = self._parse_date(item_text)
                        break
            
            job_data['posted_date'] = posted_date
            
            # Salary - extract from job-item__info
            salary = None
            if info_list:
                for item in info_list.find_all('li'):
                    item_text = item.get_text(strip=True)
                    if any(currency in item_text.lower() for currency in ['eur', 'usd', 'gbp', '‚Ç¨', '$', '¬£']):
                        salary = item_text
                        break
            
            job_data['salary'] = salary
            
            # Description - use title as description for now
            job_data['description'] = job_data.get('title', '')
            
            # Extract job ID from URL
            job_data['external_id'] = self._extract_job_id(job_data.get('url', ''))
            
            return job_data
            
        except Exception as e:
            logger.error(f"Error extracting job data: {e}")
            return None
    
    def _extract_job_id(self, url: str) -> str:
        """Extract job ID from URL"""
        if not url:
            return ""
        match = re.search(r'/jobs/(\d+)', url)
        return match.group(1) if match else url
    
    def _parse_date(self, date_text: str) -> Optional[datetime]:
        """Parse posted date from text"""
        if not date_text:
            return None
        
        try:
            from dateparser import parse
            return parse(date_text, settings={'RETURN_AS_TIMEZONE_AWARE': False})
        except:
            return datetime.utcnow()
    
    def _normalize_job(self, raw_job: Dict[str, Any]) -> UniversalJob:
        """Convert raw job data to UniversalJob format"""
        # Parse employment type
        employment_type = self._detect_employment_type(raw_job.get('job_type', ''))
        
        # Parse department
        department = self._detect_department(raw_job.get('title', ''))
        
        # Parse vessel type
        vessel_type = self._detect_vessel_type(raw_job.get('description', ''))
        
        # Calculate quality score
        quality_score = self._calculate_quality_score(raw_job)
        
        return UniversalJob(
            external_id=raw_job.get('external_id', ''),
            title=raw_job.get('title', ''),
            company=raw_job.get('company', ''),
            source=self.source_name,
            source_url=raw_job.get('url', ''),
            location=raw_job.get('location', ''),
            vessel_type=vessel_type,
            employment_type=employment_type,
            department=department,
            salary_range=raw_job.get('salary'),
            description=raw_job.get('description', ''),
            posted_date=raw_job.get('posted_date'),
            quality_score=quality_score,
            raw_data=raw_job
        )
    
    def _detect_employment_type(self, job_type: str) -> Optional[EmploymentType]:
        """Detect employment type from job type text"""
        job_type_lower = job_type.lower() if job_type else ""
        
        if 'permanent' in job_type_lower:
            return EmploymentType.PERMANENT
        elif 'temporary' in job_type_lower:
            return EmploymentType.TEMPORARY
        elif 'rotational' in job_type_lower:
            return EmploymentType.ROTATIONAL
        elif 'seasonal' in job_type_lower:
            return EmploymentType.SEASONAL
        elif 'contract' in job_type_lower:
            return EmploymentType.CONTRACT
        else:
            return EmploymentType.PERMANENT
    
    def _detect_department(self, title: str) -> Optional[Department]:
        """Detect department from job title"""
        title_lower = title.lower() if title else ""
        
        deck_keywords = ['deckhand', 'bosun', 'mate', 'captain', 'officer', 'deck', 'skipper']
        interior_keywords = ['stewardess', 'steward', 'interior', 'housekeeping', 'butler', 'chief stewardess']
        engineering_keywords = ['engineer', 'mechanic', 'eto', 'technical', 'chief engineer']
        galley_keywords = ['chef', 'cook', 'galley', 'kitchen', 'sous chef', 'head chef']
        
        if any(keyword in title_lower for keyword in deck_keywords):
            return Department.DECK
        elif any(keyword in title_lower for keyword in interior_keywords):
            return Department.INTERIOR
        elif any(keyword in title_lower for keyword in engineering_keywords):
            return Department.ENGINEERING
        elif any(keyword in title_lower for keyword in galley_keywords):
            return Department.GALLEY
        else:
            return Department.OTHER
    
    def _detect_vessel_type(self, description: str) -> Optional[VesselType]:
        """Detect vessel type from description"""
        desc_lower = description.lower() if description else ""
        
        if 'sailing' in desc_lower or 'sail' in desc_lower:
            return VesselType.SAILING_YACHT
        elif 'catamaran' in desc_lower:
            return VesselType.CATAMARAN
        elif 'superyacht' in desc_lower or 'super yacht' in desc_lower:
            return VesselType.SUPER_YACHT
        elif 'expedition' in desc_lower:
            return VesselType.EXPEDITION
        else:
            return VesselType.MOTOR_YACHT
    
    def _calculate_quality_score(self, job: Dict[str, Any]) -> float:
        """Calculate data quality score (0-1)"""
        score = 0.0
        
        # Completeness (60%)
        required_fields = ['title', 'company', 'location', 'description']
        completeness = sum(1 for field in required_fields if job.get(field)) / len(required_fields)
        score += completeness * 0.6
        
        # URL validity (20%)
        if job.get('url') and job.get('external_id'):
            score += 0.2
        
        # Description length (20%)
        description = job.get('description', '')
        if len(description) > 200:
            score += 0.2
        elif len(description) > 100:
            score += 0.1
        
        return min(1.0, score)
    
    async def test_connection(self) -> bool:
        """Test Yotspot.com accessibility"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(self.base_url, timeout=10) as response:
                    return response.status == 200
        except Exception as e:
            logger.error(f"Connection test failed: {e}")
            return False
    
    def get_supported_filters(self) -> List[str]:
        """Return supported filter parameters"""
        return ["location", "department", "vessel_type", "salary_range", "experience_level"]
</code>

app/scrapers/daywork123.py:
<code>
"""Daywork123.com scraper with anti-detection measures"""
import asyncio
import logging
from typing import Dict, Any, Optional, List, AsyncIterator
from datetime import datetime
import re
from urllib.parse import urljoin, urlparse

try:
    from playwright.async_api import async_playwright, Browser, Page
    PLAYWRIGHT_AVAILABLE = True
except ImportError:
    PLAYWRIGHT_AVAILABLE = False
    logging.warning("Playwright not available. Install with: pip install playwright")

from .base import BaseScraper, UniversalJob, JobSource, EmploymentType, Department, VesselType
from .registry import register_scraper

logger = logging.getLogger(__name__)

@register_scraper
class Daywork123Scraper(BaseScraper):
    """Production-grade Daywork123.com scraper with anti-detection"""
    
    def __init__(self):
        self.config = {
            'max_retries': 3,
            'request_delay': 2.5,
            'user_agents': [
                'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
            ]
        }
    
    @property
    def source_name(self) -> str:
        return JobSource.DAYWORK123
    
    @property
    def base_url(self) -> str:
        return "https://www.daywork123.com"
    
    async def scrape_jobs(self, 
                         max_pages: int = 5,
                         filters: Optional[Dict[str, Any]] = None) -> AsyncIterator[UniversalJob]:
        """Scrape jobs from Daywork123.com"""
        logger.info(f"Starting Daywork123 scraper for {max_pages} pages")
        
        try:
            from playwright.async_api import async_playwright
            
            async with async_playwright() as p:
                browser = await p.chromium.launch(headless=True)
                context = await browser.new_context(
                    user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                )
                page = await context.new_page()
                
                # Navigate to jobs page
                await page.goto(f"{self.base_url}/JobAnnouncementList.aspx", wait_until='networkidle')
                
                for page_num in range(1, max_pages + 1):
                    logger.info(f"Scraping Daywork123 page {page_num}")
                    
                    if page_num > 1:
                        # Navigate to next page
                        next_url = f"{self.base_url}/JobAnnouncementList.aspx?page={page_num}"
                        await page.goto(next_url, wait_until='networkidle')
                    
                    # Wait for job listings to load (table structure)
                    await page.wait_for_selector('#ContentPlaceHolder1_RepJobAnnouncement', timeout=10000)
                    
                    # Extract job listings from table rows
                    job_elements = await page.query_selector_all('#ContentPlaceHolder1_RepJobAnnouncement tr:not(.head)')
                    
                    # Extract all job data immediately to avoid context issues
                    jobs_found = 0
                    for element in job_elements:
                        try:
                            job_data = await self._extract_job_from_element(element, page)
                            if job_data:
                                # Convert to UniversalJob and yield
                                universal_job = UniversalJob(**job_data)
                                yield universal_job
                                jobs_found += 1
                        except Exception as e:
                            logger.error(f"Error extracting job element: {e}")
                            continue
                    
                    logger.info(f"Page {page_num}: Found {jobs_found} jobs")
                    
                    if jobs_found == 0:
                        logger.warning(f"No jobs found on page {page_num}, stopping pagination")
                        break
                    
                    # Add delay between pages
                    if page_num < max_pages:
                        await asyncio.sleep(2)
                
                await browser.close()
                
        except Exception as e:
            logger.error(f"Error in Daywork123 scraper: {e}")
            raise
    
    async def _extract_job_from_element(self, element, page) -> Optional[Dict[str, Any]]:
        """Extract job data from a single job element (table row)"""
        try:
            # Extract all data immediately to avoid context issues
            cells = await element.query_selector_all('td')
            if len(cells) < 3:  # Need at least ID, title, and other info
                return None
            
            # Extract all text content immediately
            cell_texts = []
            for cell in cells:
                try:
                    text = await cell.text_content()
                    cell_texts.append(text.strip() if text else "")
                except Exception:
                    cell_texts.append("")
            
            if len(cell_texts) < 3:
                return None
            
            # Extract job ID from first cell
            job_id = cell_texts[0] if cell_texts else ""
            
            # Extract title and link from second cell
            title_cell = cells[1] if len(cells) > 1 else None
            if not title_cell:
                return None
            
            # Try to get the link from the title cell
            try:
                link_elem = await title_cell.query_selector('a')
                if link_elem:
                    href = await link_elem.get_attribute('href')
                    job_url = urljoin(self.base_url, href) if href else ""
                    title = cell_texts[1] if len(cell_texts) > 1 else ""
                else:
                    job_url = ""
                    title = cell_texts[1] if len(cell_texts) > 1 else ""
            except Exception:
                job_url = ""
                title = cell_texts[1] if len(cell_texts) > 1 else ""
            
            if not title:
                return None
            
            # Extract other information from remaining cells
            location = cell_texts[2] if len(cell_texts) > 2 else ""
            company = "Daywork123"  # Default company name
            date_posted = cell_texts[4] if len(cell_texts) > 4 else ""
            
            # Try to extract company name from the job description if it's short enough
            if len(cell_texts) > 3 and cell_texts[3]:
                potential_company = cell_texts[3][:50]  # Limit to 50 chars
                if len(potential_company) <= 100:
                    company = potential_company
            
            # Create job data
            job_data = {
                'external_id': f"dw123_{job_id}",
                'title': title,
                'company': company,
                'source': JobSource.DAYWORK123,
                'source_url': job_url if job_url else f"{self.base_url}/JobAnnouncementList.aspx",
                'location': location,
                'date_posted': date_posted,
                'description': f"Job ID: {job_id}",
                'employment_type': None,
                'department': None,
                'vessel_type': None,
                'salary_min': None,
                'salary_max': None,
                'salary_currency': None,
                'requirements': [],
                'benefits': [],
                'contact_info': {}
            }
            
            return job_data
            
        except Exception as e:
            logger.error(f"Error extracting job element: {e}")
            return None
    
    async def _get_job_details(self, job_url: str, page) -> Dict[str, Any]:
        """Get detailed job information from job page"""
        try:
            await page.goto(job_url, wait_until='networkidle')
            
            # Extract detailed description
            desc_elem = await page.query_selector('.job-details, .full-description')
            full_description = await desc_elem.text_content() if desc_elem else ""
            
            # Extract requirements
            req_elem = await page.query_selector('.requirements, .job-requirements')
            requirements_text = await req_elem.text_content() if req_elem else ""
            requirements = self._parse_requirements(requirements_text)
            
            # Extract benefits
            benefits_elem = await page.query_selector('.benefits, .job-benefits')
            benefits_text = await benefits_elem.text_content() if benefits_elem else ""
            benefits = self._parse_benefits(benefits_text)
            
            # Extract vessel info
            vessel_elem = await page.query_selector('.vessel-info, .yacht-details')
            vessel_info = await vessel_elem.text_content() if vessel_elem else ""
            
            return {
                'full_description': full_description,
                'requirements': requirements,
                'benefits': benefits,
                'vessel_info': vessel_info
            }
            
        except Exception as e:
            logger.error(f"Error getting job details: {e}")
            return {}
    
    def _normalize_job(self, raw_job: Dict[str, Any]) -> UniversalJob:
        """Convert raw job data to UniversalJob format"""
        # Parse employment type
        employment_type = self._detect_employment_type(raw_job.get('title', ''))
        
        # Parse department
        department = self._detect_department(raw_job.get('title', ''))
        
        # Parse vessel type
        vessel_type = self._detect_vessel_type(raw_job.get('vessel_info', ''))
        
        # Calculate quality score
        quality_score = self._calculate_quality_score(raw_job)
        
        return UniversalJob(
            external_id=raw_job.get('external_id', ''),
            title=raw_job.get('title', ''),
            company=raw_job.get('company', ''),
            source=self.source_name,
            source_url=raw_job.get('url', ''),
            location=raw_job.get('location', ''),
            vessel_type=vessel_type,
            employment_type=employment_type,
            department=department,
            salary_range=raw_job.get('salary'),
            description=raw_job.get('full_description', raw_job.get('description', '')),
            requirements=raw_job.get('requirements', []),
            benefits=raw_job.get('benefits', []),
            posted_date=raw_job.get('posted_date'),
            quality_score=quality_score,
            raw_data=raw_job
        )
    
    def _extract_job_id(self, url: str) -> str:
        """Extract job ID from URL"""
        if not url:
            return ""
        match = re.search(r'/jobs/(\d+)', url)
        return match.group(1) if match else url
    
    def _parse_date(self, date_text: str) -> Optional[datetime]:
        """Parse posted date from text"""
        if not date_text:
            return None
        
        # Handle relative dates like "2 days ago", "1 week ago"
        import dateparser
        try:
            return dateparser.parse(date_text, settings={'RETURN_AS_TIMEZONE_AWARE': False})
        except:
            return datetime.utcnow()
    
    def _parse_requirements(self, text: str) -> List[str]:
        """Parse requirements from text"""
        if not text:
            return []
        
        # Split by common delimiters
        requirements = re.split(r'[‚Ä¢¬∑\-\n]', text)
        return [req.strip() for req in requirements if req.strip()]
    
    def _parse_benefits(self, text: str) -> List[str]:
        """Parse benefits from text"""
        if not text:
            return []
        
        benefits = re.split(r'[‚Ä¢¬∑\-\n]', text)
        return [benefit.strip() for benefit in benefits if benefit.strip()]
    
    def _detect_employment_type(self, title: str) -> Optional[EmploymentType]:
        """Detect employment type from job title"""
        title_lower = title.lower()
        
        if any(word in title_lower for word in ['daywork', 'day work', 'daily']):
            return EmploymentType.DAYWORK
        elif any(word in title_lower for word in ['rotational', 'rotation']):
            return EmploymentType.ROTATIONAL
        elif any(word in title_lower for word in ['seasonal', 'season']):
            return EmploymentType.SEASONAL
        elif any(word in title_lower for word in ['contract', 'temporary']):
            return EmploymentType.TEMPORARY
        else:
            return EmploymentType.PERMANENT
    
    def _detect_department(self, title: str) -> Optional[Department]:
        """Detect department from job title"""
        title_lower = title.lower()
        
        deck_keywords = ['deckhand', 'bosun', 'mate', 'captain', 'officer', 'deck']
        interior_keywords = ['stewardess', 'steward', 'interior', 'housekeeping', 'butler']
        engineering_keywords = ['engineer', 'mechanic', 'eto', 'technical']
        galley_keywords = ['chef', 'cook', 'galley', 'kitchen']
        
        if any(keyword in title_lower for keyword in deck_keywords):
            return Department.DECK
        elif any(keyword in title_lower for keyword in interior_keywords):
            return Department.INTERIOR
        elif any(keyword in title_lower for keyword in engineering_keywords):
            return Department.ENGINEERING
        elif any(keyword in title_lower for keyword in galley_keywords):
            return Department.GALLEY
        else:
            return Department.OTHER
    
    def _detect_vessel_type(self, text: str) -> Optional[VesselType]:
        """Detect vessel type from text"""
        text_lower = text.lower()
        
        if 'sailing' in text_lower or 'sail' in text_lower:
            return VesselType.SAILING_YACHT
        elif 'catamaran' in text_lower:
            return VesselType.CATAMARAN
        elif 'superyacht' in text_lower or 'super yacht' in text_lower:
            return VesselType.SUPER_YACHT
        elif 'expedition' in text_lower:
            return VesselType.EXPEDITION
        else:
            return VesselType.MOTOR_YACHT
    
    def _calculate_quality_score(self, job: Dict[str, Any]) -> float:
        """Calculate data quality score (0-1)"""
        score = 0.0
        
        # Completeness (60%)
        required_fields = ['title', 'company', 'location', 'description']
        completeness = sum(1 for field in required_fields if job.get(field)) / len(required_fields)
        score += completeness * 0.6
        
        # URL validity (20%)
        if job.get('url') and job.get('external_id'):
            score += 0.2
        
        # Description length (20%)
        description = job.get('description', '')
        if len(description) > 100:
            score += 0.2
        elif len(description) > 50:
            score += 0.1
        
        return min(1.0, score)
    
    async def test_connection(self) -> bool:
        """Test Daywork123.com accessibility"""
        if not PLAYWRIGHT_AVAILABLE:
            return False
        
        try:
            async with async_playwright() as p:
                browser = await p.chromium.launch(headless=True)
                context = await browser.new_context()
                page = await context.new_page()
                
                response = await page.goto(self.base_url, timeout=10000)
                await browser.close()
                
                return response.status == 200
        except Exception as e:
            logger.error(f"Connection test failed: {e}")
            return False
    
    def get_supported_filters(self) -> List[str]:
        """Return supported filter parameters"""
        return ["location", "date_range", "job_type", "vessel_size", "salary_range"]
</code>

app/scrapers/base.py:
<code>
"""Base scraper interface for pluggable architecture"""
from abc import ABC, abstractmethod
from typing import List, Dict, Any, AsyncIterator, Optional
from datetime import datetime
from pydantic import BaseModel, Field, HttpUrl
from enum import Enum

class JobSource(str, Enum):
    """Supported job sources"""
    YOTSPOT = "yotspot"
    DAYWORK123 = "daywork123"
    MERIDIAN_GO = "meridian_go"

class EmploymentType(str, Enum):
    """Employment types across all sources"""
    PERMANENT = "permanent"
    TEMPORARY = "temporary"
    ROTATIONAL = "rotational"
    DAYWORK = "daywork"
    SEASONAL = "seasonal"
    CONTRACT = "contract"

class Department(str, Enum):
    """Yacht departments"""
    DECK = "deck"
    INTERIOR = "interior"
    ENGINEERING = "engineering"
    GALLEY = "galley"
    BRIDGE = "bridge"
    OTHER = "other"

class VesselType(str, Enum):
    """Types of vessels"""
    MOTOR_YACHT = "motor_yacht"
    SAILING_YACHT = "sailing_yacht"
    CATAMARAN = "catamaran"
    SUPER_YACHT = "super_yacht"
    EXPEDITION = "expedition"
    CHASE_BOAT = "chase_boat"

class UniversalJob(BaseModel):
    """Standardized job format across all sources"""
    
    # Required fields
    external_id: str = Field(..., description="Unique ID from source")
    title: str = Field(..., min_length=3, max_length=200)
    company: str = Field(..., max_length=100)
    source: JobSource
    source_url: HttpUrl
    
    # Location
    location: str = Field(..., max_length=100)
    country: Optional[str] = None
    region: Optional[str] = None
    
    # Vessel information
    vessel_type: Optional[VesselType] = None
    vessel_size: Optional[str] = None
    vessel_name: Optional[str] = None
    
    # Employment details
    employment_type: Optional[EmploymentType] = None
    department: Optional[Department] = None
    position_level: Optional[str] = None
    
    # Compensation
    salary_range: Optional[str] = None
    salary_currency: Optional[str] = None
    salary_period: Optional[str] = None
    
    # Timing
    start_date: Optional[str] = None
    posted_date: Optional[datetime] = None
    
    # Content
    description: str = Field(..., min_length=10)
    requirements: List[str] = Field(default_factory=list)
    benefits: List[str] = Field(default_factory=list)
    
    # Metadata
    scraped_at: datetime = Field(default_factory=datetime.utcnow)
    quality_score: float = Field(default=0.0, ge=0.0, le=1.0)
    raw_data: Optional[Dict[str, Any]] = None
    
    class Config:
        use_enum_values = True

class ScrapingResult(BaseModel):
    """Result from scraping operation"""
    source: str
    jobs_found: int
    new_jobs: int
    updated_jobs: int
    errors: List[str] = Field(default_factory=list)
    duration: float
    timestamp: datetime = Field(default_factory=datetime.utcnow)

class BaseScraper(ABC):
    """Abstract base class for all scrapers"""
    
    @property
    @abstractmethod
    def source_name(self) -> str:
        """Unique identifier for this scraper"""
        pass
    
    @property
    @abstractmethod
    def base_url(self) -> str:
        """Base URL of the source website"""
        pass
    
    @abstractmethod
    async def scrape_jobs(self, 
                         max_pages: int = 5,
                         filters: Optional[Dict[str, Any]] = None) -> AsyncIterator[UniversalJob]:
        """Scrape jobs and yield standardized job data"""
        pass
    
    @abstractmethod
    async def test_connection(self) -> bool:
        """Test if the source is accessible"""
        pass
    
    @abstractmethod
    def get_supported_filters(self) -> List[str]:
        """Return list of supported filter parameters"""
        pass
    
    async def health_check(self) -> Dict[str, Any]:
        """Health check for monitoring"""
        return {
            "source": self.source_name,
            "accessible": await self.test_connection(),
            "last_scrape": None,
            "status": "healthy" if await self.test_connection() else "unhealthy"
        }
</code>

app/services/scraping_service.py:
<code>
"""Unified scraping service for managing all scrapers"""
import asyncio
import logging
from typing import List, Dict, Any, Optional
from datetime import datetime
from sqlalchemy.orm import Session

from app.scrapers.registry import ScraperRegistry
from app.scrapers.base import UniversalJob
from app.database import SessionLocal
from app.models import Job

logger = logging.getLogger(__name__)

class ScrapingService:
    """Unified service for managing all scrapers"""
    
    def __init__(self):
        self.registry = ScraperRegistry()
    
    async def scrape_source(self, source_name: str, max_pages: int = 5) -> Dict[str, Any]:
        """Scrape a specific source"""
        try:
            scraper = self.registry.get_scraper(source_name)
            
            start_time = datetime.utcnow()
            jobs_found = 0
            new_jobs = 0
            updated_jobs = 0
            errors = []
            
            # Collect all jobs
            jobs = []
            async for job in scraper.scrape_jobs(max_pages=max_pages):
                jobs.append(job)
                jobs_found += 1
            
            # Save to database
            if jobs:
                new_jobs, updated_jobs = await self._save_jobs(jobs)
            
            duration = (datetime.utcnow() - start_time).total_seconds()
            
            result = {
                "source": source_name,
                "jobs_found": jobs_found,
                "new_jobs": new_jobs,
                "updated_jobs": updated_jobs,
                "errors": errors,
                "duration": duration,
                "timestamp": datetime.utcnow()
            }
            
            logger.info(f"Scraped {source_name}: {jobs_found} found, {new_jobs} new, {updated_jobs} updated")
            return result
            
        except Exception as e:
            logger.error(f"Error scraping {source_name}: {e}")
            return {
                "source": source_name,
                "jobs_found": 0,
                "new_jobs": 0,
                "updated_jobs": 0,
                "errors": [str(e)],
                "duration": 0,
                "timestamp": datetime.utcnow()
            }
    
    async def scrape_all_sources(self, max_pages: int = 5) -> List[Dict[str, Any]]:
        """Scrape all registered sources"""
        results = []
        sources = self.registry.list_scrapers()
        
        for source_name in sources:
            result = await self.scrape_source(source_name, max_pages)
            results.append(result)
            
            # Add delay between sources to be respectful
            if source_name != sources[-1]:
                await asyncio.sleep(30)
        
        return results
    
    async def health_check_all(self) -> Dict[str, Any]:
        """Health check for all scrapers"""
        health_status = {}
        
        for scraper in self.registry.get_all_scrapers():
            try:
                health_status[scraper.source_name] = await scraper.health_check()
            except Exception as e:
                health_status[scraper.source_name] = {
                    "source": scraper.source_name,
                    "accessible": False,
                    "status": "error",
                    "error": str(e)
                }
        
        return health_status
    
    async def _save_jobs(self, jobs: List[UniversalJob]) -> tuple[int, int]:
        """Save jobs to database with deduplication"""
        new_jobs_count = 0
        updated_jobs_count = 0
        
        with SessionLocal() as db:
            for job in jobs:
                try:
                    # Check if job already exists
                    existing_job = db.query(Job).filter(
                        Job.external_id == job.external_id,
                        Job.source == job.source
                    ).first()
                    
                    if existing_job:
                        # Update existing job
                        existing_job.title = job.title
                        existing_job.company = job.company
                        existing_job.location = job.location
                        existing_job.description = job.description
                        existing_job.salary_range = job.salary_range
                        existing_job.employment_type = job.employment_type
                        existing_job.department = job.department
                        existing_job.vessel_type = job.vessel_type
                        existing_job.quality_score = job.quality_score
                        existing_job.updated_at = datetime.utcnow()
                        
                        updated_jobs_count += 1
                    else:
                        # Create new job
                        db_job = Job(
                            external_id=job.external_id,
                            title=job.title,
                            company=job.company,
                            location=job.location,
                            description=job.description,
                            source=job.source,
                            source_url=str(job.source_url),
                            salary_range=job.salary_range,
                            employment_type=job.employment_type,
                            department=job.department,
                            vessel_type=job.vessel_type,
                            posted_date=job.posted_date,
                            quality_score=job.quality_score,
                            created_at=datetime.utcnow(),
                            updated_at=datetime.utcnow()
                        )
                        db.add(db_job)
                        new_jobs_count += 1
                
                except Exception as e:
                    logger.error(f"Error saving job {job.title}: {e}")
                    continue
            
            try:
                db.commit()
            except Exception as e:
                logger.error(f"Error committing jobs to database: {e}")
                db.rollback()
                return 0, 0
        
        return new_jobs_count, updated_jobs_count
    
    def get_scraper_stats(self) -> Dict[str, Any]:
        """Get statistics for all scrapers"""
        stats = {
            "total_scrapers": len(self.registry.list_scrapers()),
            "available_scrapers": self.registry.list_scrapers(),
            "health_status": {}
        }
        
        # Get health status for each scraper
        for scraper in self.registry.get_all_scrapers():
            stats["health_status"][scraper.source_name] = {
                "supported_filters": scraper.get_supported_filters(),
                "base_url": scraper.base_url
            }
        
        return stats

# Convenience functions for backward compatibility
async def scrape_daywork123(max_pages: int = 5) -> Dict[str, Any]:
    """Convenience function to scrape Daywork123.com"""
    service = ScrapingService()
    return await service.scrape_source("daywork123", max_pages)

async def scrape_yotspot(max_pages: int = 5) -> Dict[str, Any]:
    """Convenience function to scrape Yotspot.com"""
    service = ScrapingService()
    return await service.scrape_source("yotspot", max_pages)

async def scrape_all_sources(max_pages: int = 5) -> List[Dict[str, Any]]:
    """Convenience function to scrape all sources"""
    service = ScrapingService()
    return await service.scrape_all_sources(max_pages)
</code>

templates/base.html:
<code>
<!DOCTYPE html>
<html lang="en" data-theme="cupcake">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="0" />
    <meta name="cache-buster" content="boats-only-v4-20250128" />
    <title>{% block title %}YotCrew.app{% endblock %}</title>
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/static/favicon.svg">
    <link rel="icon" type="image/x-icon" href="/static/favicon.svg">
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- DaisyUI 4.x for better CDN compatibility -->
    <link href="https://cdn.jsdelivr.net/npm/daisyui@4.12.10/dist/full.min.css" rel="stylesheet" type="text/css" />
    
    <!-- HTMX -->
    <script src="https://unpkg.com/htmx.org@1.9.9"></script>
    
    <!-- Alpine.js -->
    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js?v=20250128"></script>
    
    <!-- Lucide Icons -->
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    
    <style>
        .line-clamp-2 {
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }
        .line-clamp-3 {
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }
    </style>

    <!-- COMPLETE CACHE DESTRUCTION - BOATS ONLY v4.0 -->
    <script>
        // NUCLEAR CACHE-BUSTING: Destroy all browser cache for Alpine components
        window.YOTCREW_VERSION = '4.0-BOATS-ONLY-' + Date.now();
        console.log('üöÄüõ•Ô∏è NUCLEAR CACHE-BUSTING - YotCrew v' + window.YOTCREW_VERSION);
        
        // Force Alpine to reload by creating completely new namespace
        window.addEventListener('load', function() {
            console.log('üî• Page loaded - Forcing Alpine component refresh');
            
            // Clear any cached data
            try {
                localStorage.removeItem('alpine-components');
                sessionStorage.clear();
                console.log('üßπ Cleared browser storage');
            } catch(e) {
                console.log('Storage already clear');
            }
        });
        
        // Global Alpine.js components available to all templates and partials
        document.addEventListener('alpine:init', () => {
            console.log('üéø Alpine.js initializing BOATS-ONLY components v' + window.YOTCREW_VERSION);
            
            // BOATS ONLY - Job Grid Component
            Alpine.data('jobGrid', () => {
                console.log('üõ•Ô∏è Creating BOATS-ONLY jobGrid component');
                return {
                    selectedJobs: [],
                    
                    // Yacht images collection for job cards
                    yachtImages: [
                        {
                            id: 1,
                            url: "https://images.unsplash.com/photo-1544551763-46a013bb70d5?w=400&h=200&fit=crop&crop=center",
                            alt: "White Superyacht Side Profile"
                        },
                        {
                            id: 2,
                            url: "https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=400&h=200&fit=crop&crop=center",
                            alt: "Luxury Motor Yacht Aerial"
                        },
                        {
                            id: 3,
                            url: "https://images.unsplash.com/photo-1517101216274-0a676e44e4bd?w=400&h=200&fit=crop&crop=center",
                            alt: "Superyacht Bow Angle"
                        },
                        {
                            id: 4,
                            url: "https://images.unsplash.com/photo-1469474968028-56623f02e42e?w=400&h=200&fit=crop&crop=center",
                            alt: "Marina Superyacht Docked"
                        },
                        {
                            id: 5,
                            url: "https://images.unsplash.com/photo-1615781222256-cd404c71eb9e?w=400&h=200&fit=crop&crop=center",
                            alt: "Sunset Superyacht"
                        },
                        {
                            id: 6,
                            url: "https://images.unsplash.com/photo-1566576912321-d58ddd7a6088?w=400&h=200&fit=crop&crop=center",
                            alt: "Classic Motor Yacht"
                        },
                        {
                            id: 7,
                            url: "https://images.unsplash.com/photo-1600298881974-6be191ceeda1?w=400&h=200&fit=crop&crop=center",
                            alt: "Harbor Yacht View"
                        },
                        {
                            id: 8,
                            url: "https://images.unsplash.com/photo-1600298882047-7a4db16b37bb?w=400&h=200&fit=crop&crop=center",
                            alt: "White Yacht Starboard"
                        },
                        {
                            id: 9,
                            url: "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400&h=200&fit=crop&crop=center",
                            alt: "Superyacht Low Profile"
                        },
                        {
                            id: 10,
                            url: "https://images.unsplash.com/photo-1558618047-3c8c76ca7d13?w=400&h=200&fit=crop&crop=center",
                            alt: "Modern Yacht Design"
                        },
                        {
                            id: 11,
                            url: "https://images.unsplash.com/photo-1567899378494-47b22a2ae96a?w=400&h=200&fit=crop&crop=center",
                            alt: "Sleek Motor Yacht"
                        },
                        {
                            id: 12,
                            url: "https://images.unsplash.com/photo-1589810635657-84caf286b8ea?w=400&h=200&fit=crop&crop=center",
                            alt: "Yacht Bridge Detail"
                        },
                        {
                            id: 13,
                            url: "https://images.unsplash.com/photo-1600195077909-3b42abfcddef?w=400&h=200&fit=crop&crop=center",
                            alt: "Superyacht High View"
                        },
                        {
                            id: 14,
                            url: "https://images.unsplash.com/photo-1600195078299-a7de86e7dee8?w=400&h=200&fit=crop&crop=center",
                            alt: "Yacht Port Side"
                        },
                        {
                            id: 15,
                            url: "https://images.unsplash.com/photo-1626897530052-0a28ad2f1237?w=400&h=200&fit=crop&crop=center",
                            alt: "Motor Yacht Quarter"
                        },
                        {
                            id: 16,
                            url: "https://images.unsplash.com/photo-1600298881428-5c0f2a0b5173?w=400&h=200&fit=crop&crop=center",
                            alt: "Luxury Yacht Stern"
                        },
                        {
                            id: 17,
                            url: "https://images.unsplash.com/photo-1597149379073-e9a3c9fd5f65?w=400&h=200&fit=crop&crop=center",
                            alt: "Ocean Superyacht"
                        },
                        {
                            id: 18,
                            url: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=200&fit=crop&crop=center",
                            alt: "Mega Yacht Profile"
                        },
                        {
                            id: 19,
                            url: "https://images.unsplash.com/photo-1544551763-46a013bb70d5?w=400&h=200&fit=crop&crop=focalpoint&fp-x=0.3&fp-y=0.6",
                            alt: "Superyacht Detail View"
                        },
                        {
                            id: 20,
                            url: "https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=400&h=200&fit=crop&crop=focalpoint&fp-x=0.7&fp-y=0.4",
                            alt: "Yacht Aerial Close-up"
                        },
                        {
                            id: 21,
                            url: "https://images.unsplash.com/photo-1517101216274-0a676e44e4bd?w=400&h=200&fit=crop&crop=focalpoint&fp-x=0.5&fp-y=0.3",
                            alt: "Superyacht Front Detail"
                        },
                        {
                            id: 22,
                            url: "https://images.unsplash.com/photo-1469474968028-56623f02e42e?w=400&h=200&fit=crop&crop=focalpoint&fp-x=0.6&fp-y=0.7",
                            alt: "Marina Yacht Perspective"
                        },
                        {
                            id: 23,
                            url: "https://images.unsplash.com/photo-1615781222256-cd404c71eb9e?w=400&h=200&fit=crop&crop=focalpoint&fp-x=0.4&fp-y=0.5",
                            alt: "Sunset Yacht Silhouette"
                        },
                        {
                            id: 24,
                            url: "https://images.unsplash.com/photo-1566576912321-d58ddd7a6088?w=400&h=200&fit=crop&crop=focalpoint&fp-x=0.2&fp-y=0.6",
                            alt: "Classic Yacht Side"
                        },
                        {
                            id: 25,
                            url: "https://images.unsplash.com/photo-1600298881974-6be191ceeda1?w=400&h=200&fit=crop&crop=focalpoint&fp-x=0.8&fp-y=0.4",
                            alt: "Harbor Yacht Wide"
                        },
                        {
                            id: 26,
                            url: "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400&h=200&fit=crop&crop=focalpoint&fp-x=0.3&fp-y=0.7",
                            alt: "Superyacht Low Angle"
                        },
                        {
                            id: 27,
                            url: "https://images.unsplash.com/photo-1558618047-3c8c76ca7d13?w=400&h=200&fit=crop&crop=focalpoint&fp-x=0.6&fp-y=0.3",
                            alt: "Modern Yacht Close"
                        },
                        {
                            id: 28,
                            url: "https://images.unsplash.com/photo-1567899378494-47b22a2ae96a?w=400&h=200&fit=crop&crop=focalpoint&fp-x=0.4&fp-y=0.8",
                            alt: "Sleek Yacht Profile"
                        },
                        {
                            id: 29,
                            url: "https://images.unsplash.com/photo-1589810635657-84caf286b8ea?w=400&h=200&fit=crop&crop=focalpoint&fp-x=0.7&fp-y=0.2",
                            alt: "Yacht Bridge Angle"
                        },
                        {
                            id: 30,
                            url: "https://images.unsplash.com/photo-1600195077909-3b42abfcddef?w=400&h=200&fit=crop&crop=focalpoint&fp-x=0.5&fp-y=0.5",
                            alt: "Superyacht Top View"
                        }
                    ],
                    
                    getRandomYachtImage() {
                        const randomIndex = Math.floor(Math.random() * this.yachtImages.length);
                        const randomImage = this.yachtImages[randomIndex];
                        console.log('üé≤üõ•Ô∏è BOATS-ONLY Random yacht image selected:', randomImage);
                        console.log('üîç Total yacht images available:', this.yachtImages.length);
                        console.log('üì∏ First image alt text:', this.yachtImages[0].alt);
                        return randomImage;
                    },
                    
                    updateSelection(jobId, isSelected) {
                        if (isSelected) {
                            if (!this.selectedJobs.includes(jobId)) {
                                this.selectedJobs.push(jobId);
                            }
                        } else {
                            this.selectedJobs = this.selectedJobs.filter(id => id !== jobId);
                        }
                    },
                    
                    clearSelection() {
                        this.selectedJobs = [];
                        // Clear all checkboxes
                        document.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = false);
                    },
                    
                    compareJobs() {
                        alert(`Comparing ${this.selectedJobs.length} jobs: ${this.selectedJobs.join(', ')}`);
                    }
                };
            });
            
            // Individual Job Card Component
            Alpine.data('jobCard', (jobId, jobTitle, jobDescription) => {
                console.log('üÉè Creating jobCard component for:', jobId);
                return {
                    id: jobId,
                    title: jobTitle,
                    description: jobDescription,
                    expanded: false,
                    selected: false,
                    saved: false,
                    cardYachtImage: {
                        url: 'https://images.unsplash.com/photo-1544551763-46a013bb70d5?w=400&h=200&fit=crop&crop=center',
                        alt: 'White Superyacht Side Profile'
                    },
                    
                    init() {
                        // Get random yacht image for this card
                        console.log('üöÄ Initializing job card:', this.id);
                        this.refreshYachtImage();
                    },
                    
                    refreshYachtImage() {
                        // Get random yacht image from parent component
                        const parent = this.$parent;
                        console.log('üîÑ Refreshing yacht image for job:', this.id, 'Parent:', parent);
                        if (parent && parent.getRandomYachtImage) {
                            this.cardYachtImage = parent.getRandomYachtImage();
                            console.log('‚úÖ New image assigned:', this.cardYachtImage);
                        } else {
                            console.warn('‚ö†Ô∏è Parent or getRandomYachtImage not available, using fallback');
                            // Fallback: get random image directly - BOATS ONLY
                            const images = [
                                {
                                    url: "https://images.unsplash.com/photo-1544551763-46a013bb70d5?w=400&h=200&fit=crop&crop=center",
                                    alt: "White Superyacht Side Profile"
                                },
                                {
                                    url: "https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=400&h=200&fit=crop&crop=center",
                                    alt: "Luxury Motor Yacht Aerial"
                                },
                                {
                                    url: "https://images.unsplash.com/photo-1517101216274-0a676e44e4bd?w=400&h=200&fit=crop&crop=center",
                                    alt: "Superyacht Bow Angle"
                                },
                                {
                                    url: "https://images.unsplash.com/photo-1469474968028-56623f02e42e?w=400&h=200&fit=crop&crop=center",
                                    alt: "Marina Superyacht Docked"
                                },
                                {
                                    url: "https://images.unsplash.com/photo-1615781222256-cd404c71eb9e?w=400&h=200&fit=crop&crop=center",
                                    alt: "Sunset Superyacht"
                                }
                            ];
                            const randomIndex = Math.floor(Math.random() * images.length);
                            this.cardYachtImage = images[randomIndex];
                            console.log('üéØ Fallback image assigned:', this.cardYachtImage);
                        }
                    },
                    
                    toggleExpanded() {
                        this.expanded = !this.expanded;
                    },
                    
                    toggleSaved() {
                        this.saved = !this.saved;
                        console.log(`Job ${this.id} ${this.saved ? 'saved' : 'unsaved'}`);
                    },
                    
                    copyJobLink() {
                        const url = `${window.location.origin}/jobs/${this.id}`;
                        navigator.clipboard.writeText(url).then(() => {
                            console.log('Job link copied!');
                        });
                    },
                    
                    shareJob() {
                        if (navigator.share) {
                            navigator.share({
                                title: this.title,
                                text: this.description.substring(0, 100) + '...',
                                url: `${window.location.origin}/jobs/${this.id}`
                            });
                        } else {
                            this.copyJobLink();
                        }
                    },

                    handleImageError() {
                        console.warn(`‚ùå Image failed to load for job ${this.id}. Using fallback.`);
                        this.refreshYachtImage();
                    }
                };
            });
            
            console.log('‚úÖ Alpine.js global components registered successfully');
        });
    </script>
</head>

<body class="min-h-screen bg-base-200">

    <!-- Main Content -->
    <main>
        {% block content %}{% endblock %}
    </main>

    <!-- Additional page-specific JavaScript -->
    {% block scripts %}{% endblock %}

    <script>
         // Set cupcake theme properly
         document.addEventListener('DOMContentLoaded', function() {
             document.documentElement.setAttribute('data-theme', 'cupcake');
             console.log('Cupcake theme set via DaisyUI data-theme attribute');
         });

    </script>
</body>
</html> 
</code>

templates/dashboard.html:
<code>
{% extends "base.html" %}

{% block title %}YotCrew.app{% endblock %}

{% block content %}
<!-- Dashboard with Logo -->
<div class="container mx-auto p-4">
    <!-- Navigation Header with Logo -->
    <nav class="navbar bg-base-100 shadow-lg rounded-lg mb-6 min-h-28 py-4">
        <div class="navbar-start">
            <a href="/" class="btn btn-ghost normal-case text-xl p-2">
                <img src="/static/logo.png" alt="YotCrew.app" class="h-24 w-24 rounded-full object-cover">
            </a>
        </div>
        <div class="navbar-center hidden lg:flex">
            <p class="text-base-content/70 text-sm">Latest yacht crew opportunities</p>
        </div>
        <div class="navbar-end">
            <a href="/" class="btn btn-primary btn-sm">
                üîç Go to Interactive Jobs Page
            </a>
        </div>
    </nav>
    
    <!-- Simple Jobs Grid - Cards Only -->
    <div id="jobs-container" 
         hx-get="/htmx/jobs-table?limit=50" 
         hx-trigger="load"
         hx-target="this"
         hx-swap="innerHTML">
        <div class="flex justify-center items-center h-64">
            <div class="loading loading-spinner loading-lg"></div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
    // Auto-refresh dashboard stats
    setInterval(function() {
        const statsElement = document.getElementById('dashboard-stats');
        if (statsElement) {
            htmx.trigger(statsElement, 'refresh');
        }
    }, 60000); // Every minute
    
    // Initialize icons after content loads
    document.addEventListener('htmx:afterSwap', function() {
        lucide.createIcons();
    });
</script>
{% endblock %} 
</code>

templates/jobs.html:
<code>
{% extends "base.html" %}

{% block title %}YotCrew.app{% endblock %}

{% block content %}
<div class="space-y-6">
    <!-- Unified Header with Navigation and Filters -->
    <div class="bg-base-100 shadow-xl rounded-lg overflow-hidden" x-data="{ ...jobFilters(), ...yachtGallery() }">
        <!-- Top Navigation Bar -->
        <nav class="navbar bg-base-200/50 px-6 py-4">
            <div class="navbar-start">
                <a href="/" class="btn btn-ghost normal-case text-xl p-2">
                    <img src="/static/logo.png" alt="YotCrew.app" class="h-16 w-16 rounded-full object-cover">
                    <span class="ml-2 font-bold text-lg hidden sm:block">YotCrew.app</span>
                </a>
            </div>
            <div class="navbar-center hidden lg:flex">
                <div class="text-center">
                    <p class="text-base-content/70 text-sm">Find your perfect yacht position</p>
                    <div class="text-xs text-base-content/50" x-show="searchResults.total > 0">
                        <span x-text="searchResults.total || '0'"></span> opportunities available
                    </div>
                </div>
            </div>
            <div class="navbar-end flex items-center gap-3">
                <!-- Random Yacht Image Display -->
                <div class="hidden md:flex items-center gap-2">
                    <div class="avatar">
                        <div class="w-10 h-10 rounded-full ring ring-primary ring-offset-base-100 ring-offset-2">
                            <img :src="currentYachtImage.url" 
                                 :alt="currentYachtImage.alt"
                                 class="object-cover w-full h-full transition-all duration-500"
                                 x-transition:enter="transition ease-out duration-300"
                                 x-transition:enter-start="opacity-0 scale-95"
                                 x-transition:enter-end="opacity-100 scale-100">
                        </div>
                    </div>
                    <button @click="randomizeYachtImage()" 
                            class="btn btn-ghost btn-xs text-xs opacity-70 hover:opacity-100"
                            title="New yacht image">
                        üé≤
                    </button>
                </div>

                <!-- Quick Actions -->
                <button class="btn btn-primary btn-sm" 
                        hx-post="/api/scrape" 
                        hx-confirm="Refresh job listings?"
                        hx-target="#refresh-status">
                    üîÑ Refresh
                </button>
                
                <!-- Menu Dropdown -->
                <div class="dropdown dropdown-end">
                    <div tabindex="0" role="button" class="btn btn-ghost btn-circle btn-sm">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h7" /></svg>
                    </div>
                    <ul tabindex="0" class="menu menu-sm dropdown-content mt-3 z-[1] p-2 shadow bg-base-100 rounded-box w-52">
                        <li><a href="/">üè† Home</a></li>
                        <li><a href="/dashboard">üìä Dashboard</a></li>
                        <li><a href="#" onclick="location.reload()">üîÑ Refresh</a></li>
                    </ul>
                </div>
            </div>
        </nav>

        <!-- Yacht Image Banner (Mobile) -->
        <div class="md:hidden relative h-20 overflow-hidden">
            <img :src="currentYachtImage.url" 
                 :alt="currentYachtImage.alt"
                 class="w-full h-full object-cover opacity-20"
                 x-transition:enter="transition ease-out duration-500"
                 x-transition:enter-start="opacity-0"
                 x-transition:enter-end="opacity-20">
            <div class="absolute inset-0 bg-gradient-to-r from-base-100/80 to-transparent"></div>
            <div class="absolute bottom-2 left-4 text-xs text-base-content/60" x-text="currentYachtImage.alt"></div>
            <button @click="randomizeYachtImage()" 
                    class="absolute bottom-2 right-4 btn btn-ghost btn-xs opacity-70">
                üé≤ New Image
            </button>
        </div>

        <!-- Integrated Search and Filters Section -->
        <div class="px-6 py-4 bg-gradient-to-r from-base-100 to-base-200/30">
            <!-- Filter Status and Actions Bar -->
            <div class="flex justify-between items-center mb-4" x-show="hasActiveFilters || searchResults.total > 0">
                <div class="flex items-center gap-4">
                    <div class="text-sm text-base-content/70">
                        <span class="font-semibold" x-text="searchResults.total || '0'"></span> jobs found
                        <span x-show="hasActiveFilters" class="text-primary ml-2">‚Ä¢ <span x-text="activeFilterCount"></span> filters active</span>
                    </div>
                    
                    <!-- Active Filter Pills -->
                    <div class="flex flex-wrap gap-1" x-show="hasActiveFilters">
                        <span x-show="filters.search" 
                              class="badge badge-primary badge-sm cursor-pointer hover:badge-primary-focus"
                              @click="filters.search = ''; applyFilters()">
                            üîç <span x-text="filters.search.slice(0, 10) + (filters.search.length > 10 ? '...' : '')"></span> ‚úï
                        </span>
                        <span x-show="filters.jobType" 
                              class="badge badge-secondary badge-sm cursor-pointer hover:badge-secondary-focus"
                              @click="filters.jobType = ''; applyFilters()">
                            üíº <span x-text="filters.jobType"></span> ‚úï
                        </span>
                        <span x-show="filters.location" 
                              class="badge badge-accent badge-sm cursor-pointer hover:badge-accent-focus"
                              @click="filters.location = ''; applyFilters()">
                            üìç <span x-text="filters.location"></span> ‚úï
                        </span>
                        <span x-show="filters.department" 
                              class="badge badge-info badge-sm cursor-pointer hover:badge-info-focus"
                              @click="filters.department = ''; applyFilters()">
                            üë• <span x-text="filters.department"></span> ‚úï
                        </span>
                    </div>
                </div>
                
                <button @click="clearAllFilters()" 
                        x-show="hasActiveFilters"
                        class="btn btn-ghost btn-sm">
                    Clear All
                </button>
            </div>
            
            <!-- Main Search and Filter Form -->
            <form hx-get="/htmx/jobs-table" 
                  hx-target="#jobs-container" 
                  hx-trigger="submit"
                  @submit="updateResults()">
                
                <!-- Primary Search Row -->
                <div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-3 mb-4">
                    <!-- Enhanced Search -->
                    <div class="form-control md:col-span-2">
                        <label class="label">
                            <span class="label-text font-medium">üîç Search Jobs</span>
                        </label>
                        <div class="relative">
                            <input type="text" 
                                   name="search" 
                                   x-model="filters.search"
                                   @input.debounce.300ms="applyFilters()"
                                   placeholder="Job title, company, description..." 
                                   class="input input-bordered w-full pr-8" />
                            <button type="button"
                                    @click="filters.search = ''; applyFilters()"
                                    x-show="filters.search"
                                    class="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors">
                                ‚úï
                            </button>
                        </div>
                    </div>

                    <!-- Job Type Filter -->
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text font-medium">üíº Type</span>
                        </label>
                        <select name="job_type" 
                                x-model="filters.jobType"
                                @change="applyFilters()"
                                class="select select-bordered select-sm">
                            <option value="">All Types</option>
                            <option value="Permanent">Permanent</option>
                            <option value="Temporary">Temporary</option>
                            <option value="Rotational">Rotational</option>
                            <option value="Seasonal">Seasonal</option>
                        </select>
                    </div>

                    <!-- Location Filter -->
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text font-medium">üìç Location</span>
                        </label>
                        <select name="location" 
                                x-model="filters.location"
                                @change="applyFilters()"
                                class="select select-bordered select-sm">
                            <option value="">All Locations</option>
                            <option value="Mediterranean">Mediterranean</option>
                            <option value="Caribbean">Caribbean</option>
                            <option value="United States">United States</option>
                            <option value="France">France</option>
                            <option value="Monaco">Monaco</option>
                        </select>
                    </div>

                    <!-- Sort Filter -->
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text font-medium">üìä Sort</span>
                        </label>
                        <select name="sort" 
                                x-model="filters.sort"
                                @change="applyFilters()"
                                class="select select-bordered select-sm">
                            <option value="">Latest</option>
                            <option value="posted_at">Date Posted</option>
                            <option value="title">Job Title</option>
                            <option value="salary">Salary</option>
                        </select>
                    </div>
                </div>

                <!-- Secondary Filters Row -->
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 mb-4">
                    <!-- Vessel Size Filter -->
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text font-medium">üõ•Ô∏è Vessel Size</span>
                        </label>
                        <select name="vessel_size" 
                                x-model="filters.vessel_size"
                                @change="applyFilters()"
                                class="select select-bordered select-sm">
                            <option value="">All Sizes</option>
                            <option value="0-30m">0-30m</option>
                            <option value="31-39m">31-39m</option>
                            <option value="40-49m">40-49m</option>
                            <option value="50-74m">50-74m</option>
                            <option value="75m+">75m+</option>
                        </select>
                    </div>

                    <!-- Department Filter -->
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text font-medium">üë• Department</span>
                        </label>
                        <select name="department" 
                                x-model="filters.department"
                                @change="applyFilters()"
                                class="select select-bordered select-sm">
                            <option value="">All Departments</option>
                            <option value="Deck">Deck</option>
                            <option value="Interior">Interior</option>
                            <option value="Engineering">Engineering</option>
                            <option value="Galley">Galley</option>
                        </select>
                    </div>

                    <!-- Vessel Type Filter -->
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text font-medium">‚õµ Vessel Type</span>
                        </label>
                        <select name="vessel_type" 
                                x-model="filters.vessel_type"
                                @change="applyFilters()"
                                class="select select-bordered select-sm">
                            <option value="">All Types</option>
                            <option value="Motor">Motor Yacht</option>
                            <option value="Sailing">Sailing Yacht</option>
                            <option value="Explorer">Explorer</option>
                            <option value="Catamaran">Catamaran</option>
                        </select>
                    </div>
                </div>

                <!-- Quick Filter Badges -->
                <div class="border-t border-base-300 pt-4">
                    <div class="flex items-center gap-2 mb-2">
                        <span class="text-sm font-medium text-base-content/70">Quick Filters:</span>
                    </div>
                    <div class="flex flex-wrap gap-2">
                        <!-- Department Quick Filters -->
                        <button type="button" @click="setQuickFilter('department', 'Deck')" 
                                :class="filters.department === 'Deck' ? 'badge-primary' : 'badge-outline hover:badge-primary'"
                                class="badge cursor-pointer transition-all duration-200">
                            ‚öì Deck
                        </button>
                        <button type="button" @click="setQuickFilter('department', 'Interior')" 
                                :class="filters.department === 'Interior' ? 'badge-primary' : 'badge-outline hover:badge-primary'"
                                class="badge cursor-pointer transition-all duration-200">
                            üè† Interior
                        </button>
                        <button type="button" @click="setQuickFilter('department', 'Engineering')" 
                                :class="filters.department === 'Engineering' ? 'badge-primary' : 'badge-outline hover:badge-primary'"
                                class="badge cursor-pointer transition-all duration-200">
                            üîß Engineering
                        </button>
                        <button type="button" @click="setQuickFilter('department', 'Galley')" 
                                :class="filters.department === 'Galley' ? 'badge-primary' : 'badge-outline hover:badge-primary'"
                                class="badge cursor-pointer transition-all duration-200">
                            üë®‚Äçüç≥ Galley
                        </button>
                        
                        <!-- Vessel Type Quick Filters -->
                        <div class="divider divider-horizontal mx-1"></div>
                        <button type="button" @click="setQuickFilter('vessel_type', 'Motor')" 
                                :class="filters.vessel_type === 'Motor' ? 'badge-secondary' : 'badge-outline hover:badge-secondary'"
                                class="badge cursor-pointer transition-all duration-200">
                            üõ•Ô∏è Motor
                        </button>
                        <button type="button" @click="setQuickFilter('vessel_type', 'Sailing')" 
                                :class="filters.vessel_type === 'Sailing' ? 'badge-secondary' : 'badge-outline hover:badge-secondary'"
                                class="badge cursor-pointer transition-all duration-200">
                            ‚õµ Sailing
                        </button>
                        <button type="button" @click="setQuickFilter('vessel_type', 'Explorer')" 
                                :class="filters.vessel_type === 'Explorer' ? 'badge-secondary' : 'badge-outline hover:badge-secondary'"
                                class="badge cursor-pointer transition-all duration-200">
                            üß≠ Explorer
                        </button>
                    </div>
                </div>

                <!-- Hidden submit button -->
                <input type="submit" style="display: none;" />
            </form>
        </div>
    </div>
    
    <!-- Status Messages -->
    <div id="refresh-status"></div>

    <!-- Jobs Container -->
    <div id="jobs-container" 
         hx-get="/htmx/jobs-table" 
         hx-trigger="load">
        <!-- Jobs will be loaded here -->
        <div class="flex justify-center py-8">
            <span class="loading loading-spinner loading-lg"></span>
        </div>
    </div>
</div>

<!-- Job Detail Modal -->
<dialog id="job_modal" class="modal">
    <div class="modal-box w-11/12 max-w-5xl">
        <form method="dialog">
            <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">‚úï</button>
        </form>
        <div id="job-modal-content">
            <!-- Job details will be loaded here via HTMX -->
        </div>
    </div>
    <form method="dialog" class="modal-backdrop">
        <button>close</button>
    </form>
</dialog>
{% endblock %}

{% block scripts %}
<script>
    // Yacht Gallery Component
    function yachtGallery() {
        return {
            currentYachtImage: {},
            yachtImages: [
                {
                    id: 1,
                    url: "https://images.unsplash.com/photo-1544551763-46a013bb70d5?w=400&h=400&fit=crop&crop=center",
                    alt: "Luxury Motor Yacht"
                },
                {
                    id: 2,
                    url: "https://images.unsplash.com/photo-1469474968028-56623f02e42e?w=400&h=400&fit=crop&crop=center",
                    alt: "Superyacht in Harbor"
                },
                {
                    id: 3,
                    url: "https://images.unsplash.com/photo-1582967788606-a171c1080cb0?w=400&h=400&fit=crop&crop=center",
                    alt: "Modern Sailing Yacht"
                },
                {
                    id: 4,
                    url: "https://images.unsplash.com/photo-1559827260-dc66d52bef19?w=400&h=400&fit=crop&crop=center",
                    alt: "Explorer Yacht"
                },
                {
                    id: 5,
                    url: "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400&h=400&fit=crop&crop=center",
                    alt: "Catamaran Superyacht"
                },
                {
                    id: 6,
                    url: "https://images.unsplash.com/photo-1615781222256-cd404c71eb9e?w=400&h=400&fit=crop&crop=center",
                    alt: "Mega Yacht at Sunset"
                },
                {
                    id: 7,
                    url: "https://images.unsplash.com/photo-1566576912321-d58ddd7a6088?w=400&h=400&fit=crop&crop=center",
                    alt: "Classic Motor Yacht"
                },
                {
                    id: 8,
                    url: "https://images.unsplash.com/photo-1500917293891-ef795e70e1f6?w=400&h=400&fit=crop&crop=center",
                    alt: "Sailing Superyacht"
                },
                {
                    id: 9,
                    url: "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400&h=400&fit=crop&crop=center",
                    alt: "Luxury Charter Yacht"
                },
                {
                    id: 10,
                    url: "https://images.unsplash.com/photo-1517101216274-0a676e44e4bd?w=400&h=400&fit=crop&crop=center",
                    alt: "Sport Fishing Yacht"
                },
                {
                    id: 11,
                    url: "https://images.unsplash.com/photo-1615781222256-cd404c71eb9e?w=400&h=400&fit=crop&crop=center",
                    alt: "Mediterranean Superyacht"
                },
                {
                    id: 12,
                    url: "https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=400&h=400&fit=crop&crop=center",
                    alt: "Ocean Explorer"
                },
                {
                    id: 13,
                    url: "https://images.unsplash.com/photo-1559827260-dc66d52bef19?w=400&h=400&fit=crop&crop=center",
                    alt: "Modern Expedition Yacht"
                },
                {
                    id: 14,
                    url: "https://images.unsplash.com/photo-1469474968028-56623f02e42e?w=400&h=400&fit=crop&crop=center",
                    alt: "Luxury Motor Yacht"
                },
                {
                    id: 15,
                    url: "https://images.unsplash.com/photo-1567899378494-47b22a2ae96a?w=400&h=400&fit=crop&crop=center",
                    alt: "Racing Yacht"
                },
                {
                    id: 16,
                    url: "https://images.unsplash.com/photo-1559827260-dc66d52bef19?w=400&h=400&fit=crop&crop=center",
                    alt: "Charter Superyacht"
                },
                {
                    id: 17,
                    url: "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400&h=400&fit=crop&crop=center",
                    alt: "Twin Hull Catamaran"
                },
                {
                    id: 18,
                    url: "https://images.unsplash.com/photo-1615781222256-cd404c71eb9e?w=400&h=400&fit=crop&crop=center",
                    alt: "Sunset Cruiser"
                },
                {
                    id: 19,
                    url: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=400&fit=crop&crop=center",
                    alt: "Ocean Liner Style Yacht"
                },
                {
                    id: 20,
                    url: "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400&h=400&fit=crop&crop=center",
                    alt: "High-Speed Motor Yacht"
                },
                {
                    id: 21,
                    url: "https://images.unsplash.com/photo-1544551763-46a013bb70d5?w=400&h=400&fit=crop&crop=center",
                    alt: "Flybridge Motor Yacht"
                },
                {
                    id: 22,
                    url: "https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=400&h=400&fit=crop&crop=center",
                    alt: "Explorer Superyacht"
                },
                {
                    id: 23,
                    url: "https://images.unsplash.com/photo-1517101216274-0a676e44e4bd?w=400&h=400&fit=crop&crop=center",
                    alt: "Sport Yacht"
                },
                {
                    id: 24,
                    url: "https://images.unsplash.com/photo-1559827260-dc66d52bef19?w=400&h=400&fit=crop&crop=center",
                    alt: "Mega Yacht"
                },
                {
                    id: 25,
                    url: "https://images.unsplash.com/photo-1615781222256-cd404c71eb9e?w=400&h=400&fit=crop&crop=center",
                    alt: "Luxury Charter Vessel"
                },
                {
                    id: 26,
                    url: "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400&h=400&fit=crop&crop=center",
                    alt: "High-Performance Yacht"
                },
                {
                    id: 27,
                    url: "https://images.unsplash.com/photo-1500917293891-ef795e70e1f6?w=400&h=400&fit=crop&crop=center",
                    alt: "Classic Sailing Yacht"
                },
                {
                    id: 28,
                    url: "https://images.unsplash.com/photo-1567899378494-47b22a2ae96a?w=400&h=400&fit=crop&crop=center",
                    alt: "Performance Cruiser"
                },
                {
                    id: 29,
                    url: "https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=400&h=400&fit=crop&crop=center",
                    alt: "Long Range Explorer"
                },
                {
                    id: 30,
                    url: "https://images.unsplash.com/photo-1469474968028-56623f02e42e?w=400&h=400&fit=crop&crop=center",
                    alt: "Ultimate Superyacht"
                }
            ],
            
            init() {
                this.shuffleYachtImages();
                this.randomizeYachtImage();
                
                // Auto-rotate images every 30 seconds
                setInterval(() => {
                    this.randomizeYachtImage();
                }, 30000);
            },
            
            randomizeYachtImage() {
                const randomIndex = Math.floor(Math.random() * this.yachtImages.length);
                this.currentYachtImage = this.yachtImages[randomIndex];
            },
            
            shuffleYachtImages() {
                // Fisher-Yates shuffle algorithm
                const shuffled = [...this.yachtImages];
                for (let i = shuffled.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
                }
                this.yachtImages = shuffled;
            },
            
            getRandomYachtImage() {
                const randomIndex = Math.floor(Math.random() * this.yachtImages.length);
                return this.yachtImages[randomIndex];
            }
        }
    }



    // Alpine.js Components
    function jobFilters() {
        return {
            filters: {
                search: '',
                jobType: '',
                location: '',
                vessel_size: '',
                vessel_type: '',
                department: '',
                sort: ''
            },
            searchResults: {
                total: 0,
                loading: false
            },
            
            get hasActiveFilters() {
                return Object.values(this.filters).some(value => value !== '');
            },
            
            get activeFilterCount() {
                return Object.values(this.filters).filter(value => value !== '').length;
            },
            
            setQuickFilter(type, value) {
                if (this.filters[type] === value) {
                    this.filters[type] = '';
                } else {
                    this.filters[type] = value;
                }
                this.applyFilters();
            },
            
            clearAllFilters() {
                this.filters = {
                    search: '',
                    jobType: '',
                    location: '',
                    vessel_size: '',
                    vessel_type: '',
                    department: '',
                    sort: ''
                };
                this.applyFilters();
            },
            
            applyFilters() {
                this.searchResults.loading = true;
                
                // Build query parameters
                const params = new URLSearchParams();
                Object.entries(this.filters).forEach(([key, value]) => {
                    if (value) {
                        // Map frontend filter names to backend parameter names
                        const paramMap = {
                            'jobType': 'job_type',
                            'vessel_size': 'vessel_size',
                            'vessel_type': 'vessel_type'
                        };
                        const paramName = paramMap[key] || key;
                        params.append(paramName, value);
                    }
                });
                
                // Trigger HTMX request with filters
                htmx.ajax('GET', `/htmx/jobs-table?${params.toString()}`, {
                    target: '#jobs-container'
                }).then(() => {
                    this.searchResults.loading = false;
                });
            },
            
            updateResults() {
                // Called when form is submitted
                this.searchResults.loading = false;
            }
        }
    }
</script>
{% endblock %} 
</code>

templates/partials/jobs_table.html:
<code>
<!-- Enhanced Job Cards Grid with Alpine.js -->
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 p-4" 
     x-data="jobGrid()">
    {% for job in jobs %}
    <!-- Interactive Job Card -->
    <div class="card bg-base-100 w-full shadow-sm hover:shadow-lg transition-all duration-300"
         x-data="jobCard('{{ job.id }}', '{{ job.title }}', `{{ job.description|replace('`', '') if job.description else '' }}`)"
         :class="{ 'ring-2 ring-primary': selected, 'bg-base-200': saved }">
        
        <!-- Card Header with Select Checkbox -->
        <div class="absolute top-2 right-2 z-10 flex gap-2">
            <input type="checkbox" 
                   x-model="selected"
                   @change="updateSelection('{{ job.id }}', $event.target.checked)"
                   class="checkbox checkbox-primary checkbox-sm bg-white shadow-md"
                   title="Select for comparison">
            
            <button @click="toggleSaved()" 
                    :class="saved ? 'text-red-500' : 'text-gray-400'"
                    class="btn btn-circle btn-xs bg-white shadow-md hover:bg-gray-100"
                    :title="saved ? 'Remove from saved' : 'Save job'">
                <span x-text="saved ? '‚ù§Ô∏è' : 'ü§ç'"></span>
            </button>
        </div>
        
        <figure @click="toggleExpanded()" class="cursor-pointer relative overflow-hidden">
            <img :src="cardYachtImage.url || 'https://images.unsplash.com/photo-1544551763-46a013bb70d5?w=400&h=200&fit=crop&crop=center'" 
                 :alt="cardYachtImage.alt || 'Luxury Yacht'"
                 class="w-full h-48 object-cover transition-all duration-300"
                 :class="{ 'scale-105': expanded }"
                 @error="handleImageError()"
                 loading="lazy" />
            <!-- Yacht image refresh button -->
            <button @click.stop="refreshYachtImage()" 
                    class="absolute bottom-2 right-2 btn btn-circle btn-xs bg-white/80 hover:bg-white opacity-70 hover:opacity-100 transition-all"
                    title="New yacht image">
                üé≤
            </button>
            <!-- Image overlay with yacht name -->
            <div class="absolute bottom-2 left-2 bg-black/50 text-white text-xs px-2 py-1 rounded backdrop-blur-sm">
                <span x-text="cardYachtImage.alt || 'Luxury Yacht'"></span>
            </div>
        </figure>
        
        <div class="card-body p-4">
            <h2 class="card-title text-lg font-bold line-clamp-2 cursor-pointer"
                @click="toggleExpanded()">
                {{ job.title }}
                <span x-show="expanded" class="text-primary">üìñ</span>
            </h2>
            
            {% if job.company %}
            <p class="text-sm text-base-content/70 font-medium">{{ job.company }}</p>
            {% endif %}
            
            <!-- Expandable Description -->
            <div>
                {% if job.description %}
                <p class="text-sm text-base-content/80 my-2"
                   :class="expanded ? '' : 'line-clamp-3'">
                    {% if job.description|length > 100 %}
                        <span x-show="!expanded">{{ job.description[:100] }}...</span>
                        <span x-show="expanded">{{ job.description }}</span>
                    {% else %}
                        {{ job.description }}
                    {% endif %}
                </p>
                
                {% if job.description|length > 100 %}
                <button @click="toggleExpanded()" 
                        class="text-primary text-xs hover:underline">
                    <span x-text="expanded ? 'Show Less' : 'Show More'"></span>
                </button>
                {% endif %}
                {% endif %}
            </div>
            
            <!-- Badges -->
            <div class="flex flex-wrap gap-1 my-2">
                {% if job.location %}
                <div class="badge badge-outline badge-sm">
                    {{ job.location }}
                </div>
                {% endif %}
                
                {% if job.salary_range or job.salary %}
                <div class="badge badge-success badge-sm">
                    {{ job.salary_range or job.salary }}
                </div>
                {% endif %}
                
                {% if job.job_type %}
                <div class="badge badge-primary badge-sm">
                    {{ job.job_type }}
                </div>
                {% endif %}
                
                <!-- Source badge -->
                {% if job.source %}
                <div class="badge badge-secondary badge-sm">
                    {{ job.source }}
                </div>
                {% endif %}
            </div>
            
            <!-- Actions -->
            <div class="card-actions justify-between mt-4">
                <div class="flex gap-2">
                    {% if job.source_url or job.url %}
                    <a href="{{ job.source_url or job.url }}" target="_blank" 
                       class="btn btn-primary btn-sm"
                       @click.stop>
                        Apply
                    </a>
                    {% endif %}
                    <button class="btn btn-outline btn-sm" 
                            hx-get="/htmx/job-card/{{ job.id }}" 
                            hx-target="#job-modal-content"
                            @click.stop>
                        Details
                    </button>
                </div>
                
                <!-- Quick Actions -->
                <div class="flex gap-1">
                    <button @click.stop="copyJobLink()" 
                            class="btn btn-ghost btn-xs"
                            title="Copy job link">
                        üìã
                    </button>
                    <button @click.stop="shareJob()" 
                            class="btn btn-ghost btn-xs"
                            title="Share job">
                        üì§
                    </button>
                </div>
            </div>
        </div>
    </div>
    {% endfor %}
    
    <!-- Floating Comparison Panel -->
    <div x-show="selectedJobs.length > 0" 
         x-transition:enter="transition ease-out duration-300"
         x-transition:enter-start="transform translate-y-full"
         x-transition:enter-end="transform translate-y-0"
         class="fixed bottom-4 right-4 z-50">
        <div class="bg-primary text-primary-content p-4 rounded-lg shadow-xl">
            <div class="flex items-center gap-3">
                <span x-text="`${selectedJobs.length} jobs selected`" class="font-medium"></span>
                
                <button @click="compareJobs()" 
                        x-show="selectedJobs.length >= 2"
                        class="btn btn-secondary btn-sm">
                    Compare Jobs
                </button>
                
                <button @click="clearSelection()" 
                        class="btn btn-ghost btn-sm">
                    Clear
                </button>
            </div>
        </div>
    </div>
</div>

{% if not jobs %}
<!-- No Jobs State -->
<div class="flex flex-col items-center justify-center py-20">
    <div class="text-6xl mb-4">üõ•Ô∏è</div>
    <h3 class="text-xl font-bold mb-2">No Jobs Found</h3>
    <p class="text-base-content/70">Try refreshing or check back later</p>
</div>
{% endif %}

<!-- Job Detail Modal -->
<dialog id="job-modal" class="modal">
    <div class="modal-box max-w-4xl">
        <div id="job-modal-content">
            <!-- Job details will be loaded here -->
        </div>
        <div class="modal-action">
            <form method="dialog">
                <button class="btn">Close</button>
            </form>
        </div>
    </div>
</dialog> 
</code>

templates/partials/job_card.html:
<code>
<!-- Job Detail Modal Content -->
<div class="space-y-6">
    <!-- Job Header -->
    <div class="text-center border-b pb-4">
        <h1 class="text-2xl font-bold mb-2">{{ job.title }}</h1>
        {% if job.company %}
        <p class="text-lg text-base-content/70">{{ job.company }}</p>
        {% endif %}
        {% if job.location %}
        <p class="text-base-content/60">üìç {{ job.location }}</p>
        {% endif %}
    </div>

    <!-- Job Description -->
    {% if job.description %}
    <div class="card bg-base-200">
        <div class="card-body">
            <h3 class="card-title">Description</h3>
            <p class="text-base-content/80 leading-relaxed">{{ job.description }}</p>
        </div>
    </div>
    {% endif %}

    <!-- Job Details Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        {% if job.salary_range %}
        <div class="card bg-base-200">
            <div class="card-body">
                <h4 class="card-title text-lg">üí∞ Salary</h4>
                <p class="text-xl font-semibold text-success">{{ job.salary_range }}</p>
                {% if job.salary_per %}
                <p class="text-sm text-base-content/70">per {{ job.salary_per }}</p>
                {% endif %}
            </div>
        </div>
        {% endif %}

        {% if job.job_type or job.vessel_type or job.vessel_size %}
        <div class="card bg-base-200">
            <div class="card-body">
                <h4 class="card-title text-lg">üö¢ Position Details</h4>
                <div class="space-y-2">
                    {% if job.job_type %}
                    <p><span class="font-medium">Type:</span> {{ job.job_type }}</p>
                    {% endif %}
                    {% if job.vessel_type %}
                    <p><span class="font-medium">Vessel:</span> {{ job.vessel_type }}</p>
                    {% endif %}
                    {% if job.vessel_size %}
                    <p><span class="font-medium">Size:</span> {{ job.vessel_size }}</p>
                    {% endif %}
                </div>
            </div>
        </div>
        {% endif %}

        {% if job.department %}
        <div class="card bg-base-200">
            <div class="card-body">
                <h4 class="card-title text-lg">üë• Department</h4>
                <p class="text-lg">{{ job.department }}</p>
            </div>
        </div>
        {% endif %}

        {% if job.source %}
        <div class="card bg-base-200">
            <div class="card-body">
                <h4 class="card-title text-lg">üìã Source</h4>
                <p class="text-lg">{{ job.source.title() }}</p>
                {% if job.external_id %}
                <p class="text-sm text-base-content/70">ID: {{ job.external_id }}</p>
                {% endif %}
            </div>
        </div>
        {% endif %}
    </div>

    <!-- Apply Button -->
    {% if job.source_url %}
    <div class="text-center pt-4 border-t">
        <a href="{{ job.source_url }}" 
           target="_blank" 
           class="btn btn-primary btn-lg gap-2">
            Apply for this Position
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
            </svg>
        </a>
    </div>
    {% endif %}
</div> 
</code>

templates/partials/dashboard_stats.html:
<code>
<!-- Dashboard Statistics -->
<div class="stats shadow-xl w-full grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 bg-base-100" id="dashboard-stats">
    <div class="stat place-items-center">
        <div class="stat-figure text-primary">
            <i data-lucide="briefcase" class="h-8 w-8"></i>
        </div>
        <div class="stat-title">Total Opportunities</div>
        <div class="stat-value text-primary">{{ total_jobs }}</div>
        <div class="stat-desc">Premium yacht positions</div>
    </div>

    <div class="stat place-items-center">
        <div class="stat-figure text-secondary">
            <i data-lucide="trending-up" class="h-8 w-8"></i>
        </div>
        <div class="stat-title">New Today</div>
        <div class="stat-value text-secondary">{{ today_jobs }}</div>
        <div class="stat-desc">
            {% if today_jobs > 0 %}
            <span class="text-success flex items-center gap-1">
                <i data-lucide="arrow-up" class="h-3 w-3"></i>
                Fresh postings
            </span>
            {% else %}
            <span class="text-base-content/50">Check back tomorrow</span>
            {% endif %}
        </div>
    </div>

    <div class="stat place-items-center">
        <div class="stat-figure text-accent">
            <i data-lucide="calendar-days" class="h-8 w-8"></i>
        </div>
        <div class="stat-title">This Week</div>
        <div class="stat-value text-accent">{{ week_jobs }}</div>
        <div class="stat-desc">Past 7 days</div>
    </div>

    <div class="stat place-items-center">
        <div class="stat-figure text-success">
            <i data-lucide="activity" class="h-8 w-8"></i>
        </div>
        <div class="stat-title">System Status</div>
        {% if latest_scrape %}
            {% if latest_scrape.status == 'completed' %}
            <div class="stat-value text-sm text-success flex items-center gap-1">
                <i data-lucide="check-circle" class="h-4 w-4"></i>
                Online
            </div>
            <div class="stat-desc text-center">
                <div class="text-xs">
                    Last updated: {{ latest_scrape.completed_at.strftime('%H:%M') if latest_scrape.completed_at else 'Unknown' }}
                </div>
                <div class="text-xs font-medium text-success">
                    {{ latest_scrape.new_jobs or 0 }} new positions found
                </div>
            </div>
            {% elif latest_scrape.status == 'started' %}
            <div class="stat-value text-sm text-warning flex items-center gap-1">
                <span class="loading loading-spinner loading-xs"></span>
                Scanning
            </div>
            <div class="stat-desc">Searching for new positions...</div>
            {% elif latest_scrape.status == 'failed' %}
            <div class="stat-value text-sm text-error flex items-center gap-1">
                <i data-lucide="alert-triangle" class="h-4 w-4"></i>
                Error
            </div>
            <div class="stat-desc">System maintenance needed</div>
            {% else %}
            <div class="stat-value text-sm text-info flex items-center gap-1">
                <i data-lucide="pause" class="h-4 w-4"></i>
                {{ latest_scrape.status.title() }}
            </div>
            <div class="stat-desc">Status monitoring</div>
            {% endif %}
        {% else %}
        <div class="stat-value text-sm text-warning flex items-center gap-1">
            <i data-lucide="settings" class="h-4 w-4"></i>
            Setup
        </div>
        <div class="stat-desc">Initializing job scanner</div>
        {% endif %}
    </div>
</div>

<script>
    // Initialize Lucide icons for this stats component
    if (typeof lucide !== 'undefined') {
        lucide.createIcons();
    }
</script> 
</code>

